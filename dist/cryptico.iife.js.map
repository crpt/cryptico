{"version":3,"file":"cryptico.iife.js","sources":["../src/aes.ts","../src/random.ts","../src/jsbn.ts","../src/hash/native.ts","../src/hash/node.ts","../src/hash/index.ts","../src/rsa.ts","../src/api.ts"],"sourcesContent":["/*\n *  jsaes version 0.1  -  Copyright 2006 B. Poettering\n *\n *  This program is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU General Public License as\n *  published by the Free Software Foundation; either version 2 of the\n *  License, or (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n *  02111-1307 USA\n */\n\n// later modifications by wwwtyro@github\n\nimport { ByteArray } from './type'\n\nexport type AESKey = ByteArray\n\nexport const aes = <const>{\n  // eslint-disable-next-line prettier/prettier\n  Sbox: [\n    99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118,\n    202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114,\n    192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49,\n    21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9,\n    131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209,\n    0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170,\n    251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143,\n    146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236,\n    95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34,\n    42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6,\n    36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213,\n    78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166,\n    180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3,\n    246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217,\n    142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230,\n    66, 104, 65, 153, 45, 15, 176, 84, 187, 22,\n  ] as ByteArray,\n\n  ShiftRowTab: [\n    0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11,\n  ] as ByteArray,\n\n  Sbox_Inv: new Array<number>(256),\n  ShiftRowTab_Inv: new Array<number>(16),\n  xtime: new Array<number>(256),\n\n  Init() {\n    for (let i = 0; i < 256; i++) this.Sbox_Inv[this.Sbox[i]] = i\n\n    for (let i = 0; i < 16; i++) this.ShiftRowTab_Inv[this.ShiftRowTab[i]] = i\n\n    for (let i = 0; i < 128; i++) {\n      this.xtime[i] = i << 1\n      this.xtime[128 + i] = (i << 1) ^ 0x1b\n    }\n  },\n\n  Done() {\n    this.Sbox_Inv.length = 0\n    this.Sbox_Inv.length = 256\n    this.ShiftRowTab_Inv.length = 0\n    this.ShiftRowTab_Inv.length = 16\n    this.xtime.length = 0\n    this.xtime.length = 256\n  },\n\n  ExpandKey(key: AESKey) {\n    const kl = key.length\n    let ks,\n      Rcon = 1\n    switch (kl) {\n      case 16:\n        ks = 16 * (10 + 1)\n        break\n      case 24:\n        ks = 16 * (12 + 1)\n        break\n      case 32:\n        ks = 16 * (14 + 1)\n        break\n      default:\n        throw 'my.ExpandKey: Only key lengths of 16, 24 or 32 bytes allowed!'\n    }\n    for (let i = kl; i < ks; i += 4) {\n      let temp = key.slice(i - 4, i)\n      if (i % kl === 0) {\n        temp = [\n          aes.Sbox[temp[1]] ^ Rcon,\n          aes.Sbox[temp[2]],\n          aes.Sbox[temp[3]],\n          aes.Sbox[temp[0]],\n        ]\n        if ((Rcon <<= 1) >= 256) Rcon ^= 0x11b\n      } else if (kl > 24 && i % kl === 16)\n        temp = [\n          aes.Sbox[temp[0]],\n          aes.Sbox[temp[1]],\n          aes.Sbox[temp[2]],\n          aes.Sbox[temp[3]],\n        ]\n      for (let j = 0; j < 4; j++) key[i + j] = key[i + j - kl] ^ temp[j]\n    }\n  },\n\n  Encrypt(block: ByteArray, key: AESKey) {\n    const l = key.length\n    aes.AddRoundKey(block, key.slice(0, 16))\n    let i\n    for (i = 16; i < l - 16; i += 16) {\n      aes.SubBytes(block, aes.Sbox)\n      aes.ShiftRows(block, aes.ShiftRowTab)\n      aes.MixColumns(block)\n      aes.AddRoundKey(block, key.slice(i, i + 16))\n    }\n    aes.SubBytes(block, aes.Sbox)\n    aes.ShiftRows(block, aes.ShiftRowTab)\n    aes.AddRoundKey(block, key.slice(i, l))\n  },\n\n  Decrypt(block: ByteArray, key: AESKey) {\n    const l = key.length\n    aes.AddRoundKey(block, key.slice(l - 16, l))\n    aes.ShiftRows(block, aes.ShiftRowTab_Inv)\n    aes.SubBytes(block, aes.Sbox_Inv)\n    for (let i = l - 32; i >= 16; i -= 16) {\n      aes.AddRoundKey(block, key.slice(i, i + 16))\n      aes.MixColumns_Inv(block)\n      aes.ShiftRows(block, aes.ShiftRowTab_Inv)\n      aes.SubBytes(block, aes.Sbox_Inv)\n    }\n    aes.AddRoundKey(block, key.slice(0, 16))\n  },\n\n  SubBytes(state: ByteArray, sbox: ByteArray) {\n    for (let i = 0; i < 16; i++) state[i] = sbox[state[i]]\n  },\n\n  AddRoundKey(state: ByteArray, rkey: ByteArray) {\n    for (let i = 0; i < 16; i++) state[i] ^= rkey[i]\n  },\n\n  ShiftRows(state: ByteArray, shifttab: number[]) {\n    const h = new Array<number>().concat(state)\n    for (let i = 0; i < 16; i++) state[i] = h[shifttab[i]]\n  },\n\n  MixColumns(state: ByteArray) {\n    for (let i = 0; i < 16; i += 4) {\n      const s0 = state[i + 0],\n        s1 = state[i + 1]\n      const s2 = state[i + 2],\n        s3 = state[i + 3]\n      const h = s0 ^ s1 ^ s2 ^ s3\n      state[i + 0] ^= h ^ aes.xtime[s0 ^ s1]\n      state[i + 1] ^= h ^ aes.xtime[s1 ^ s2]\n      state[i + 2] ^= h ^ aes.xtime[s2 ^ s3]\n      state[i + 3] ^= h ^ aes.xtime[s3 ^ s0]\n    }\n  },\n\n  MixColumns_Inv(state: ByteArray) {\n    for (let i = 0; i < 16; i += 4) {\n      const s0 = state[i + 0],\n        s1 = state[i + 1]\n      const s2 = state[i + 2],\n        s3 = state[i + 3]\n      const h = s0 ^ s1 ^ s2 ^ s3\n      const xh = aes.xtime[h]\n      const h1 = aes.xtime[aes.xtime[xh ^ s0 ^ s2]] ^ h\n      const h2 = aes.xtime[aes.xtime[xh ^ s1 ^ s3]] ^ h\n      state[i + 0] ^= h1 ^ aes.xtime[s0 ^ s1]\n      state[i + 1] ^= h2 ^ aes.xtime[s1 ^ s2]\n      state[i + 2] ^= h1 ^ aes.xtime[s2 ^ s3]\n      state[i + 3] ^= h2 ^ aes.xtime[s3 ^ s0]\n    }\n  },\n}\n","// seedrandom.js version 2.0.\n// Author: David Bau 4/2/2011\n//\n// Defines a method math.seedrandom() that, when called, substitutes\n// an explicitly seeded RC4-based algorithm for math.random().  Also\n// supports automatic seeding from local or network sources of entropy.\n//\n// Usage:\n//\n//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\n//\n//   Math.seedrandom('yipee'); Sets math.random to a function that is\n//                             initialized using the given explicit seed.\n//\n//   Math.seedrandom();        Sets math.random to a function that is\n//                             seeded using the current time, dom state,\n//                             and other accumulated local entropy.\n//                             The generated seed string is returned.\n//\n//   Math.seedrandom('yowza', true);\n//                             Seeds using the given explicit seed mixed\n//                             together with accumulated entropy.\n//\n//   <script src=\"http://bit.ly/srandom-512\"></script>\n//                             Seeds using physical random bits downloaded\n//                             from random.org.\n//\n//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\n//   </script>                 Seeds using urandom bits from call.jsonlib.com,\n//                             which is faster than random.org.\n//\n// Examples:\n//\n//   math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\n//   document.write(math.random());       // Always 0.5463663768140734\n//   document.write(math.random());       // Always 0.43973793770592234\n//   let rng1 = math.random;              // Remember the current prng.\n//\n//   let autoseed = math.seedrandom();    // New prng with an automatic seed.\n//   document.write(math.random());       // Pretty much unpredictable.\n//\n//   math.random = rng1;                  // Continue \"hello\" prng sequence.\n//   document.write(math.random());       // Always 0.554769432473455\n//\n//   Math.seedrandom(autoseed);           // Restart at the previous seed.\n//   document.write(math.random());       // Repeat the 'unpredictable' value.\n//\n// Notes:\n//\n// Each time seedrandom('arg') is called, entropy from the passed seed\n// is accumulated in a pool to help generate future seeds for the\n// zero-argument form of Math.seedrandom, so entropy can be injected over\n// time by calling seedrandom with explicit data repeatedly.\n//\n// On speed - This javascript implementation of math.random() is about\n// 3-10x slower than the built-in Math.random() because it is not native\n// code, but this is typically fast enough anyway.  Seeding is more expensive,\n// especially if you use auto-seeding.  Some details (timings on Chrome 4):\n//\n// Our math.random()            - avg less than 0.002 milliseconds per call\n// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\n// seedrandom('explicit', true) - avg less than 2 milliseconds per call\n// seedrandom()                 - avg about 38 milliseconds per call\n//\n// LICENSE (BSD):\n//\n// Copyright 2010 David Bau, all rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//   1. Redistributions of source code must retain the above copyright\n//      notice, this list of conditions and the following disclaimer.\n//\n//   2. Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//   3. Neither the name of this module nor the names of its contributors may\n//      be used to endorse or promote products derived from this software\n//      without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n\nimport { ByteArray } from './type'\n\nconst pool: number[] = [] // pool: entropy pool starts empty\nconst width = 256 // width: each RC4 output is 0 <= x < 256\nconst chunks = 6 // chunks: at least six RC4 outputs for each double\n//\n// The following constants are related to IEEE 754 limits.\n//\nconst significance = Math.pow(2, 52) // significance: there are 52 significant digits in a double\nconst overflow = significance * 2\nconst startdenom = Math.pow(width, chunks)\n\nexport const math = {\n  //\n  // seedrandom()\n  // This is the seedrandom function described above.\n  //\n  seedrandom(seed: string, use_entropy = false): string {\n    const key: number[] = []\n\n    // Flatten the seed string or build one from local entropy if needed.\n    seed = mixkey(\n      flatten(\n        use_entropy\n          ? [seed, pool]\n          : arguments.length\n          ? seed\n          : [new Date().getTime(), pool],\n        3,\n      ),\n      key,\n    )\n\n    // Use the seed to initialize an ARC4 generator.\n    const arc4 = new ARC4(key)\n\n    // Mix the randomness into accumulated entropy.\n    mixkey(arc4.S, pool)\n\n    // Override math.random\n    // This function returns a random double in [0, 1) that contains\n    // randomness in every bit of the mantissa of the IEEE 754 value.\n    math.random = function (): number {\n      // Closure to return a random double:\n      let n = arc4.g(chunks) // Start with a numerator n < 2 ^ 48\n      let d = startdenom //   and denominator d = 2 ^ 48.\n      let x = 0 //   and no 'extra last byte'.\n      while (n < significance) {\n        // Fill up all significant digits by\n        n = (n + x) * width //   shifting numerator and\n        d *= width //   denominator and generating a\n        x = arc4.g(1) //   new least-significant-byte.\n      }\n      while (n >= overflow) {\n        // To avoid rounding up, before adding\n        n /= 2 //   last byte, shift everything\n        d /= 2 //   right using integer math until\n        x >>>= 1 //   we have exactly the desired bits.\n      }\n      return (n + x) / d // Form the number within [0, 1).\n    }\n\n    // Return the seed that was used\n    return seed\n  },\n\n  random: function (): number {\n    return Math.random()\n  },\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\n/** @constructor */\nclass ARC4 {\n  i = 0\n  j = 0\n  S: number[] = []\n  c: number[] = []\n\n  constructor(key: number[]) {\n    let t,\n      u,\n      keylen = key.length\n    let i = 0,\n      j = 0\n\n    // The empty key [] is treated as [0].\n    if (!keylen) {\n      key = [keylen++]\n    }\n\n    // Set up S using the standard key scheduling algorithm.\n    while (i < width) {\n      this.S[i] = i++\n    }\n    for (i = 0; i < width; i++) {\n      t = this.S[i]\n      j = lowbits(j + t + key[i % keylen])\n      u = this.S[j]\n      this.S[i] = u\n      this.S[j] = t\n    }\n\n    // For robust unpredictability discard an initial batch of values.\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\n    this.g(width)\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  g(count: number): number {\n    const s = this.S\n    let i = lowbits(this.i + 1)\n    let t = s[i]\n    let j = lowbits(this.j + t)\n    let u = s[j]\n    s[i] = u\n    s[j] = t\n    let r = s[lowbits(t + u)]\n    while (--count) {\n      i = lowbits(i + 1)\n      t = s[i]\n      j = lowbits(j + t)\n      u = s[j]\n      s[i] = u\n      s[j] = t\n      r = r * width + s[lowbits(t + u)]\n    }\n    this.i = i\n    this.j = j\n    return r\n  }\n}\n\ntype NestedStrArray = (string | NestedStrArray)[]\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\n/** @param {Object=} result\n * @param {string=} prop\n * @param {string=} typ */\nfunction flatten(obj: unknown, depth: number): NestedStrArray | string {\n  const result: NestedStrArray = []\n  const typ = typeof obj\n  if (depth && typ === 'object') {\n    for (const prop in obj as Record<string, unknown>) {\n      if (prop.indexOf('S') < 5) {\n        // Avoid FF3 bug (local/sessionStorage)\n        try {\n          result.push(\n            flatten((obj as Record<string, unknown>)[prop], depth - 1),\n          )\n        } catch (e) {\n          console.error(e)\n        }\n      }\n    }\n  }\n  return result.length ? result : obj + (typ !== 'string' ? '\\0' : '')\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\n/** @param {number=} smear\n * @param {number=} j */\nfunction mixkey(seed: unknown, key: number[]): string {\n  const seedStr = seed + '' // Ensure the seed is a string\n  let smear = 0\n  for (let i = 0; i < seedStr.length; i++) {\n    key[lowbits(i)] = lowbits(\n      (smear ^= key[lowbits(i)] * 19) + seedStr.charCodeAt(i),\n    )\n  }\n  let mixed = ''\n  key.forEach((v) => (mixed += String.fromCharCode(v)))\n  return mixed\n}\n\n//\n// lowbits()\n// A quick \"n mod width\" for width a power of 2.\n//\nfunction lowbits(n: number): number {\n  return n & (width - 1)\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to intefere with determinstic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(Math.random(), pool)\n\n// This is not really a random number generator object, and two SeededRandom\n// objects will conflict with one another, but it's good enough for generating\n// the rsa key.\nexport class SeededRandom {\n  nextBytes(ba: number[]): void {\n    for (let i = 0; i < ba.length; i++) {\n      ba[i] = Math.floor(math.random() * 256)\n    }\n  }\n}\n\n// prng4.js - uses Arcfour as a PRNG\nclass Arcfour {\n  i = 0\n  j = 0\n  S: number[] = []\n\n  // Initialize arcfour context from key, an array of ints, each from [0..255]\n  init(key: number[]): void {\n    let i, j, t\n    for (i = 0; i < 256; ++i) this.S[i] = i\n    j = 0\n    for (i = 0; i < 256; ++i) {\n      j = (j + this.S[i] + key[i % key.length]) & 255\n      t = this.S[i]\n      this.S[i] = this.S[j]\n      this.S[j] = t\n    }\n    this.i = 0\n    this.j = 0\n  }\n\n  next(): number {\n    this.i = (this.i + 1) & 255\n    this.j = (this.j + this.S[this.i]) & 255\n    const t = this.S[this.i]\n    this.S[this.i] = this.S[this.j]\n    this.S[this.j] = t\n    return this.S[(t + this.S[this.i]) & 255]\n  }\n}\n\n// Plug in your RNG constructor here\nfunction prng_newstate(): Arcfour {\n  return new Arcfour()\n}\n\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nconst rng_psize = 256\n\n// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nlet rng_state: Arcfour\nlet rng_pool: number[] = []\nlet rng_pptr: number\n\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x: number): void {\n  rng_pool[rng_pptr++] ^= x & 255\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255\n  if (rng_pptr >= rng_psize) rng_pptr -= rng_psize\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time(): void {\n  rng_seed_int(new Date().getTime())\n}\n\n// Initialize the pool with junk if needed.\nif (!rng_pool) {\n  rng_pool = []\n  rng_pptr = 0\n  let t\n  while (rng_pptr < rng_psize) {\n    // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random())\n    rng_pool[rng_pptr++] = t >>> 8\n    rng_pool[rng_pptr++] = t & 255\n  }\n  rng_pptr = 0\n  rng_seed_time()\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte(): number {\n  if (!rng_state) {\n    rng_seed_time()\n    rng_state = prng_newstate()\n    rng_state.init(rng_pool)\n    for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0\n    rng_pptr = 0\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next()\n}\n\nexport class SecureRandom {\n  nextBytes(ba: ByteArray): void {\n    let i\n    for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte()\n  }\n}\n","// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Basic JavaScript BN library - subset useful for RSA encryption.\n\n// (public) Constructor\n\nimport { math, SeededRandom } from './random'\nimport { ByteArray } from './type'\n\nexport type Op = (x: number, y: number) => number\nexport const op_and: Op = (x, y) => x & y\nexport const op_or: Op = (x, y) => x | y\nexport const op_xor: Op = (x, y) => x ^ y\nexport const op_andnot: Op = (x, y) => x & ~y\n\nconst dbits = 30\nconst BI_FP = 52\n\nexport class BigInteger {\n  static DB = dbits\n  static DM = (1 << dbits) - 1\n  static DV = 1 << dbits\n  static FV = Math.pow(2, BI_FP)\n  static F1 = BI_FP - dbits\n  static F2 = 2 * dbits - BI_FP\n  // \"constants\"\n  static ZERO = new BigInteger(0)\n  static ONE = new BigInteger(1)\n\n  // FIXME: ;\n  s = 0\n  t = 0;\n  [k: number]: number\n\n  constructor(\n    a?: number | string | number[],\n    b?: number | SeededRandom,\n    c?: number | SeededRandom,\n  ) {\n    if (a) {\n      if ('number' === typeof a) {\n        if (b) {\n          this.fromNumber(a, b, c as number)\n        } else {\n          // return bigint initialized to value\n          this.fromInt(a)\n        }\n      } else {\n        this.fromString(a, (b as number) || 256)\n      }\n    }\n  }\n\n  // am avoids a big mult-and-extract completely.\n  // Max digit bits should be <= 30 because we do bitwise ops\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n  am(\n    i: number,\n    x: number,\n    w: BigInteger,\n    j: number,\n    c: number,\n    n: number,\n  ): number {\n    const xl = x & 0x7fff,\n      xh = x >> 15\n    while (--n >= 0) {\n      let l = this[i] & 0x7fff\n      const h = this[i++] >> 15\n      const m = xh * l + h * xl\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)\n      w[j++] = l & 0x3fffffff\n    }\n    return c\n  }\n\n  // copy this to r\n  copyTo(r: BigInteger): void {\n    for (let i = this.t - 1; i >= 0; --i) r[i] = this[i]\n    r.t = this.t\n    r.s = this.s\n  }\n\n  // set from integer value x, -DV <= x < DV\n  fromInt(x: number): void {\n    this.t = 1\n    this.s = x < 0 ? -1 : 0\n    if (x > 0) this[0] = x\n    else if (x < -1) this[0] = x + BigInteger.DV\n    else this.t = 0\n  }\n\n  // set from string and radix\n  fromString(s: string | number[], b: number): void {\n    let k\n    if (b === 16) k = 4\n    else if (b === 8) k = 3\n    else if (b === 256) k = 8\n    // byte array\n    else if (b === 2) k = 1\n    else if (b === 32) k = 5\n    else if (b === 4) k = 2\n    else {\n      this.fromRadix(s as string, b)\n      return\n    }\n    this.t = 0\n    this.s = 0\n    let i = s.length,\n      mi = false,\n      sh = 0\n    while (--i >= 0) {\n      const x = k === 8 ? (s[i] as number & 0xff) : intAt(s as string, i)\n      if (x < 0) {\n        if ((s as string).charAt(i) === '-') mi = true\n        continue\n      }\n      mi = false\n      if (sh === 0) this[this.t++] = x\n      else if (sh + k > BigInteger.DB) {\n        this[this.t - 1] |= (x & ((1 << (BigInteger.DB - sh)) - 1)) << sh\n        this[this.t++] = x >> (BigInteger.DB - sh)\n      } else this[this.t - 1] |= x << sh\n      sh += k\n      if (sh >= BigInteger.DB) sh -= BigInteger.DB\n    }\n    if (k === 8 && ((s[0] as number) & 0x80) !== 0) {\n      this.s = -1\n      if (sh > 0) this[this.t - 1] |= ((1 << (BigInteger.DB - sh)) - 1) << sh\n    }\n    this.clamp()\n    if (mi) BigInteger.ZERO.subTo(this, this)\n  }\n\n  // clamp off excess high words\n  clamp(): void {\n    const c = this.s & BigInteger.DM\n    while (this.t > 0 && this[this.t - 1] === c) --this.t\n  }\n\n  // return string representation in given radix (default to 16)\n  toString(b = 16): string {\n    if (this.s < 0) return '-' + this.negate().toString(b)\n    let k\n    if (b === 16) k = 4\n    else if (b === 8) k = 3\n    else if (b === 2) k = 1\n    else if (b === 32) k = 5\n    else if (b === 64) k = 6\n    else if (b === 4) k = 2\n    else return this.toRadix(b)\n    const km = (1 << k) - 1\n    let d,\n      m = false,\n      r = '',\n      i = this.t\n    let p = BigInteger.DB - ((i * BigInteger.DB) % k)\n    if (i-- > 0) {\n      if (p < BigInteger.DB && (d = this[i] >> p) > 0) {\n        m = true\n        r = int2char(d)\n      }\n      while (i >= 0) {\n        if (p < k) {\n          d = (this[i] & ((1 << p) - 1)) << (k - p)\n          d |= this[--i] >> (p += BigInteger.DB - k)\n        } else {\n          d = (this[i] >> (p -= k)) & km\n          if (p <= 0) {\n            p += BigInteger.DB\n            --i\n          }\n        }\n        if (d > 0) m = true\n        if (m) r += int2char(d)\n      }\n    }\n    return m ? r : '0'\n  }\n\n  // -this\n  negate(): BigInteger {\n    const r = new BigInteger()\n    BigInteger.ZERO.subTo(this, r)\n    return r\n  }\n\n  // |this|\n  abs(): BigInteger {\n    return this.s < 0 ? this.negate() : this\n  }\n\n  // return + if this > a, - if this < a, 0 if equal\n  compareTo(a: BigInteger): number {\n    let r = this.s - a.s\n    if (r !== 0) return r\n    let i = this.t\n    r = i - a.t\n    if (r !== 0) return r\n    while (--i >= 0) if ((r = this[i] - a[i]) !== 0) return r\n    return 0\n  }\n\n  // return the number of bits in \"this\"\n  bitLength(): number {\n    if (this.t <= 0) return 0\n    return (\n      BigInteger.DB * (this.t - 1) +\n      nbits(this[this.t - 1] ^ (this.s & BigInteger.DM))\n    )\n  }\n\n  // r = this << n*DB\n  dlShiftTo(n: number, r: BigInteger): void {\n    let i\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]\n    for (i = n - 1; i >= 0; --i) r[i] = 0\n    r.t = this.t + n\n    r.s = this.s\n  }\n\n  // r = this >> n*DB\n  drShiftTo(n: number, r: BigInteger): void {\n    for (let i = n; i < this.t; ++i) r[i - n] = this[i]\n    r.t = Math.max(this.t - n, 0)\n    r.s = this.s\n  }\n\n  // r = this << n\n  lShiftTo(n: number, r: BigInteger): void {\n    const bs = n % BigInteger.DB\n    const cbs = BigInteger.DB - bs\n    const bm = (1 << cbs) - 1\n    const ds = Math.floor(n / BigInteger.DB)\n    let c = (this.s << bs) & BigInteger.DM,\n      i\n    for (i = this.t - 1; i >= 0; --i) {\n      r[i + ds + 1] = (this[i] >> cbs) | c\n      c = (this[i] & bm) << bs\n    }\n    for (i = ds - 1; i >= 0; --i) r[i] = 0\n    r[ds] = c\n    r.t = this.t + ds + 1\n    r.s = this.s\n    r.clamp()\n  }\n\n  // r = this >> n\n  rShiftTo(n: number, r: BigInteger): void {\n    r.s = this.s\n    const ds = Math.floor(n / BigInteger.DB)\n    if (ds >= this.t) {\n      r.t = 0\n      return\n    }\n    const bs = n % BigInteger.DB\n    const cbs = BigInteger.DB - bs\n    const bm = (1 << bs) - 1\n    r[0] = this[ds] >> bs\n    for (let i = ds + 1; i < this.t; ++i) {\n      r[i - ds - 1] |= (this[i] & bm) << cbs\n      r[i - ds] = this[i] >> bs\n    }\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs\n    r.t = this.t - ds\n    r.clamp()\n  }\n\n  // r = this - a\n  subTo(a: BigInteger, r: BigInteger): void {\n    const m = Math.min(a.t, this.t)\n    let i = 0,\n      c = 0\n    while (i < m) {\n      c += this[i] - a[i]\n      r[i++] = c & BigInteger.DM\n      c >>= BigInteger.DB\n    }\n    if (a.t < this.t) {\n      c -= a.s\n      while (i < this.t) {\n        c += this[i]\n        r[i++] = c & BigInteger.DM\n        c >>= BigInteger.DB\n      }\n      c += this.s\n    } else {\n      c += this.s\n      while (i < a.t) {\n        c -= a[i]\n        r[i++] = c & BigInteger.DM\n        c >>= BigInteger.DB\n      }\n      c -= a.s\n    }\n    r.s = c < 0 ? -1 : 0\n    if (c < -1) r[i++] = BigInteger.DV + c\n    else if (c > 0) r[i++] = c\n    r.t = i\n    r.clamp()\n  }\n\n  // r = this * a, r !== this,a (HAC 14.12)\n  // \"this\" should be the larger one if appropriate.\n  multiplyTo(a: BigInteger, r: BigInteger): void {\n    const x = this.abs(),\n      y = a.abs()\n    let i = x.t\n    r.t = i + y.t\n    while (--i >= 0) r[i] = 0\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)\n    r.s = 0\n    r.clamp()\n    if (this.s !== a.s) BigInteger.ZERO.subTo(r, r)\n  }\n\n  // r = this^2, r !== this (HAC 14.16)\n  squareTo(r: BigInteger): void {\n    const x = this.abs()\n    let i = (r.t = 2 * x.t)\n    while (--i >= 0) r[i] = 0\n    for (i = 0; i < x.t - 1; ++i) {\n      const c = x.am(i, x[i], r, 2 * i, 0, 1)\n      if (\n        (r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >=\n        BigInteger.DV\n      ) {\n        r[i + x.t] -= BigInteger.DV\n        r[i + x.t + 1] = 1\n      }\n    }\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)\n    r.s = 0\n    r.clamp()\n  }\n\n  // divide this by m, quotient and remainder to q, r (HAC 14.20)\n  // r !== q, this !== m.  q or r may be null.\n  divRemTo(m: BigInteger, q?: BigInteger, r?: BigInteger): void {\n    const pm = m.abs()\n    if (pm.t <= 0) return\n    const pt = this.abs()\n    if (pt.t < pm.t) {\n      if (q) q.fromInt(0)\n      if (r) this.copyTo(r)\n      return\n    }\n    if (!r) r = new BigInteger()\n    const y = new BigInteger(),\n      ts = this.s,\n      ms = m.s\n    const nsh = BigInteger.DB - nbits(pm[pm.t - 1]) // normalize modulus\n    if (nsh > 0) {\n      pm.lShiftTo(nsh, y)\n      pt.lShiftTo(nsh, r)\n    } else {\n      pm.copyTo(y)\n      pt.copyTo(r)\n    }\n    const ys = y.t\n    const y0 = y[ys - 1]\n    if (y0 === 0) return\n    const yt =\n      y0 * (1 << BigInteger.F1) + (ys > 1 ? y[ys - 2] >> BigInteger.F2 : 0)\n    const d1 = BigInteger.FV / yt,\n      d2 = (1 << BigInteger.F1) / yt,\n      e = 1 << BigInteger.F2,\n      t = q || new BigInteger()\n    let i = r.t,\n      j = i - ys\n    y.dlShiftTo(j, t)\n    if (r.compareTo(t) >= 0) {\n      r[r.t++] = 1\n      r.subTo(t, r)\n    }\n    BigInteger.ONE.dlShiftTo(ys, t)\n    t.subTo(y, y) // \"negative\" y so we can replace sub with am later\n    while (y.t < ys) y[y.t++] = 0\n    while (--j >= 0) {\n      // Estimate quotient digit\n      let qd =\n        r[--i] === y0\n          ? BigInteger.DM\n          : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)\n      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n        // Try it out\n        y.dlShiftTo(j, t)\n        r.subTo(t, r)\n        while (r[i] < --qd) r.subTo(t, r)\n      }\n    }\n    if (q) {\n      r.drShiftTo(ys, q)\n      if (ts !== ms) BigInteger.ZERO.subTo(q, q)\n    }\n    r.t = ys\n    r.clamp()\n    if (nsh > 0) r.rShiftTo(nsh, r) // Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r)\n  }\n\n  // this mod a\n  mod(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.abs().divRemTo(a, undefined, r)\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)\n    return r\n  }\n\n  // return \"-1/this % 2^DB\"; useful for Mont. reduction\n  // justification:\n  //         xy === 1 (mod m)\n  //         xy =  1+km\n  //   xy(2-xy) = (1+km)(1-km)\n  // x[y(2-xy)] = 1-k^2m^2\n  // x[y(2-xy)] === 1 (mod m^2)\n  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n  invDigit(): number {\n    if (this.t < 1) return 0\n    const x = this[0]\n    if ((x & 1) === 0) return 0\n    let y = x & 3 // y === 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf // y === 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff // y === 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff // y === 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - ((x * y) % BigInteger.DV))) % BigInteger.DV // y === 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return y > 0 ? BigInteger.DV - y : -y\n  }\n\n  // true iff this is even\n  isEven(): boolean {\n    return (this.t > 0 ? this[0] & 1 : this.s) === 0\n  }\n\n  // this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n  exp(e: number, z: Reducer): BigInteger {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE\n    const g = z.convert(this)\n    let r = new BigInteger(),\n      r2 = new BigInteger(),\n      i = nbits(e) - 1\n    g.copyTo(r)\n    while (--i >= 0) {\n      z.sqrTo(r, r2)\n      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)\n      else {\n        const t = r\n        r = r2\n        r2 = t\n      }\n    }\n    return z.revert(r)\n  }\n\n  // this^e % m, 0 <= e < 2^32\n  modPowInt(e: number, m: BigInteger): BigInteger {\n    let z\n    if (e < 256 || m.isEven()) z = new Classic(m)\n    else z = new Montgomery(m)\n    return this.exp(e, z)\n  }\n\n  clone(): BigInteger {\n    const r = new BigInteger()\n    this.copyTo(r)\n    return r\n  }\n\n  // return value as integer\n  intValue(): number {\n    if (this.s < 0) {\n      if (this.t === 1) return this[0] - BigInteger.DV\n      else if (this.t === 0) return -1\n    } else if (this.t === 1) return this[0]\n    else if (this.t === 0) return 0\n    // assumes 16 < DB < 32\n    return (\n      ((this[1] & ((1 << (32 - BigInteger.DB)) - 1)) << BigInteger.DB) | this[0]\n    )\n  }\n\n  // return value as byte\n  byteValue(): number {\n    return this.t === 0 ? this.s : (this[0] << 24) >> 24\n  }\n\n  // return value as short (assumes DB>=16)\n  shortValue(): number {\n    return this.t === 0 ? this.s : (this[0] << 16) >> 16\n  }\n\n  // return x s.t. r^x < DV\n  chunkSize(r: number): number {\n    return Math.floor((Math.LN2 * BigInteger.DB) / Math.log(r))\n  }\n\n  // 0 if this === 0, 1 if this > 0, -1 if this < 0\n  signum(): -1 | 0 | 1 {\n    if (this.s < 0) return -1\n    else if (this.t <= 0 || (this.t === 1 && this[0] <= 0)) return 0\n    else return 1\n  }\n\n  // convert to radix string\n  toRadix(b: number): string {\n    if (!b) b = 10\n    if (this.signum() === 0 || b < 2 || b > 36) return '0'\n    const cs = this.chunkSize(b)\n    const a = Math.pow(b, cs)\n    const d = new BigInteger(a),\n      y = new BigInteger(),\n      z = new BigInteger()\n    let r = ''\n    this.divRemTo(d, y, z)\n    while (y.signum() > 0) {\n      r = (a + z.intValue()).toString(b).substr(1) + r\n      y.divRemTo(d, y, z)\n    }\n    return z.intValue().toString(b) + r\n  }\n\n  // convert from radix string\n  fromRadix(s: string, b: number): void {\n    this.fromInt(0)\n    if (!b) b = 10\n    const cs = this.chunkSize(b)\n    const d = Math.pow(b, cs)\n    let mi = false,\n      j = 0,\n      w = 0\n    for (let i = 0; i < s.length; ++i) {\n      const x = intAt(s, i)\n      if (x < 0) {\n        if (s.charAt(i) === '-' && this.signum() === 0) mi = true\n        continue\n      }\n      w = b * w + x\n      if (++j >= cs) {\n        this.dMultiply(d)\n        this.dAddOffset(w, 0)\n        j = 0\n        w = 0\n      }\n    }\n    if (j > 0) {\n      this.dMultiply(Math.pow(b, j))\n      this.dAddOffset(w, 0)\n    }\n    if (mi) BigInteger.ZERO.subTo(this, this)\n  }\n\n  // alternate constructor\n  fromNumber(a: number, b: number | SeededRandom, c?: number): void {\n    if ('number' === typeof b) {\n      // new BigInteger(int,int,RNG)\n      if (a < 2) this.fromInt(1)\n      else {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.fromNumber(a, c!)\n        if (!this.testBit(a - 1))\n          // force MSB set\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this)\n        if (this.isEven()) this.dAddOffset(1, 0) // force odd\n        while (!this.isProbablePrime(b)) {\n          this.dAddOffset(2, 0)\n          if (this.bitLength() > a)\n            this.subTo(BigInteger.ONE.shiftLeft(a - 1), this)\n        }\n      }\n    } else {\n      // new BigInteger(int,RNG)\n      const x: number[] = [],\n        t = a & 7\n      x.length = (a >> 3) + 1\n      b.nextBytes(x)\n      if (t > 0) x[0] &= (1 << t) - 1\n      else x[0] = 0\n      this.fromString(x, 256)\n    }\n  }\n\n  // convert to bigendian byte array\n  toByteArray(): ByteArray {\n    const r = []\n    let i = this.t\n    r[0] = this.s\n    let p = BigInteger.DB - ((i * BigInteger.DB) % 8),\n      d,\n      k = 0\n    if (i-- > 0) {\n      if (\n        p < BigInteger.DB &&\n        (d = this[i] >> p) !== (this.s & BigInteger.DM) >> p\n      )\n        r[k++] = d | (this.s << (BigInteger.DB - p))\n      while (i >= 0) {\n        if (p < 8) {\n          d = (this[i] & ((1 << p) - 1)) << (8 - p)\n          d |= this[--i] >> (p += BigInteger.DB - 8)\n        } else {\n          d = (this[i] >> (p -= 8)) & 0xff\n          if (p <= 0) {\n            p += BigInteger.DB\n            --i\n          }\n        }\n        if ((d & 0x80) !== 0) d |= -256\n        if (k === 0 && (this.s & 0x80) !== (d & 0x80)) ++k\n        if (k > 0 || d !== this.s) r[k++] = d\n      }\n    }\n    return r\n  }\n\n  equals(a: BigInteger): boolean {\n    return this.compareTo(a) === 0\n  }\n\n  min(a: BigInteger): BigInteger {\n    return this.compareTo(a) < 0 ? this : a\n  }\n\n  max(a: BigInteger): BigInteger {\n    return this.compareTo(a) > 0 ? this : a\n  }\n\n  // r = this op a (bitwise)\n  bitwiseTo(a: BigInteger, op: Op, r: BigInteger): void {\n    const m = Math.min(a.t, this.t)\n    let f\n    for (let i = 0; i < m; ++i) r[i] = op(this[i], a[i])\n    if (a.t < this.t) {\n      f = a.s & BigInteger.DM\n      for (let i = m; i < this.t; ++i) r[i] = op(this[i], f)\n      r.t = this.t\n    } else {\n      f = this.s & BigInteger.DM\n      for (let i = m; i < a.t; ++i) r[i] = op(f, a[i])\n      r.t = a.t\n    }\n    r.s = op(this.s, a.s)\n    r.clamp()\n  }\n\n  // this & a\n  and(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.bitwiseTo(a, op_and, r)\n    return r\n  }\n\n  // this | a\n  or(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.bitwiseTo(a, op_or, r)\n    return r\n  }\n\n  // this ^ a\n  xor(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.bitwiseTo(a, op_xor, r)\n    return r\n  }\n\n  // this & ~a\n  andNot(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.bitwiseTo(a, op_andnot, r)\n    return r\n  }\n\n  // ~this\n  not(): BigInteger {\n    const r = new BigInteger()\n    for (let i = 0; i < this.t; ++i) r[i] = BigInteger.DM & ~this[i]\n    r.t = this.t\n    r.s = ~this.s\n    return r\n  }\n\n  // this << n\n  shiftLeft(n: number): BigInteger {\n    const r = new BigInteger()\n    if (n < 0) this.rShiftTo(-n, r)\n    else this.lShiftTo(n, r)\n    return r\n  }\n\n  // this >> n\n  shiftRight(n: number): BigInteger {\n    const r = new BigInteger()\n    if (n < 0) this.lShiftTo(-n, r)\n    else this.rShiftTo(n, r)\n    return r\n  }\n\n  // returns index of lowest 1-bit (or -1 if none)\n  getLowestSetBit(): number {\n    for (let i = 0; i < this.t; ++i)\n      if (this[i] !== 0) return i * BigInteger.DB + lbit(this[i])\n    if (this.s < 0) return this.t * BigInteger.DB\n    return -1\n  }\n\n  // return number of set bits\n  bitCount(): number {\n    const x = this.s & BigInteger.DM\n    let r = 0\n    for (let i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)\n    return r\n  }\n\n  // true iff nth bit is set\n  testBit(n: number): boolean {\n    const j = Math.floor(n / BigInteger.DB)\n    if (j >= this.t) return this.s !== 0\n    return (this[j] & (1 << n % BigInteger.DB)) !== 0\n  }\n\n  // this op (1<<n)\n  changeBit(n: number, op: Op): BigInteger {\n    const r = BigInteger.ONE.shiftLeft(n)\n    this.bitwiseTo(r, op, r)\n    return r\n  }\n\n  // this | (1<<n)\n  setBit(n: number): BigInteger {\n    return this.changeBit(n, op_or)\n  }\n\n  // this & ~(1<<n)\n  clearBit(n: number): BigInteger {\n    return this.changeBit(n, op_andnot)\n  }\n\n  // this ^ (1<<n)\n  flipBit(n: number): BigInteger {\n    return this.changeBit(n, op_xor)\n  }\n\n  // r = this + a\n  addTo(a: BigInteger, r: BigInteger): void {\n    const m = Math.min(a.t, this.t)\n    let i = 0,\n      c = 0\n    while (i < m) {\n      c += this[i] + a[i]\n      r[i++] = c & BigInteger.DM\n      c >>= BigInteger.DB\n    }\n    if (a.t < this.t) {\n      c += a.s\n      while (i < this.t) {\n        c += this[i]\n        r[i++] = c & BigInteger.DM\n        c >>= BigInteger.DB\n      }\n      c += this.s\n    } else {\n      c += this.s\n      while (i < a.t) {\n        c += a[i]\n        r[i++] = c & BigInteger.DM\n        c >>= BigInteger.DB\n      }\n      c += a.s\n    }\n    r.s = c < 0 ? -1 : 0\n    if (c > 0) r[i++] = c\n    else if (c < -1) r[i++] = BigInteger.DV + c\n    r.t = i\n    r.clamp()\n  }\n\n  // this + a\n  add(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.addTo(a, r)\n    return r\n  }\n\n  // this - a\n  subtract(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.subTo(a, r)\n    return r\n  }\n\n  // this * a\n  multiply(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.multiplyTo(a, r)\n    return r\n  }\n\n  // JSBN-specific extension\n  // this^2\n  square(): BigInteger {\n    const r = new BigInteger()\n    this.squareTo(r)\n    return r\n  }\n\n  // this / a\n  divide(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.divRemTo(a, r, undefined)\n    return r\n  }\n\n  // this % a\n  remainder(a: BigInteger): BigInteger {\n    const r = new BigInteger()\n    this.divRemTo(a, undefined, r)\n    return r\n  }\n\n  // [this/a,this%a]\n  divideAndRemainder(a: BigInteger): [BigInteger, BigInteger] {\n    const q = new BigInteger(),\n      r = new BigInteger()\n    this.divRemTo(a, q, r)\n    return [q, r]\n  }\n\n  // this *= n, this >= 0, 1 < n < DV\n  protected dMultiply(n: number): void {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)\n    ++this.t\n    this.clamp()\n  }\n\n  // this += n << w words, this >= 0\n  dAddOffset(n: number, w: number): void {\n    if (n === 0) return\n    while (this.t <= w) this[this.t++] = 0\n    this[w] += n\n    while (this[w] >= BigInteger.DV) {\n      this[w] -= BigInteger.DV\n      if (++w >= this.t) this[this.t++] = 0\n      ++this[w]\n    }\n  }\n\n  // this^e\n  pow(e: number): BigInteger {\n    return this.exp(e, new NullExp())\n  }\n\n  // r = lower n words of \"this * a\", a.t <= n\n  // \"this\" should be the larger one if appropriate.\n  multiplyLowerTo(a: BigInteger, n: number, r: BigInteger): void {\n    let i = Math.min(this.t + a.t, n)\n    r.s = 0 // assumes a,this >= 0\n    r.t = i\n    while (i > 0) r[--i] = 0\n    let j\n    for (j = r.t - this.t; i < j; ++i)\n      r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)\n    r.clamp()\n  }\n\n  // r = \"this * a\" without lower n words, n > 0\n  // \"this\" should be the larger one if appropriate.\n  multiplyUpperTo(a: BigInteger, n: number, r: BigInteger): void {\n    --n\n    let i = (r.t = this.t + a.t - n)\n    r.s = 0 // assumes a,this >= 0\n    while (--i >= 0) r[i] = 0\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)\n    r.clamp()\n    r.drShiftTo(1, r)\n  }\n\n  // this^e % m (HAC 14.85)\n  modPow(e: BigInteger, m: BigInteger): BigInteger {\n    let i = e.bitLength(),\n      k,\n      r = new BigInteger(1),\n      z\n    if (i <= 0) return r\n    else if (i < 18) k = 1\n    else if (i < 48) k = 3\n    else if (i < 144) k = 4\n    else if (i < 768) k = 5\n    else k = 6\n    if (i < 8) z = new Classic(m)\n    else if (m.isEven()) z = new Barrett(m)\n    else z = new Montgomery(m)\n\n    // precomputation\n    const g: BigInteger[] = [],\n      k1 = k - 1,\n      km = (1 << k) - 1\n    let n = 3\n    g[1] = z.convert(this)\n    if (k > 1) {\n      const g2 = new BigInteger()\n      z.sqrTo(g[1], g2)\n      while (n <= km) {\n        g[n] = new BigInteger()\n        z.mulTo(g2, g[n - 2], g[n])\n        n += 2\n      }\n    }\n\n    let j = e.t - 1,\n      w,\n      is1 = true,\n      r2 = new BigInteger(),\n      t\n    i = nbits(e[j]) - 1\n    while (j >= 0) {\n      if (i >= k1) w = (e[j] >> (i - k1)) & km\n      else {\n        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)\n        if (j > 0) w |= e[j - 1] >> (BigInteger.DB + i - k1)\n      }\n\n      n = k\n      while ((w & 1) === 0) {\n        w >>= 1\n        --n\n      }\n      if ((i -= n) < 0) {\n        i += BigInteger.DB\n        --j\n      }\n      if (is1) {\n        // ret === 1, don't bother squaring or multiplying it\n        g[w].copyTo(r)\n        is1 = false\n      } else {\n        while (n > 1) {\n          z.sqrTo(r, r2)\n          z.sqrTo(r2, r)\n          n -= 2\n        }\n        if (n > 0) z.sqrTo(r, r2)\n        else {\n          t = r\n          r = r2\n          r2 = t\n        }\n        z.mulTo(r2, g[w], r)\n      }\n\n      while (j >= 0 && (e[j] & (1 << i)) === 0) {\n        z.sqrTo(r, r2)\n        t = r\n        r = r2\n        r2 = t\n        if (--i < 0) {\n          i = BigInteger.DB - 1\n          --j\n        }\n      }\n    }\n    return z.revert(r)\n  }\n\n  // gcd(this,a) (HAC 14.54)\n  gcd(a: BigInteger): BigInteger {\n    let x = this.s < 0 ? this.negate() : this.clone()\n    let y = a.s < 0 ? a.negate() : a.clone()\n    if (x.compareTo(y) < 0) {\n      const t = x\n      x = y\n      y = t\n    }\n    let i = x.getLowestSetBit(),\n      g = y.getLowestSetBit()\n    if (g < 0) return x\n    if (i < g) g = i\n    if (g > 0) {\n      x.rShiftTo(g, x)\n      y.rShiftTo(g, y)\n    }\n    while (x.signum() > 0) {\n      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)\n      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)\n      if (x.compareTo(y) >= 0) {\n        x.subTo(y, x)\n        x.rShiftTo(1, x)\n      } else {\n        y.subTo(x, y)\n        y.rShiftTo(1, y)\n      }\n    }\n    if (g > 0) y.lShiftTo(g, y)\n    return y\n  }\n\n  // this % n, n < 2^26\n  modInt(n: number): number {\n    if (n <= 0) return 0\n    const d = BigInteger.DV % n\n    let r = this.s < 0 ? n - 1 : 0\n    if (this.t > 0)\n      if (d === 0) r = this[0] % n\n      else for (let i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n\n    return r\n  }\n\n  // 1/this % m (HAC 14.61)\n  modInverse(m: BigInteger): BigInteger {\n    const ac = m.isEven()\n    if ((this.isEven() && ac) || m.signum() === 0) return BigInteger.ZERO\n    const u = m.clone(),\n      v = this.clone()\n    const a = new BigInteger(1),\n      b = new BigInteger(0),\n      c = new BigInteger(0),\n      d = new BigInteger(1)\n    while (u.signum() !== 0) {\n      while (u.isEven()) {\n        u.rShiftTo(1, u)\n        if (ac) {\n          if (!a.isEven() || !b.isEven()) {\n            a.addTo(this, a)\n            b.subTo(m, b)\n          }\n          a.rShiftTo(1, a)\n        } else if (!b.isEven()) b.subTo(m, b)\n        b.rShiftTo(1, b)\n      }\n      while (v.isEven()) {\n        v.rShiftTo(1, v)\n        if (ac) {\n          if (!c.isEven() || !d.isEven()) {\n            c.addTo(this, c)\n            d.subTo(m, d)\n          }\n          c.rShiftTo(1, c)\n        } else if (!d.isEven()) d.subTo(m, d)\n        d.rShiftTo(1, d)\n      }\n      if (u.compareTo(v) >= 0) {\n        u.subTo(v, u)\n        if (ac) a.subTo(c, a)\n        b.subTo(d, b)\n      } else {\n        v.subTo(u, v)\n        if (ac) c.subTo(a, c)\n        d.subTo(b, d)\n      }\n    }\n    if (v.compareTo(BigInteger.ONE) !== 0) return BigInteger.ZERO\n    if (d.compareTo(m) >= 0) return d.subtract(m)\n    if (d.signum() < 0) d.addTo(m, d)\n    else return d\n    if (d.signum() < 0) return d.add(m)\n    else return d\n  }\n\n  static lowprimes = [\n    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n    73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\n    157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\n    239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\n    331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\n    421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\n    509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n    613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n    709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\n    821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\n    919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997,\n  ]\n  static lplim =\n    (1 << 26) / BigInteger.lowprimes[BigInteger.lowprimes.length - 1]\n\n  // test primality with certainty >= 1-.5^t\n  isProbablePrime(t: number): boolean {\n    const x = this.abs()\n    let i\n    if (\n      x.t === 1 &&\n      x[0] <= BigInteger.lowprimes[BigInteger.lowprimes.length - 1]\n    ) {\n      for (i = 0; i < BigInteger.lowprimes.length; ++i)\n        if (x[0] === BigInteger.lowprimes[i]) return true\n      return false\n    }\n    if (x.isEven()) return false\n    i = 1\n    while (i < BigInteger.lowprimes.length) {\n      let m = BigInteger.lowprimes[i],\n        j = i + 1\n      while (j < BigInteger.lowprimes.length && m < BigInteger.lplim)\n        m *= BigInteger.lowprimes[j++]\n      m = x.modInt(m)\n      while (i < j) if (m % BigInteger.lowprimes[i++] === 0) return false\n    }\n    return x.millerRabin(t)\n  }\n\n  // true if probably prime (HAC 4.24, Miller-Rabin)\n  millerRabin(t: number): boolean {\n    const n1 = this.subtract(BigInteger.ONE)\n    const k = n1.getLowestSetBit()\n    if (k <= 0) return false\n    const r = n1.shiftRight(k)\n    t = (t + 1) >> 1\n    if (t > BigInteger.lowprimes.length) t = BigInteger.lowprimes.length\n    const a = new BigInteger()\n    for (let i = 0; i < t; ++i) {\n      //Pick bases at random, instead of starting at 2\n      a.fromInt(\n        BigInteger.lowprimes[\n          Math.floor(math.random() * BigInteger.lowprimes.length)\n        ],\n      )\n      let y = a.modPow(r, this)\n      if (y.compareTo(BigInteger.ONE) !== 0 && y.compareTo(n1) !== 0) {\n        let j = 1\n        while (j++ < k && y.compareTo(n1) !== 0) {\n          y = y.modPowInt(2, this)\n          if (y.compareTo(BigInteger.ONE) === 0) return false\n        }\n        if (y.compareTo(n1) !== 0) return false\n      }\n    }\n    return true\n  }\n}\n\n// Digit conversions\nconst BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz'\nconst BI_RC: number[] = []\nlet rr, vv\nrr = '0'.charCodeAt(0)\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv\nrr = 'a'.charCodeAt(0)\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\nrr = 'A'.charCodeAt(0)\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\n\nexport function int2char(n: number): string {\n  return BI_RM.charAt(n)\n}\n\nfunction intAt(s: string, i: number): number {\n  const c = BI_RC[s.charCodeAt(i)]\n  return c == null ? -1 : c\n}\n\n// returns bit length of the integer x\nfunction nbits(x: number): number {\n  let r = 1,\n    t\n  if ((t = x >>> 16) !== 0) {\n    x = t\n    r += 16\n  }\n  if ((t = x >> 8) !== 0) {\n    x = t\n    r += 8\n  }\n  if ((t = x >> 4) !== 0) {\n    x = t\n    r += 4\n  }\n  if ((t = x >> 2) !== 0) {\n    x = t\n    r += 2\n  }\n  if ((t = x >> 1) !== 0) {\n    // x = t\n    r += 1\n  }\n  return r\n}\n\ninterface Reducer {\n  convert(x: BigInteger): BigInteger\n  revert(x: BigInteger): BigInteger\n  reduce(x: BigInteger): void\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void\n  sqrTo(x: BigInteger, r: BigInteger): void\n}\n\n// Modular reduction using \"classic\" algorithm\nclass Classic implements Reducer {\n  constructor(private readonly m: BigInteger) {}\n\n  convert(x: BigInteger): BigInteger {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)\n    else return x\n  }\n\n  revert(x: BigInteger): BigInteger {\n    return x\n  }\n\n  reduce(x: BigInteger): void {\n    x.divRemTo(this.m, undefined, x)\n  }\n\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\n    x.multiplyTo(y, r)\n    this.reduce(r)\n  }\n\n  sqrTo(x: BigInteger, r: BigInteger): void {\n    x.squareTo(r)\n    this.reduce(r)\n  }\n}\n\n// Montgomery reduction\nclass Montgomery implements Reducer {\n  private readonly m: BigInteger\n  private readonly mp: number\n  private readonly mpl: number\n  private readonly mph: number\n  private readonly um: number\n  private readonly mt2: number\n\n  constructor(m: BigInteger) {\n    this.m = m\n    this.mp = m.invDigit()\n    this.mpl = this.mp & 0x7fff\n    this.mph = this.mp >> 15\n    this.um = (1 << (BigInteger.DB - 15)) - 1\n    this.mt2 = 2 * m.t\n  }\n\n  // xR mod m\n  convert(x: BigInteger): BigInteger {\n    const r = new BigInteger()\n    x.abs().dlShiftTo(this.m.t, r)\n    r.divRemTo(this.m, undefined, r)\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\n    return r\n  }\n\n  // x/R mod m\n  revert(x: BigInteger): BigInteger {\n    const r = new BigInteger()\n    x.copyTo(r)\n    this.reduce(r)\n    return r\n  }\n\n  // x = x/R mod m (HAC 14.32)\n  reduce(x: BigInteger): void {\n    while (x.t <= this.mt2)\n      // pad x so am has enough room later\n      x[x.t++] = 0\n    for (let i = 0; i < this.m.t; ++i) {\n      // faster way of calculating u0 = x[i]*mp mod DV\n      let j = x[i] & 0x7fff\n      const u0 =\n        (j * this.mpl +\n          (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) &\n        BigInteger.DM\n      // use am to combine the multiply-shift-add into one call\n      j = i + this.m.t\n      x[j] += this.m.am(0, u0, x, i, 0, this.m.t)\n      // propagate carry\n      while (x[j] >= BigInteger.DV) {\n        x[j] -= BigInteger.DV\n        x[++j]++\n      }\n    }\n    x.clamp()\n    x.drShiftTo(this.m.t, x)\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)\n  }\n\n  // r = \"x^2/R mod m\"; x !== r\n  sqrTo(x: BigInteger, r: BigInteger): void {\n    x.squareTo(r)\n    this.reduce(r)\n  }\n\n  // r = \"xy/R mod m\"; x,y !== r\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\n    x.multiplyTo(y, r)\n    this.reduce(r)\n  }\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x: number): number {\n  if (x === 0) return -1\n  let r = 0\n  if ((x & 0xffff) === 0) {\n    x >>= 16\n    r += 16\n  }\n  if ((x & 0xff) === 0) {\n    x >>= 8\n    r += 8\n  }\n  if ((x & 0xf) === 0) {\n    x >>= 4\n    r += 4\n  }\n  if ((x & 3) === 0) {\n    x >>= 2\n    r += 2\n  }\n  if ((x & 1) === 0) ++r\n  return r\n}\n\n// return number of 1 bits in x\nfunction cbit(x: number): number {\n  let r = 0\n  while (x !== 0) {\n    x &= x - 1\n    ++r\n  }\n  return r\n}\n\n// A \"null\" reducer\nclass NullExp implements Reducer {\n  convert = nNop\n  revert = nNop\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  reduce = (): void => {}\n\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\n    x.multiplyTo(y, r)\n  }\n\n  sqrTo(x: BigInteger, r: BigInteger): void {\n    x.squareTo(r)\n  }\n}\n\nfunction nNop(x: BigInteger): BigInteger {\n  return x\n}\n\n// Barrett modular reduction\n\nclass Barrett implements Reducer {\n  private readonly r2: BigInteger\n  private readonly q3: BigInteger\n  private readonly mu: BigInteger\n  private readonly m: BigInteger\n\n  constructor(m: BigInteger) {\n    // setup Barrett\n    this.r2 = new BigInteger()\n    this.q3 = new BigInteger()\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)\n    this.mu = this.r2.divide(m)\n    this.m = m\n  }\n\n  convert(x: BigInteger): BigInteger {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)\n    else if (x.compareTo(this.m) < 0) return x\n    else {\n      const r = new BigInteger()\n      x.copyTo(r)\n      this.reduce(r)\n      return r\n    }\n  }\n\n  revert(x: BigInteger): BigInteger {\n    return x\n  }\n\n  // x = x mod m (HAC 14.42)\n  reduce(x: BigInteger): void {\n    x.drShiftTo(this.m.t - 1, this.r2)\n    if (x.t > this.m.t + 1) {\n      x.t = this.m.t + 1\n      x.clamp()\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3)\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2)\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1)\n    x.subTo(this.r2, x)\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x)\n  }\n\n  // r = x^2 mod m; x !== r\n  sqrTo(x: BigInteger, r: BigInteger): void {\n    x.squareTo(r)\n    this.reduce(r)\n  }\n\n  // r = x*y mod m; x,y !== r\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\n    x.multiplyTo(y, r)\n    this.reduce(r)\n  }\n}\n","// From: https://github.com/tracker1/cryptico-js/blob/57b32417967b9c9b75c47c04971f72a120b59a67/src/hash.js\n\nimport { ByteArray } from '../type'\n\n/**\n *\n *  Secure Hash Algorithm (SHA256)\n *  http://www.webtoolkit.info/\n *\n *  Original code by Angel Marin, Paul Johnston.\n *\n **/\nexport function sha256(msg: string): string {\n  const chrsz = 8\n  const hexcase = 0\n\n  function safe_add(x: number, y: number): number {\n    const lsw = (x & 0xffff) + (y & 0xffff)\n    const msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n    return (msw << 16) | (lsw & 0xffff)\n  }\n\n  function S(X: number, n: number): number {\n    return (X >>> n) | (X << (32 - n))\n  }\n  function R(X: number, n: number): number {\n    return X >>> n\n  }\n  function Ch(x: number, y: number, z: number): number {\n    return (x & y) ^ (~x & z)\n  }\n  function Maj(x: number, y: number, z: number): number {\n    return (x & y) ^ (x & z) ^ (y & z)\n  }\n  function Sigma0256(x: number): number {\n    return S(x, 2) ^ S(x, 13) ^ S(x, 22)\n  }\n  function Sigma1256(x: number): number {\n    return S(x, 6) ^ S(x, 11) ^ S(x, 25)\n  }\n  function Gamma0256(x: number): number {\n    return S(x, 7) ^ S(x, 18) ^ R(x, 3)\n  }\n  function Gamma1256(x: number): number {\n    return S(x, 17) ^ S(x, 19) ^ R(x, 10)\n  }\n\n  function core_sha256(m: ByteArray, l: number): ByteArray {\n    const K = [\n      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,\n      0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\n      0xfc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n      0x6ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\n      0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\n      0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n    ]\n    const HASH = [\n      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c,\n      0x1f83d9ab, 0x5be0cd19,\n    ]\n    const W = new Array(64)\n    let a, b, c, d, e, f, g, h\n    let T1, T2\n\n    m[l >> 5] |= 0x80 << (24 - (l % 32))\n    m[(((l + 64) >> 9) << 4) + 15] = l\n\n    for (let i = 0; i < m.length; i += 16) {\n      a = HASH[0]\n      b = HASH[1]\n      c = HASH[2]\n      d = HASH[3]\n      e = HASH[4]\n      f = HASH[5]\n      g = HASH[6]\n      h = HASH[7]\n\n      for (let j = 0; j < 64; j++) {\n        if (j < 16) W[j] = m[j + i]\n        else\n          W[j] = safe_add(\n            safe_add(\n              safe_add(Gamma1256(W[j - 2]), W[j - 7]),\n              Gamma0256(W[j - 15]),\n            ),\n            W[j - 16],\n          )\n\n        T1 = safe_add(\n          safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]),\n          W[j],\n        )\n        T2 = safe_add(Sigma0256(a), Maj(a, b, c))\n\n        h = g\n        g = f\n        f = e\n        e = safe_add(d, T1)\n        d = c\n        c = b\n        b = a\n        a = safe_add(T1, T2)\n      }\n\n      HASH[0] = safe_add(a, HASH[0])\n      HASH[1] = safe_add(b, HASH[1])\n      HASH[2] = safe_add(c, HASH[2])\n      HASH[3] = safe_add(d, HASH[3])\n      HASH[4] = safe_add(e, HASH[4])\n      HASH[5] = safe_add(f, HASH[5])\n      HASH[6] = safe_add(g, HASH[6])\n      HASH[7] = safe_add(h, HASH[7])\n    }\n    return HASH\n  }\n\n  function str2binb(str: string): ByteArray {\n    const bin: ByteArray = []\n    const mask = (1 << chrsz) - 1\n    for (let i = 0; i < str.length * chrsz; i += chrsz) {\n      bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - (i % 32))\n    }\n    return bin\n  }\n\n  function binb2hex(binarray: ByteArray): string {\n    const hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef'\n    let str = ''\n    for (let i = 0; i < binarray.length * 4; i++) {\n      str +=\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8 + 4)) & 0xf) +\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8)) & 0xf)\n    }\n    return str\n  }\n\n  msg = Utf8Encode(msg)\n  return binb2hex(core_sha256(str2binb(msg), msg.length * chrsz))\n}\n\n/**\n *\n *  Secure Hash Algorithm (SHA1)\n *  http://www.webtoolkit.info/\n *\n **/\nexport function sha1(msg: string): string {\n  function rotate_left(n: number, s: number): number {\n    const t4 = (n << s) | (n >>> (32 - s))\n    return t4\n  }\n\n  // function lsb_hex(val: number): string {\n  //   let str = ''\n  //   let vh\n  //   let vl\n  //\n  //   for (let i = 0; i <= 6; i += 2) {\n  //     vh = (val >>> (i * 4 + 4)) & 0x0f\n  //     vl = (val >>> (i * 4)) & 0x0f\n  //     str += vh.toString(16) + vl.toString(16)\n  //   }\n  //   return str\n  // }\n\n  function cvt_hex(val: number): string {\n    let str = ''\n    let v\n\n    for (let i = 7; i >= 0; i--) {\n      v = (val >>> (i * 4)) & 0x0f\n      str += v.toString(16)\n    }\n    return str\n  }\n\n  let blockstart\n  let i, j\n  const W = new Array(80)\n  let H0 = 0x67452301\n  let H1 = 0xefcdab89\n  let H2 = 0x98badcfe\n  let H3 = 0x10325476\n  let H4 = 0xc3d2e1f0\n  let A, B, C, D, E\n  let temp\n\n  msg = Utf8Encode(msg)\n\n  const msg_len = msg.length\n\n  const word_array = []\n  for (i = 0; i < msg_len - 3; i += 4) {\n    j =\n      (msg.charCodeAt(i) << 24) |\n      (msg.charCodeAt(i + 1) << 16) |\n      (msg.charCodeAt(i + 2) << 8) |\n      msg.charCodeAt(i + 3)\n    word_array.push(j)\n  }\n\n  switch (msg_len % 4) {\n    case 0:\n      i = 0x080000000\n      break\n    case 1:\n      i = (msg.charCodeAt(msg_len - 1) << 24) | 0x0800000\n      break\n\n    case 2:\n      i =\n        (msg.charCodeAt(msg_len - 2) << 24) |\n        (msg.charCodeAt(msg_len - 1) << 16) |\n        0x08000\n      break\n\n    case 3:\n      i =\n        (msg.charCodeAt(msg_len - 3) << 24) |\n        (msg.charCodeAt(msg_len - 2) << 16) |\n        (msg.charCodeAt(msg_len - 1) << 8) |\n        0x80\n      break\n  }\n\n  word_array.push(i)\n\n  while (word_array.length % 16 !== 14) word_array.push(0)\n\n  word_array.push(msg_len >>> 29)\n  word_array.push((msg_len << 3) & 0x0ffffffff)\n\n  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {\n    for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i]\n    for (i = 16; i <= 79; i++)\n      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1)\n\n    A = H0\n    B = H1\n    C = H2\n    D = H3\n    E = H4\n\n    for (i = 0; i <= 19; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5a827999) &\n        0x0ffffffff\n      E = D\n      D = C\n      C = rotate_left(B, 30)\n      B = A\n      A = temp\n    }\n\n    for (i = 20; i <= 39; i++) {\n      temp =\n        (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ed9eba1) & 0x0ffffffff\n      E = D\n      D = C\n      C = rotate_left(B, 30)\n      B = A\n      A = temp\n    }\n\n    for (i = 40; i <= 59; i++) {\n      temp =\n        (rotate_left(A, 5) +\n          ((B & C) | (B & D) | (C & D)) +\n          E +\n          W[i] +\n          0x8f1bbcdc) &\n        0x0ffffffff\n      E = D\n      D = C\n      C = rotate_left(B, 30)\n      B = A\n      A = temp\n    }\n\n    for (i = 60; i <= 79; i++) {\n      temp =\n        (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xca62c1d6) & 0x0ffffffff\n      E = D\n      D = C\n      C = rotate_left(B, 30)\n      B = A\n      A = temp\n    }\n\n    H0 = (H0 + A) & 0x0ffffffff\n    H1 = (H1 + B) & 0x0ffffffff\n    H2 = (H2 + C) & 0x0ffffffff\n    H3 = (H3 + D) & 0x0ffffffff\n    H4 = (H4 + E) & 0x0ffffffff\n  }\n\n  const ret =\n    cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4)\n\n  return ret.toLowerCase()\n}\n\n/**\n *\n *  MD5 (Message-Digest Algorithm)\n *  http://www.webtoolkit.info/\n *\n **/\nexport function md5(msg: string): string {\n  function RotateLeft(lValue: number, iShiftBits: number): number {\n    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits))\n  }\n\n  function AddUnsigned(lX: number, lY: number): number {\n    const lX8 = lX & 0x80000000\n    const lY8 = lY & 0x80000000\n    const lX4 = lX & 0x40000000\n    const lY4 = lY & 0x40000000\n    const lResult = (lX & 0x3fffffff) + (lY & 0x3fffffff)\n    if (lX4 & lY4) {\n      return lResult ^ 0x80000000 ^ lX8 ^ lY8\n    }\n    if (lX4 | lY4) {\n      if (lResult & 0x40000000) {\n        return lResult ^ 0xc0000000 ^ lX8 ^ lY8\n      } else {\n        return lResult ^ 0x40000000 ^ lX8 ^ lY8\n      }\n    } else {\n      return lResult ^ lX8 ^ lY8\n    }\n  }\n\n  function F(x: number, y: number, z: number): number {\n    return (x & y) | (~x & z)\n  }\n  function G(x: number, y: number, z: number): number {\n    return (x & z) | (y & ~z)\n  }\n  function H(x: number, y: number, z: number): number {\n    return x ^ y ^ z\n  }\n  function I(x: number, y: number, z: number): number {\n    return y ^ (x | ~z)\n  }\n\n  function FF(\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    x: number,\n    s: number,\n    ac: number,\n  ): number {\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac))\n    return AddUnsigned(RotateLeft(a, s), b)\n  }\n\n  function GG(\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    x: number,\n    s: number,\n    ac: number,\n  ): number {\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac))\n    return AddUnsigned(RotateLeft(a, s), b)\n  }\n\n  function HH(\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    x: number,\n    s: number,\n    ac: number,\n  ): number {\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac))\n    return AddUnsigned(RotateLeft(a, s), b)\n  }\n\n  function II(\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    x: number,\n    s: number,\n    ac: number,\n  ): number {\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac))\n    return AddUnsigned(RotateLeft(a, s), b)\n  }\n\n  function ConvertToWordArray(str: string): ByteArray {\n    let lWordCount\n    const lMessageLength = str.length\n    const lNumberOfWords_temp1 = lMessageLength + 8\n    const lNumberOfWords_temp2 =\n      (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64\n    const lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16\n    const lWordArray: ByteArray = Array<number>(lNumberOfWords - 1)\n    let lBytePosition = 0\n    let lByteCount = 0\n    while (lByteCount < lMessageLength) {\n      lWordCount = (lByteCount - (lByteCount % 4)) / 4\n      lBytePosition = (lByteCount % 4) * 8\n      lWordArray[lWordCount] =\n        lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition)\n      lByteCount++\n    }\n    lWordCount = (lByteCount - (lByteCount % 4)) / 4\n    lBytePosition = (lByteCount % 4) * 8\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition)\n    lWordArray[lNumberOfWords - 2] = lMessageLength << 3\n    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29\n    return lWordArray\n  }\n\n  function WordToHex(lValue: number): string {\n    let WordToHexValue = '',\n      WordToHexValue_temp = '',\n      lByte,\n      lCount\n    for (lCount = 0; lCount <= 3; lCount++) {\n      lByte = (lValue >>> (lCount * 8)) & 255\n      WordToHexValue_temp = '0' + lByte.toString(16)\n      WordToHexValue =\n        WordToHexValue +\n        WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2)\n    }\n    return WordToHexValue\n  }\n\n  let k, AA, BB, CC, DD, a, b, c, d\n  const S11 = 7,\n    S12 = 12,\n    S13 = 17,\n    S14 = 22\n  const S21 = 5,\n    S22 = 9,\n    S23 = 14,\n    S24 = 20\n  const S31 = 4,\n    S32 = 11,\n    S33 = 16,\n    S34 = 23\n  const S41 = 6,\n    S42 = 10,\n    S43 = 15,\n    S44 = 21\n\n  msg = Utf8Encode(msg)\n\n  const x = ConvertToWordArray(msg)\n\n  a = 0x67452301\n  b = 0xefcdab89\n  c = 0x98badcfe\n  d = 0x10325476\n\n  for (k = 0; k < x.length; k += 16) {\n    AA = a\n    BB = b\n    CC = c\n    DD = d\n    a = FF(a, b, c, d, x[k + 0], S11, 0xd76aa478)\n    d = FF(d, a, b, c, x[k + 1], S12, 0xe8c7b756)\n    c = FF(c, d, a, b, x[k + 2], S13, 0x242070db)\n    b = FF(b, c, d, a, x[k + 3], S14, 0xc1bdceee)\n    a = FF(a, b, c, d, x[k + 4], S11, 0xf57c0faf)\n    d = FF(d, a, b, c, x[k + 5], S12, 0x4787c62a)\n    c = FF(c, d, a, b, x[k + 6], S13, 0xa8304613)\n    b = FF(b, c, d, a, x[k + 7], S14, 0xfd469501)\n    a = FF(a, b, c, d, x[k + 8], S11, 0x698098d8)\n    d = FF(d, a, b, c, x[k + 9], S12, 0x8b44f7af)\n    c = FF(c, d, a, b, x[k + 10], S13, 0xffff5bb1)\n    b = FF(b, c, d, a, x[k + 11], S14, 0x895cd7be)\n    a = FF(a, b, c, d, x[k + 12], S11, 0x6b901122)\n    d = FF(d, a, b, c, x[k + 13], S12, 0xfd987193)\n    c = FF(c, d, a, b, x[k + 14], S13, 0xa679438e)\n    b = FF(b, c, d, a, x[k + 15], S14, 0x49b40821)\n    a = GG(a, b, c, d, x[k + 1], S21, 0xf61e2562)\n    d = GG(d, a, b, c, x[k + 6], S22, 0xc040b340)\n    c = GG(c, d, a, b, x[k + 11], S23, 0x265e5a51)\n    b = GG(b, c, d, a, x[k + 0], S24, 0xe9b6c7aa)\n    a = GG(a, b, c, d, x[k + 5], S21, 0xd62f105d)\n    d = GG(d, a, b, c, x[k + 10], S22, 0x2441453)\n    c = GG(c, d, a, b, x[k + 15], S23, 0xd8a1e681)\n    b = GG(b, c, d, a, x[k + 4], S24, 0xe7d3fbc8)\n    a = GG(a, b, c, d, x[k + 9], S21, 0x21e1cde6)\n    d = GG(d, a, b, c, x[k + 14], S22, 0xc33707d6)\n    c = GG(c, d, a, b, x[k + 3], S23, 0xf4d50d87)\n    b = GG(b, c, d, a, x[k + 8], S24, 0x455a14ed)\n    a = GG(a, b, c, d, x[k + 13], S21, 0xa9e3e905)\n    d = GG(d, a, b, c, x[k + 2], S22, 0xfcefa3f8)\n    c = GG(c, d, a, b, x[k + 7], S23, 0x676f02d9)\n    b = GG(b, c, d, a, x[k + 12], S24, 0x8d2a4c8a)\n    a = HH(a, b, c, d, x[k + 5], S31, 0xfffa3942)\n    d = HH(d, a, b, c, x[k + 8], S32, 0x8771f681)\n    c = HH(c, d, a, b, x[k + 11], S33, 0x6d9d6122)\n    b = HH(b, c, d, a, x[k + 14], S34, 0xfde5380c)\n    a = HH(a, b, c, d, x[k + 1], S31, 0xa4beea44)\n    d = HH(d, a, b, c, x[k + 4], S32, 0x4bdecfa9)\n    c = HH(c, d, a, b, x[k + 7], S33, 0xf6bb4b60)\n    b = HH(b, c, d, a, x[k + 10], S34, 0xbebfbc70)\n    a = HH(a, b, c, d, x[k + 13], S31, 0x289b7ec6)\n    d = HH(d, a, b, c, x[k + 0], S32, 0xeaa127fa)\n    c = HH(c, d, a, b, x[k + 3], S33, 0xd4ef3085)\n    b = HH(b, c, d, a, x[k + 6], S34, 0x4881d05)\n    a = HH(a, b, c, d, x[k + 9], S31, 0xd9d4d039)\n    d = HH(d, a, b, c, x[k + 12], S32, 0xe6db99e5)\n    c = HH(c, d, a, b, x[k + 15], S33, 0x1fa27cf8)\n    b = HH(b, c, d, a, x[k + 2], S34, 0xc4ac5665)\n    a = II(a, b, c, d, x[k + 0], S41, 0xf4292244)\n    d = II(d, a, b, c, x[k + 7], S42, 0x432aff97)\n    c = II(c, d, a, b, x[k + 14], S43, 0xab9423a7)\n    b = II(b, c, d, a, x[k + 5], S44, 0xfc93a039)\n    a = II(a, b, c, d, x[k + 12], S41, 0x655b59c3)\n    d = II(d, a, b, c, x[k + 3], S42, 0x8f0ccc92)\n    c = II(c, d, a, b, x[k + 10], S43, 0xffeff47d)\n    b = II(b, c, d, a, x[k + 1], S44, 0x85845dd1)\n    a = II(a, b, c, d, x[k + 8], S41, 0x6fa87e4f)\n    d = II(d, a, b, c, x[k + 15], S42, 0xfe2ce6e0)\n    c = II(c, d, a, b, x[k + 6], S43, 0xa3014314)\n    b = II(b, c, d, a, x[k + 13], S44, 0x4e0811a1)\n    a = II(a, b, c, d, x[k + 4], S41, 0xf7537e82)\n    d = II(d, a, b, c, x[k + 11], S42, 0xbd3af235)\n    c = II(c, d, a, b, x[k + 2], S43, 0x2ad7d2bb)\n    b = II(b, c, d, a, x[k + 9], S44, 0xeb86d391)\n    a = AddUnsigned(a, AA)\n    b = AddUnsigned(b, BB)\n    c = AddUnsigned(c, CC)\n    d = AddUnsigned(d, DD)\n  }\n\n  const temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d)\n\n  return temp.toLowerCase()\n}\n\nfunction Utf8Encode(str: string): string {\n  str = str.replace(/\\r\\n/g, '\\n')\n  let utftext = ''\n\n  for (let n = 0; n < str.length; n++) {\n    const c = str.charCodeAt(n)\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c)\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode((c >> 6) | 192)\n      utftext += String.fromCharCode((c & 63) | 128)\n    } else {\n      utftext += String.fromCharCode((c >> 12) | 224)\n      utftext += String.fromCharCode(((c >> 6) & 63) | 128)\n      utftext += String.fromCharCode((c & 63) | 128)\n    }\n  }\n\n  return utftext\n}\n","import crypto from 'crypto'\n\nexport function sha256(msg: string): string {\n  return crypto.createHash('sha256').update(msg, 'utf8').digest('hex')\n}\n\nexport function sha1(msg: string): string {\n  return crypto.createHash('sha1').update(msg, 'utf8').digest('hex')\n}\n\nexport function md5(msg: string): string {\n  return crypto.createHash('md5').update(msg, 'utf8').digest('hex')\n}\n","import * as native from './native'\nimport * as node from './node'\n\nexport type HashFunc = (s: string) => string\n\nexport const sha256 = (\n  process.env.NODEJS ? node.sha256 : native.sha256\n) as HashFunc\n\nexport const sha1 = (process.env.NODEJS ? node.sha1 : native.sha1) as HashFunc\n\nexport const md5 = (process.env.NODEJS ? node.md5 : native.md5) as HashFunc\n","// Depends on jsbn.js and rng.js\n// Version 1.1: support utf-8 encoding in pkcs1pad2\n// convert a (hex) string to a bignum object\n\nimport { BigInteger } from './jsbn'\nimport { SecureRandom, SeededRandom } from './random'\nimport { sha1, sha256 } from './hash'\n\nexport function parseBigInt(str: string, r: number): BigInteger {\n  return new BigInteger(str, r)\n}\n\nexport function linebrk(s: string, n: number): string {\n  let ret = ''\n  let i = 0\n  while (i + n < s.length) {\n    ret += s.substring(i, i + n) + '\\n'\n    i += n\n  }\n  return ret + s.substring(i, s.length)\n}\n\nexport function byte2Hex(b: number): string {\n  if (b < 0x10) return '0' + b.toString(16)\n  else return b.toString(16)\n}\n\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\nexport function pkcs1pad2(s: string, n: number): BigInteger {\n  if (n < s.length + 11) {\n    // TODO: fix for utf-8\n    //throw \"Message too long for RSA (n=\" + n + \", l=\" + s.length + \")\"\n    //return null;\n    throw 'Message too long for RSA (n=' + n + ', l=' + s.length + ')'\n  }\n  const ba = []\n  let i = s.length - 1\n  while (i >= 0 && n > 0) {\n    const c = s.charCodeAt(i--)\n    if (c < 128) {\n      // encode using utf-8\n      ba[--n] = c\n    } else if (c > 127 && c < 2048) {\n      ba[--n] = (c & 63) | 128\n      ba[--n] = (c >> 6) | 192\n    } else {\n      ba[--n] = (c & 63) | 128\n      ba[--n] = ((c >> 6) & 63) | 128\n      ba[--n] = (c >> 12) | 224\n    }\n  }\n  ba[--n] = 0\n  const rng = new SecureRandom()\n  const x = []\n  while (n > 2) {\n    // random non-zero pad\n    x[0] = 0\n    while (x[0] === 0) rng.nextBytes(x)\n    ba[--n] = x[0]\n  }\n  ba[--n] = 2\n  ba[--n] = 0\n  return new BigInteger(ba)\n}\n\ntype RSAKeyKey = 'n' | 'e' | 'd' | 'p' | 'q' | 'dmp1' | 'dmq1' | 'coeff'\n\n// \"empty\" RSA key constructor\nexport class RSAKey {\n  n = new BigInteger()\n  e = 0\n  private d = new BigInteger()\n  private p = new BigInteger()\n  private q = new BigInteger()\n  private dmp1 = new BigInteger()\n  private dmq1 = new BigInteger()\n  private coeff = new BigInteger()\n\n  // Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n  // encryptB64(text: string): string | null {\n  //   const h = this.encrypt(text)\n  //   if (h) return hex2b64(h)\n  //   else return null\n  // }\n\n  // Set the public key fields N and e from hex strings\n  setPublic(N: string, E: string): void {\n    if (N && E) {\n      this.n = parseBigInt(N, 16)\n      this.e = parseInt(E, 16)\n    } else throw 'Invalid RSA public key'\n  }\n\n  // Perform raw public operation on \"x\": return x^e (mod n)\n  doPublic(x: BigInteger): BigInteger {\n    return x.modPowInt(this.e, this.n)\n  }\n\n  // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\n  encrypt(text: string): string {\n    const m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3)\n    // if (!m) return null\n    const c = this.doPublic(m)\n    // if (!c) return null\n    const h = c.toString(16)\n    if ((h.length & 1) === 0) return h\n    else return '0' + h\n  }\n\n  // Set the private key fields N, e, and d from hex strings\n  setPrivate(N: string, E: string, D: string): void {\n    if (!N && !E && N.length > 0 && E.length > 0) {\n      this.n = parseBigInt(N, 16)\n      this.e = parseInt(E, 16)\n      this.d = parseBigInt(D, 16)\n    } else throw 'Invalid RSA private key'\n  }\n\n  // Set the private key fields N, e, d and CRT params from hex strings\n  setPrivateEx(\n    N: string,\n    E: string,\n    D: string,\n    P: string,\n    Q: string,\n    DP: string,\n    DQ: string,\n    C: string,\n  ): void {\n    if (!N && !E && N.length > 0 && E.length > 0) {\n      this.n = parseBigInt(N, 16)\n      this.e = parseInt(E, 16)\n      this.d = parseBigInt(D, 16)\n      this.p = parseBigInt(P, 16)\n      this.q = parseBigInt(Q, 16)\n      this.dmp1 = parseBigInt(DP, 16)\n      this.dmq1 = parseBigInt(DQ, 16)\n      this.coeff = parseBigInt(C, 16)\n    } else throw new Error('Invalid RSA private key')\n  }\n\n  // Generate a new random private key B bits long, using public expt E\n  generate(B: number, E: string): void {\n    const rng = new SeededRandom()\n    const qs = B >> 1\n    this.e = parseInt(E, 16)\n    const ee = new BigInteger(E, 16)\n    for (;;) {\n      for (;;) {\n        this.p = new BigInteger(B - qs, 1, rng)\n        if (\n          this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) ===\n            0 &&\n          this.p.isProbablePrime(10)\n        )\n          break\n      }\n      for (;;) {\n        this.q = new BigInteger(qs, 1, rng)\n        if (\n          this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) ===\n            0 &&\n          this.q.isProbablePrime(10)\n        )\n          break\n      }\n      if (this.p.compareTo(this.q) <= 0) {\n        const t = this.p\n        this.p = this.q\n        this.q = t\n      }\n      const p1 = this.p.subtract(BigInteger.ONE)\n      const q1 = this.q.subtract(BigInteger.ONE)\n      const phi = p1.multiply(q1)\n      if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {\n        this.n = this.p.multiply(this.q)\n        this.d = ee.modInverse(phi)\n        this.dmp1 = this.d.mod(p1)\n        this.dmq1 = this.d.mod(q1)\n        this.coeff = this.q.modInverse(this.p)\n        break\n      }\n    }\n  }\n\n  // Perform raw private operation on \"x\": return x^d (mod n)\n  protected doPrivate(x: BigInteger): BigInteger {\n    if (!this.p || !this.q) return x.modPow(this.d, this.n)\n    // TODO: re-calculate any missing CRT params\n    let xp = x.mod(this.p).modPow(this.dmp1, this.p)\n    const xq = x.mod(this.q).modPow(this.dmq1, this.q)\n    while (xp.compareTo(xq) < 0) xp = xp.add(this.p)\n    return xp\n      .subtract(xq)\n      .multiply(this.coeff)\n      .mod(this.p)\n      .multiply(this.q)\n      .add(xq)\n  }\n\n  // Return the PKCS#1 RSA decryption of \"ctext\".\n  // \"ctext\" is an even-length hex string and the output is a plain string.\n  decrypt(ctext: string): string | null {\n    const c = parseBigInt(ctext, 16)\n    const m = this.doPrivate(c)\n    if (!(m instanceof BigInteger)) return null\n    return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3)\n  }\n\n  signString = _rsasign_signString\n  signStringWithSHA1 = _rsasign_signStringWithSHA1\n  signStringWithSHA256 = _rsasign_signStringWithSHA256\n  verifyHexSignatureForMessage = _rsasign_verifyHexSignatureForMessage\n  verifyString = _rsasign_verifyString\n\n  toJSON(): string {\n    return JSON.stringify({\n      coeff: this.coeff.toString(16),\n      d: this.d.toString(16),\n      dmp1: this.dmp1.toString(16),\n      dmq1: this.dmq1.toString(16),\n      e: this.e.toString(16),\n      n: this.n.toString(16),\n      p: this.p.toString(16),\n      q: this.q.toString(16),\n    })\n  }\n\n  static parse(key: string | Record<RSAKeyKey, string>): RSAKey | null {\n    const json = (typeof key === 'string' ? JSON.parse(key) : key) as Record<\n      RSAKeyKey,\n      string\n    >\n    if (!json) {\n      return null\n    }\n\n    const rsa = new RSAKey()\n    rsa.setPrivateEx(\n      json.n,\n      json.e,\n      json.d,\n      json.p,\n      json.q,\n      json.dmp1,\n      json.dmq1,\n      json.coeff,\n    )\n\n    return rsa\n  }\n}\n\n// Version 1.1: support utf-8 decoding in pkcs1unpad2\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\nexport function pkcs1unpad2(d: BigInteger, n: number): string | null {\n  const b = d.toByteArray()\n  let i = 0\n  while (i < b.length && b[i] === 0) ++i\n  if (b.length - i !== n - 1 || b[i] !== 2) return null\n  ++i\n  while (b[i] !== 0) if (++i >= b.length) return null\n  let ret = ''\n  while (++i < b.length) {\n    const c = b[i] & 255\n    if (c < 128) {\n      // utf-8 decode\n      ret += String.fromCharCode(c)\n    } else if (c > 191 && c < 224) {\n      ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63))\n      ++i\n    } else {\n      ret += String.fromCharCode(\n        ((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63),\n      )\n      i += 2\n    }\n  }\n  return ret\n}\n\n//\n// rsa-sign.js - adding signing functions to RSAKey class.\n//\n//\n// version: 1.0 (2010-Jun-03)\n//\n// Copyright (c) 2010 Kenji Urushima (kenji.urushima@gmail.com)\n//\n// This software is licensed under the terms of the MIT License.\n// http://www.opensource.org/licenses/mit-license.php\n//\n// The above copyright and license notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// Depends on:\n//   function sha1(s) of sha1.js\n//   jsbn.js\n//   jsbn2.js\n//   rsa.js\n//   rsa2.js\n//\n// keysize / pmstrlen\n//  512 /  128\n// 1024 /  256\n// 2048 /  512\n// 4096 / 1024\n// As for _RSASGIN_DIHEAD values for each hash algorithm, see PKCS#1 v2.1 spec (p38).\nconst _RSASIGN_DIHEAD = <const>{\n  sha1: '3021300906052b0e03021a05000414',\n  sha256: '3031300d060960864801650304020105000420',\n  // md2: '3020300c06082a864886f70d020205000410',\n  // md5: '3020300c06082a864886f70d020505000410',\n  // sha384: '3041300d060960864801650304020205000430',\n  // sha512: '3051300d060960864801650304020305000440',\n}\nconst _RSASIGN_HASHHEXFUNC = <const>{\n  sha1,\n  sha256,\n}\ntype HashAlg = keyof typeof _RSASIGN_HASHHEXFUNC\n\n// ========================================================================\n// Signature Generation\n// ========================================================================\n\nfunction _rsasign_getHexPaddedDigestInfoForString(\n  s: string,\n  keySize: number,\n  hashAlg: HashAlg,\n): string {\n  const pmStrLen = keySize / 4\n  const hashFunc = _RSASIGN_HASHHEXFUNC[hashAlg]\n  const sHashHex = hashFunc(s)\n\n  const sHead = '0001'\n  const sTail = '00' + _RSASIGN_DIHEAD[hashAlg] + sHashHex\n  let sMid = ''\n  const fLen = pmStrLen - sHead.length - sTail.length\n  for (let i = 0; i < fLen; i += 2) {\n    sMid += 'ff'\n  }\n  const sPaddedMessageHex = sHead + sMid + sTail\n  return sPaddedMessageHex\n}\n\nfunction _rsasign_signString(\n  this: RSAKey,\n  s: string,\n  hashAlg: HashAlg,\n): string {\n  const hPM = _rsasign_getHexPaddedDigestInfoForString(\n    s,\n    this.n.bitLength(),\n    hashAlg,\n  )\n  const biPaddedMessage = parseBigInt(hPM, 16)\n  const biSign = this.doPrivate(biPaddedMessage)\n  const hexSign = biSign.toString(16)\n  return hexSign\n}\n\nfunction _rsasign_signStringWithSHA1(this: RSAKey, s: string): string {\n  const hPM = _rsasign_getHexPaddedDigestInfoForString(\n    s,\n    this.n.bitLength(),\n    'sha1',\n  )\n  const biPaddedMessage = parseBigInt(hPM, 16)\n  const biSign = this.doPrivate(biPaddedMessage)\n  const hexSign = biSign.toString(16)\n  return hexSign\n}\n\nfunction _rsasign_signStringWithSHA256(this: RSAKey, s: string): string {\n  const hPM = _rsasign_getHexPaddedDigestInfoForString(\n    s,\n    this.n.bitLength(),\n    'sha256',\n  )\n  const biPaddedMessage = parseBigInt(hPM, 16)\n  const biSign = this.doPrivate(biPaddedMessage)\n  const hexSign = biSign.toString(16)\n  return hexSign\n}\n\n// ========================================================================\n// Signature Verification\n// ========================================================================\n\nfunction _rsasign_getDecryptSignatureBI(\n  biSig: BigInteger,\n  hN: string,\n  hE: string,\n): BigInteger {\n  const rsa = new RSAKey()\n  rsa.setPublic(hN, hE)\n  const biDecryptedSig = rsa.doPublic(biSig)\n  return biDecryptedSig\n}\n\nfunction _rsasign_getHexDigestInfoFromSig(\n  biSig: BigInteger,\n  hN: string,\n  hE: string,\n): string {\n  const biDecryptedSig = _rsasign_getDecryptSignatureBI(biSig, hN, hE)\n  const hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '')\n  return hDigestInfo\n}\n\nfunction _rsasign_getAlgNameAndHashFromHexDisgestInfo(\n  hDigestInfo: string,\n): [HashAlg, string] | [] {\n  for (const algName in _RSASIGN_DIHEAD) {\n    const head = _RSASIGN_DIHEAD[algName as HashAlg]\n    const len = head.length\n    if (hDigestInfo.substring(0, len) === head) {\n      return [algName as HashAlg, hDigestInfo.substring(len)]\n    }\n  }\n  return []\n}\n\nfunction _rsasign_verifySignatureWithArgs(\n  sMsg: string,\n  biSig: BigInteger,\n  hN: string,\n  hE: string,\n): boolean {\n  const hDigestInfo = _rsasign_getHexDigestInfoFromSig(biSig, hN, hE)\n  const digestInfoAry =\n    _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo)\n  if (digestInfoAry.length === 0) return false\n  const algName = digestInfoAry[0]\n  const diHashValue = digestInfoAry[1]\n  const ff = _RSASIGN_HASHHEXFUNC[algName]\n  const msgHashValue = ff(sMsg)\n  return diHashValue === msgHashValue\n}\n\nfunction _rsasign_verifyHexSignatureForMessage(\n  this: RSAKey,\n  sMsg: string,\n  hSig: string,\n): boolean {\n  const biSig = parseBigInt(hSig, 16)\n  const result = _rsasign_verifySignatureWithArgs(\n    sMsg,\n    biSig,\n    this.n.toString(16),\n    this.e.toString(16),\n  )\n  return result\n}\n\nfunction _rsasign_verifyString(\n  this: RSAKey,\n  sMsg: string,\n  hSig: string,\n): boolean {\n  hSig = hSig.replace(/[ \\n]+/g, '')\n  const biSig = parseBigInt(hSig, 16)\n  const biDecryptedSig = this.doPublic(biSig)\n  const hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '')\n  const digestInfoAry =\n    _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo)\n\n  if (digestInfoAry.length === 0) return false\n  const algName = digestInfoAry[0]\n  const diHashValue = digestInfoAry[1]\n  const ff = _RSASIGN_HASHHEXFUNC[algName]\n  const msgHashValue = ff(sMsg)\n  return diHashValue === msgHashValue\n}\n","import { aes, AESKey } from './aes'\nimport { int2char } from './jsbn'\nimport { math, SecureRandom } from './random'\nimport { md5, sha256 } from './hash'\nimport { RSAKey } from './rsa'\nimport { ByteArray } from './type'\n\nconst base64Chars =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nconst magic = '::52cee64bb3a38f6403386519a39ac91c::'\n\naes.Init()\n\ntype DecryptStatusSuccessForSignature<Signature> = {\n  status: 'success'\n  plaintext: string\n  signature: Signature\n  publicKeyString: Signature extends 'unsigned' ? never : string\n}\ntype DecryptStatusSuccess =\n  | DecryptStatusSuccessForSignature<'unsigned'>\n  | DecryptStatusSuccessForSignature<'verified' | 'forged'>\ntype DecryptStatusFailure = { status: 'Invalid public key' | 'failure' }\n\nexport class cryptico {\n  static b256to64(t: string): string {\n    let a = 0, // Should be reassigned before read\n      c,\n      n\n    let r = '',\n      // l = 0,\n      s = 0\n    const tl = t.length\n    for (n = 0; n < tl; n++) {\n      c = t.charCodeAt(n)\n      if (s === 0) {\n        r += base64Chars.charAt((c >> 2) & 63)\n        a = (c & 3) << 4\n      } else if (s === 1) {\n        r += base64Chars.charAt(a | ((c >> 4) & 15))\n        a = (c & 15) << 2\n      } else if (s === 2) {\n        r += base64Chars.charAt(a | ((c >> 6) & 3))\n        // l += 1\n        r += base64Chars.charAt(c & 63)\n      }\n      // l += 1\n      s += 1\n      if (s === 3) s = 0\n    }\n    if (s > 0) {\n      r += base64Chars.charAt(a)\n      // l += 1\n      r += '='\n      // l += 1\n    }\n    if (s === 1) {\n      r += '='\n    }\n    return r\n  }\n\n  static b64to256(t: string): string {\n    let c, n\n    let r = '',\n      s = 0,\n      a = 0\n    const tl = t.length\n    for (n = 0; n < tl; n++) {\n      c = base64Chars.indexOf(t.charAt(n))\n      if (c >= 0) {\n        if (s) r += String.fromCharCode(a | ((c >> (6 - s)) & 255))\n        s = (s + 2) & 7\n        a = (c << s) & 255\n      }\n    }\n    return r\n  }\n\n  static b16to64(h: string): string {\n    let i\n    let c\n    let ret = ''\n    if (h.length % 2 === 1) {\n      h = '0' + h\n    }\n    for (i = 0; i + 3 <= h.length; i += 3) {\n      c = parseInt(h.substring(i, i + 3), 16)\n      ret += base64Chars.charAt(c >> 6) + base64Chars.charAt(c & 63)\n    }\n    if (i + 1 === h.length) {\n      c = parseInt(h.substring(i, i + 1), 16)\n      ret += base64Chars.charAt(c << 2)\n    } else if (i + 2 === h.length) {\n      c = parseInt(h.substring(i, i + 2), 16)\n      ret += base64Chars.charAt(c >> 2) + base64Chars.charAt((c & 3) << 4)\n    }\n    while ((ret.length & 3) > 0) ret += '='\n    return ret\n  }\n\n  static b64to16(s: string): string {\n    let ret = ''\n    let i\n    let k = 0\n    let slop = 0 // Should be reassigned before read\n    for (i = 0; i < s.length; ++i) {\n      if (s.charAt(i) === '=') break\n      const v = base64Chars.indexOf(s.charAt(i))\n      if (v < 0) continue\n      if (k === 0) {\n        ret += int2char(v >> 2)\n        slop = v & 3\n        k = 1\n      } else if (k === 1) {\n        ret += int2char((slop << 2) | (v >> 4))\n        slop = v & 0xf\n        k = 2\n      } else if (k === 2) {\n        ret += int2char(slop)\n        ret += int2char(v >> 2)\n        slop = v & 3\n        k = 3\n      } else {\n        ret += int2char((slop << 2) | (v >> 4))\n        ret += int2char(v & 0xf)\n        k = 0\n      }\n    }\n    if (k === 1) ret += int2char(slop << 2)\n    return ret\n  }\n\n  // Converts a string to a byte array.\n  static string2bytes(str: string): ByteArray {\n    const bytes = []\n    for (let i = 0; i < str.length; i++) {\n      bytes.push(str.charCodeAt(i))\n    }\n    return bytes\n  }\n\n  // Converts a byte array to a string.\n  static bytes2string(bytes: ByteArray): string {\n    let str = ''\n    for (let i = 0; i < bytes.length; i++) {\n      str += String.fromCharCode(bytes[i])\n    }\n    return str\n  }\n\n  // Converts a UTF-8 string to ASCII string.\n  static utf82string(str: string): string {\n    return unescape(encodeURIComponent(str))\n  }\n\n  // Converts ascii string to a UTF-8 string.\n  static string2utf8(uriencoded: string): string {\n    return decodeURIComponent(escape(uriencoded))\n  }\n\n  // Converts a UTF-8 string to a byte array.\n  static utf82bytes(str: string): ByteArray {\n    const uriencoded = unescape(encodeURIComponent(str))\n    return this.string2bytes(uriencoded)\n  }\n\n  // Converts a byte array to a UTF-8 string.\n  static bytes2utf8(bytes: ByteArray): string {\n    const uriencoded = this.bytes2string(bytes)\n    return decodeURIComponent(escape(uriencoded))\n  }\n\n  // Returns a XOR b, where a and b are 16-byte byte arrays.\n  static blockXOR(a: ByteArray, b: ByteArray): ByteArray {\n    const xor = new Array(16) as ByteArray\n    for (let i = 0; i < 16; i++) {\n      xor[i] = a[i] ^ b[i]\n    }\n    return xor\n  }\n\n  // Returns a 16-byte initialization vector.\n  static blockIV(): ByteArray {\n    const r = new SecureRandom()\n    const IV = new Array(16) as ByteArray\n    r.nextBytes(IV)\n    return IV\n  }\n\n  // Returns a copy of bytes with zeros appended to the end\n  // so that the (length of bytes) % 16 === 0.\n  static pad16(bytes: ByteArray): ByteArray {\n    const newBytes = bytes.slice(0)\n    const padding = (16 - (bytes.length % 16)) % 16\n    for (let i = bytes.length; i < bytes.length + padding; i++) {\n      newBytes.push(0)\n    }\n    return newBytes\n  }\n\n  // Removes trailing zeros from a byte array.\n  static depad(bytes: ByteArray): ByteArray {\n    let newBytes = bytes.slice(0)\n    while (newBytes[newBytes.length - 1] === 0) {\n      newBytes = newBytes.slice(0, newBytes.length - 1)\n    }\n    return newBytes\n  }\n\n  // AES CBC Encryption.\n  static encryptAESCBC(plaintext: string, key: AESKey): string {\n    const exkey = key.slice(0)\n    aes.ExpandKey(exkey)\n    let blocks = this.utf82bytes(plaintext)\n    blocks = this.pad16(blocks)\n    let encryptedBlocks = this.blockIV()\n    for (let i = 0; i < blocks.length / 16; i++) {\n      let tempBlock = blocks.slice(i * 16, i * 16 + 16)\n      const prevBlock = encryptedBlocks.slice(i * 16, i * 16 + 16)\n      tempBlock = this.blockXOR(prevBlock, tempBlock)\n      aes.Encrypt(tempBlock, exkey)\n      encryptedBlocks = encryptedBlocks.concat(tempBlock)\n    }\n    const ciphertext = this.bytes2string(encryptedBlocks)\n    return this.b256to64(ciphertext)\n  }\n\n  // AES CBC Decryption.\n  static decryptAESCBC(encryptedText: string, key: AESKey): string {\n    const exkey = key.slice(0)\n    aes.ExpandKey(exkey)\n    const asciiText = this.b64to256(encryptedText)\n    const encryptedBlocks = this.string2bytes(asciiText)\n    let decryptedBlocks: ByteArray = []\n    for (let i = 1; i < encryptedBlocks.length / 16; i++) {\n      let tempBlock = encryptedBlocks.slice(i * 16, i * 16 + 16)\n      const prevBlock = encryptedBlocks.slice((i - 1) * 16, (i - 1) * 16 + 16)\n      aes.Decrypt(tempBlock, exkey)\n      tempBlock = this.blockXOR(prevBlock, tempBlock)\n      decryptedBlocks = decryptedBlocks.concat(tempBlock)\n    }\n    decryptedBlocks = this.depad(decryptedBlocks)\n    return this.bytes2utf8(decryptedBlocks)\n  }\n\n  // Wraps a str to 60 characters.\n  static wrap60(str: string): string {\n    let outstr = ''\n    for (let i = 0; i < str.length; i++) {\n      if (i % 60 === 0 && i !== 0) outstr += '\\n'\n      outstr += str[i]\n    }\n    return outstr\n  }\n\n  // Generate a random key for the AES-encrypted message. ciphertext.split\n  static generateAESKey(): AESKey {\n    const key = new Array(32) as ByteArray\n    const r = new SecureRandom()\n    r.nextBytes(key)\n    return key\n  }\n\n  // Generates an RSA key from a passphrase.\n  static generateRSAKey(passphrase: string, bitlength: number): RSAKey {\n    math.seedrandom(sha256(passphrase))\n    const rsa = new RSAKey()\n    rsa.generate(bitlength, '03')\n    return rsa\n  }\n\n  // Returns the ascii-armored version of the public key.\n  static publicKeyString(rsakey: RSAKey): string {\n    return this.b16to64(rsakey.n.toString(16))\n  }\n\n  // Returns an MD5 sum of a publicKeyString for easier identification.\n  static publicKeyID(publicKeyString: string): string {\n    return md5(publicKeyString)\n  }\n\n  static publicKeyFromString(str: string): RSAKey {\n    const N = this.b64to16(str.split('|')[0])\n    const E = '03'\n    const rsa = new RSAKey()\n    rsa.setPublic(N, E)\n    return rsa\n  }\n\n  static encrypt(\n    plaintext: string,\n    publickeystring: string,\n    signingkey: RSAKey,\n  ): { status: string } | { status: 'success'; cipher: string } {\n    {\n      let cipherblock = ''\n      const aeskey = this.generateAESKey()\n      try {\n        const publickey = this.publicKeyFromString(publickeystring)\n        cipherblock +=\n          this.b16to64(publickey.encrypt(this.bytes2string(aeskey))) + '?'\n      } catch (err) {\n        return { status: 'Invalid public key' }\n      }\n      if (signingkey) {\n        const signString = this.sign(plaintext, signingkey)\n        plaintext += magic\n        plaintext += this.publicKeyString(signingkey)\n        plaintext += magic\n        plaintext += signString\n      }\n      cipherblock += this.encryptAESCBC(plaintext, aeskey)\n      return { status: 'success', cipher: cipherblock }\n    }\n  }\n\n  static decrypt(\n    ciphertext: string,\n    key: RSAKey,\n  ): DecryptStatusSuccess | DecryptStatusFailure {\n    const cipherblock = ciphertext.split('?')\n    const aeskey = key.decrypt(this.b64to16(cipherblock[0]))\n    if (aeskey == null) {\n      return { status: 'failure' }\n    }\n    const aeskeyBytes = this.string2bytes(aeskey)\n    const plaintext = this.decryptAESCBC(cipherblock[1], aeskeyBytes).split(\n      magic,\n    )\n    if (plaintext.length > 1) {\n      return this._confirm(plaintext)\n    } else\n      return {\n        status: 'success',\n        plaintext: plaintext[0],\n        signature: 'unsigned',\n      } as DecryptStatusSuccessForSignature<'unsigned'>\n  }\n\n  static sign(plaintext: string, signingkey: RSAKey): string {\n    return this.b16to64(signingkey.signString(plaintext, 'sha256'))\n  }\n\n  static verify(plaintext: string[]): boolean {\n    const result = this._confirm(plaintext)\n    return result.status === 'success' && result.signature === 'verified'\n  }\n\n  private static _confirm(\n    plaintext: string[],\n  ): DecryptStatusSuccess | DecryptStatusFailure {\n    if (plaintext.length === 3) {\n      const publickey = this.publicKeyFromString(plaintext[1])\n      const signature = this.b64to16(plaintext[2])\n      if (publickey.verifyString(plaintext[0], signature)) {\n        return {\n          status: 'success',\n          plaintext: plaintext[0],\n          signature: 'verified',\n          publicKeyString: this.publicKeyString(publickey),\n        }\n      } else {\n        return {\n          status: 'success',\n          plaintext: plaintext[0],\n          signature: 'forged',\n          publicKeyString: this.publicKeyString(publickey),\n        }\n      }\n    } else {\n      return {\n        status: 'failure',\n      }\n    }\n  }\n}\n"],"names":["sha256","sha1","md5","crypto","node.sha256","native.sha256","node.sha1","native.sha1","node.md5","native.md5"],"mappings":";;;;;;;;;;;;;;;;;;;IAAA;;;;;;;;;;;;;;;;;;UAyBa,GAAG,GAAU;;QAExB,IAAI,EAAE;YACJ,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACvE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACzE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;YAC3E,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG;YAC1E,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YAC3E,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG;YACzE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE;YAC1E,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YACxE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YAC1E,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG;YACvE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;YACxE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG;YAC1E,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE;SAC9B;QAEd,WAAW,EAAE;YACX,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;SACxC;QAEd,QAAQ,EAAE,IAAI,KAAK,CAAS,GAAG,CAAC;QAChC,eAAe,EAAE,IAAI,KAAK,CAAS,EAAE,CAAC;QACtC,KAAK,EAAE,IAAI,KAAK,CAAS,GAAG,CAAC;QAE7B,IAAI;YACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;gBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YAE7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;gBAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YAE1E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC5B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;gBACtB,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAA;aACtC;SACF;QAED,IAAI;YACF,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA;YACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAA;YAC1B,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAA;YAC/B,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,EAAE,CAAA;YAChC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA;YACrB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAA;SACxB;QAED,SAAS,CAAC,GAAW;YACnB,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAA;YACrB,IAAI,EAAE,EACJ,IAAI,GAAG,CAAC,CAAA;YACV,QAAQ,EAAE;gBACR,KAAK,EAAE;oBACL,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAA;oBAClB,MAAK;gBACP,KAAK,EAAE;oBACL,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAA;oBAClB,MAAK;gBACP,KAAK,EAAE;oBACL,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAA;oBAClB,MAAK;gBACP;oBACE,MAAM,+DAA+D,CAAA;aACxE;YACD,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;oBAChB,IAAI,GAAG;wBACL,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;wBACxB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAClB,CAAA;oBACD,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG;wBAAE,IAAI,IAAI,KAAK,CAAA;iBACvC;qBAAM,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE;oBACjC,IAAI,GAAG;wBACL,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAClB,CAAA;gBACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;aACnE;SACF;QAED,OAAO,CAAC,KAAgB,EAAE,GAAW;YACnC,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAA;YACpB,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YACxC,IAAI,CAAC,CAAA;YACL,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;gBAChC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAA;gBAC7B,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,WAAW,CAAC,CAAA;gBACrC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;gBACrB,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;aAC7C;YACD,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAA;YAC7B,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,WAAW,CAAC,CAAA;YACrC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;SACxC;QAED,OAAO,CAAC,KAAgB,EAAE,GAAW;YACnC,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAA;YACpB,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;YAC5C,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,eAAe,CAAC,CAAA;YACzC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAA;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;gBAC5C,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;gBACzB,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,eAAe,CAAC,CAAA;gBACzC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAA;aAClC;YACD,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;SACzC;QAED,QAAQ,CAAC,KAAgB,EAAE,IAAe;YACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;SACvD;QAED,WAAW,CAAC,KAAgB,EAAE,IAAe;YAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAA;SACjD;QAED,SAAS,CAAC,KAAgB,EAAE,QAAkB;YAC5C,MAAM,CAAC,GAAG,IAAI,KAAK,EAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;SACvD;QAED,UAAU,CAAC,KAAgB;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC9B,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EACrB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;gBACnB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EACrB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;gBACnB,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;gBAC3B,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;gBACtC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;gBACtC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;gBACtC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;aACvC;SACF;QAED,cAAc,CAAC,KAAgB;YAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC9B,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EACrB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;gBACnB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EACrB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;gBACnB,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;gBAC3B,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBACvB,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAA;gBACjD,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAA;gBACjD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;gBACvC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;gBACvC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;gBACvC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;aACxC;SACF;;;ICvLH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAIA,MAAM,IAAI,GAAa,EAAE,CAAA;IACzB,MAAM,KAAK,GAAG,GAAG,CAAA;IACjB,MAAM,MAAM,GAAG,CAAC,CAAA;IAChB;IACA;IACA;IACA,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IACpC,MAAM,QAAQ,GAAG,YAAY,GAAG,CAAC,CAAA;IACjC,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;UAE7B,IAAI,GAAG;;;;;QAKlB,UAAU,CAAC,IAAY,EAAE,WAAW,GAAG,KAAK;YAC1C,MAAM,GAAG,GAAa,EAAE,CAAA;;YAGxB,IAAI,GAAG,MAAM,CACX,OAAO,CACL,WAAW;kBACP,CAAC,IAAI,EAAE,IAAI,CAAC;kBACZ,SAAS,CAAC,MAAM;sBAChB,IAAI;sBACJ,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,EAChC,CAAC,CACF,EACD,GAAG,CACJ,CAAA;;YAGD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAA;;YAG1B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;;;;YAKpB,IAAI,CAAC,MAAM,GAAG;;gBAEZ,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;gBACtB,IAAI,CAAC,GAAG,UAAU,CAAA;gBAClB,IAAI,CAAC,GAAG,CAAC,CAAA;gBACT,OAAO,CAAC,GAAG,YAAY,EAAE;;oBAEvB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,CAAA;oBACnB,CAAC,IAAI,KAAK,CAAA;oBACV,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;iBACd;gBACD,OAAO,CAAC,IAAI,QAAQ,EAAE;;oBAEpB,CAAC,IAAI,CAAC,CAAA;oBACN,CAAC,IAAI,CAAC,CAAA;oBACN,CAAC,MAAM,CAAC,CAAA;iBACT;gBACD,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;aACnB,CAAA;;YAGD,OAAO,IAAI,CAAA;SACZ;QAED,MAAM,EAAE;YACN,OAAO,IAAI,CAAC,MAAM,EAAE,CAAA;SACrB;MACF;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,IAAI;QACR,CAAC,GAAG,CAAC,CAAA;QACL,CAAC,GAAG,CAAC,CAAA;QACL,CAAC,GAAa,EAAE,CAAA;QAChB,CAAC,GAAa,EAAE,CAAA;QAEhB,YAAY,GAAa;YACvB,IAAI,CAAC,EACH,CAAC,EACD,MAAM,GAAG,GAAG,CAAC,MAAM,CAAA;YACrB,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,GAAG,CAAC,CAAA;;YAGP,IAAI,CAAC,MAAM,EAAE;gBACX,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,CAAA;aACjB;;YAGD,OAAO,CAAC,GAAG,KAAK,EAAE;gBAChB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAA;aAChB;YACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC1B,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACb,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAA;gBACpC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACb,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;aACd;;;YAID,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;SACd;;QAGD,CAAC,CAAC,KAAa;YACb,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YAChB,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAC3B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACZ,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAC3B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACZ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACR,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACR,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACzB,OAAO,EAAE,KAAK,EAAE;gBACd,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;gBAClB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;gBACR,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;gBAClB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;gBACR,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACR,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACR,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;aAClC;YACD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACV,OAAO,CAAC,CAAA;SACT;KACF;IAID;IACA;IACA;IACA;IACA;;;IAGA,SAAS,OAAO,CAAC,GAAY,EAAE,KAAa;QAC1C,MAAM,MAAM,GAAmB,EAAE,CAAA;QACjC,MAAM,GAAG,GAAG,OAAO,GAAG,CAAA;QACtB,IAAI,KAAK,IAAI,GAAG,KAAK,QAAQ,EAAE;YAC7B,KAAK,MAAM,IAAI,IAAI,GAA8B,EAAE;gBACjD,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;;oBAEzB,IAAI;wBACF,MAAM,CAAC,IAAI,CACT,OAAO,CAAE,GAA+B,CAAC,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAC3D,CAAA;qBACF;oBAAC,OAAO,CAAC,EAAE;wBACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;qBACjB;iBACF;aACF;SACF;QACD,OAAO,MAAM,CAAC,MAAM,GAAG,MAAM,GAAG,GAAG,IAAI,GAAG,KAAK,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC,CAAA;IACtE,CAAC;IAED;IACA;IACA;IACA;IACA;IACA;;IAEA,SAAS,MAAM,CAAC,IAAa,EAAE,GAAa;QAC1C,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAA;QACzB,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CACvB,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CACxD,CAAA;SACF;QACD,IAAI,KAAK,GAAG,EAAE,CAAA;QACd,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACrD,OAAO,KAAK,CAAA;IACd,CAAC;IAED;IACA;IACA;IACA;IACA,SAAS,OAAO,CAAC,CAAS;QACxB,OAAO,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAA;IACxB,CAAC;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,CAAA;IAE3B;IACA;IACA;UACa,YAAY;QACvB,SAAS,CAAC,EAAY;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAA;aACxC;SACF;KACF;IAED;IACA,MAAM,OAAO;QACX,CAAC,GAAG,CAAC,CAAA;QACL,CAAC,GAAG,CAAC,CAAA;QACL,CAAC,GAAa,EAAE,CAAA;;QAGhB,IAAI,CAAC,GAAa;YAChB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;YACX,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC;gBAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACvC,CAAC,GAAG,CAAC,CAAA;YACL,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;gBACxB,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,CAAA;gBAC/C,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACb,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBACrB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;aACd;YACD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;SACX;QAED,IAAI;YACF,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAA;YAC3B,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAA;YACxC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACxB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YAClB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAA;SAC1C;KACF;IAED;IACA,SAAS,aAAa;QACpB,OAAO,IAAI,OAAO,EAAE,CAAA;IACtB,CAAC;IAED;IACA;IACA,MAAM,SAAS,GAAG,GAAG,CAAA;IAErB;IAEA;IACA;IACA;IAEA,IAAI,SAAkB,CAAA;IACtB,IAAI,QAAQ,GAAa,EAAE,CAAA;IAC3B,IAAI,QAAgB,CAAA;IAEpB;IACA,SAAS,YAAY,CAAC,CAAS;QAC7B,QAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAA;QAC/B,QAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAA;QACtC,QAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,GAAG,CAAA;QACvC,QAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,GAAG,CAAA;QACvC,IAAI,QAAQ,IAAI,SAAS;YAAE,QAAQ,IAAI,SAAS,CAAA;IAClD,CAAC;IAED;IACA,SAAS,aAAa;QACpB,YAAY,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAA;IACpC,CAAC;IAED;IACA,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,EAAE,CAAA;QACb,QAAQ,GAAG,CAAC,CAAA;QACZ,IAAI,CAAC,CAAA;QACL,OAAO,QAAQ,GAAG,SAAS,EAAE;;YAE3B,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;YACrC,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YAC9B,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;SAC/B;QACD,QAAQ,GAAG,CAAC,CAAA;QACZ,aAAa,EAAE,CAAA;;;KAGhB;IAED,SAAS,YAAY;QACnB,IAAI,CAAC,SAAS,EAAE;YACd,aAAa,EAAE,CAAA;YACf,SAAS,GAAG,aAAa,EAAE,CAAA;YAC3B,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACxB,KAAK,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,QAAQ;gBACvD,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;YACxB,QAAQ,GAAG,CAAC,CAAA;;SAEb;;QAED,OAAO,SAAS,CAAC,IAAI,EAAE,CAAA;IACzB,CAAC;UAEY,YAAY;QACvB,SAAS,CAAC,EAAa;YACrB,IAAI,CAAC,CAAA;YACL,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC;gBAAE,EAAE,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,CAAA;SACvD;;;UClZU,MAAM,GAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAC;UAC5B,KAAK,GAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAC;UAC3B,MAAM,GAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAC;UAC5B,SAAS,GAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;IAE7C,MAAM,KAAK,GAAG,EAAE,CAAA;IAChB,MAAM,KAAK,GAAG,EAAE,CAAA;UAEH,UAAU;QACrB,OAAO,EAAE,GAAG,KAAK,CAAA;QACjB,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;QAC5B,OAAO,EAAE,GAAG,CAAC,IAAI,KAAK,CAAA;QACtB,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;QAC9B,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,CAAA;QACzB,OAAO,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,CAAA;;QAE7B,OAAO,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;QAC/B,OAAO,GAAG,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;;QAG9B,CAAC,GAAG,CAAC,CAAA;QACL,CAAC,GAAG,CAAC,CAAC;QAGN,YACE,CAA8B,EAC9B,CAAyB,EACzB,CAAyB;YAEzB,IAAI,CAAC,EAAE;gBACL,IAAI,QAAQ,KAAK,OAAO,CAAC,EAAE;oBACzB,IAAI,CAAC,EAAE;wBACL,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAW,CAAC,CAAA;qBACnC;yBAAM;;wBAEL,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;qBAChB;iBACF;qBAAM;oBACL,IAAI,CAAC,UAAU,CAAC,CAAC,EAAG,CAAY,IAAI,GAAG,CAAC,CAAA;iBACzC;aACF;SACF;;;;QAKD,EAAE,CACA,CAAS,EACT,CAAS,EACT,CAAa,EACb,CAAS,EACT,CAAS,EACT,CAAS;YAET,MAAM,EAAE,GAAG,CAAC,GAAG,MAAM,EACnB,EAAE,GAAG,CAAC,IAAI,EAAE,CAAA;YACd,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;gBACf,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAA;gBACxB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;gBACzB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;gBACzB,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAA;gBAC3D,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAA;gBACjD,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAA;aACxB;YACD,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAa;YAClB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YACpD,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACZ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;SACb;;QAGD,OAAO,CAAC,CAAS;YACf,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACV,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;YACvB,IAAI,CAAC,GAAG,CAAC;gBAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;iBACjB,IAAI,CAAC,GAAG,CAAC,CAAC;gBAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;;gBACvC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;SAChB;;QAGD,UAAU,CAAC,CAAoB,EAAE,CAAS;YACxC,IAAI,CAAC,CAAA;YACL,IAAI,CAAC,KAAK,EAAE;gBAAE,CAAC,GAAG,CAAC,CAAA;iBACd,IAAI,CAAC,KAAK,CAAC;gBAAE,CAAC,GAAG,CAAC,CAAA;iBAClB,IAAI,CAAC,KAAK,GAAG;gBAAE,CAAC,GAAG,CAAC,CAAA;;iBAEpB,IAAI,CAAC,KAAK,CAAC;gBAAE,CAAC,GAAG,CAAC,CAAA;iBAClB,IAAI,CAAC,KAAK,EAAE;gBAAE,CAAC,GAAG,CAAC,CAAA;iBACnB,IAAI,CAAC,KAAK,CAAC;gBAAE,CAAC,GAAG,CAAC,CAAA;iBAClB;gBACH,IAAI,CAAC,SAAS,CAAC,CAAW,EAAE,CAAC,CAAC,CAAA;gBAC9B,OAAM;aACP;YACD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACV,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EACd,EAAE,GAAG,KAAK,EACV,EAAE,GAAG,CAAC,CAAA;YACR,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;gBACf,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAI,CAAC,CAAC,CAAC,CAAmB,GAAG,KAAK,CAAC,CAAW,EAAE,CAAC,CAAC,CAAA;gBACnE,IAAI,CAAC,GAAG,CAAC,EAAE;oBACT,IAAK,CAAY,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;wBAAE,EAAE,GAAG,IAAI,CAAA;oBAC9C,SAAQ;iBACT;gBACD,EAAE,GAAG,KAAK,CAAA;gBACV,IAAI,EAAE,KAAK,CAAC;oBAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;qBAC3B,IAAI,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,EAAE;oBAC/B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAA;oBACjE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;iBAC3C;;oBAAM,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;gBAClC,EAAE,IAAI,CAAC,CAAA;gBACP,IAAI,EAAE,IAAI,UAAU,CAAC,EAAE;oBAAE,EAAE,IAAI,UAAU,CAAC,EAAE,CAAA;aAC7C;YACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC,CAAY,GAAG,IAAI,MAAM,CAAC,EAAE;gBAC9C,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;gBACX,IAAI,EAAE,GAAG,CAAC;oBAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA;aACxE;YACD,IAAI,CAAC,KAAK,EAAE,CAAA;YACZ,IAAI,EAAE;gBAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;SAC1C;;QAGD,KAAK;YACH,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;YAChC,OAAO,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;gBAAE,EAAE,IAAI,CAAC,CAAC,CAAA;SACtD;;QAGD,QAAQ,CAAC,CAAC,GAAG,EAAE;YACb,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;gBAAE,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YACtD,IAAI,CAAC,CAAA;YACL,IAAI,CAAC,KAAK,EAAE;gBAAE,CAAC,GAAG,CAAC,CAAA;iBACd,IAAI,CAAC,KAAK,CAAC;gBAAE,CAAC,GAAG,CAAC,CAAA;iBAClB,IAAI,CAAC,KAAK,CAAC;gBAAE,CAAC,GAAG,CAAC,CAAA;iBAClB,IAAI,CAAC,KAAK,EAAE;gBAAE,CAAC,GAAG,CAAC,CAAA;iBACnB,IAAI,CAAC,KAAK,EAAE;gBAAE,CAAC,GAAG,CAAC,CAAA;iBACnB,IAAI,CAAC,KAAK,CAAC;gBAAE,CAAC,GAAG,CAAC,CAAA;;gBAClB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;YAC3B,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACvB,IAAI,CAAC,EACH,CAAC,GAAG,KAAK,EACT,CAAC,GAAG,EAAE,EACN,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACZ,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA;YACjD,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE;gBACX,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBAC/C,CAAC,GAAG,IAAI,CAAA;oBACR,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAA;iBAChB;gBACD,OAAO,CAAC,IAAI,CAAC,EAAE;oBACb,IAAI,CAAC,GAAG,CAAC,EAAE;wBACT,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;wBACzC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;qBAC3C;yBAAM;wBACL,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAA;wBAC9B,IAAI,CAAC,IAAI,CAAC,EAAE;4BACV,CAAC,IAAI,UAAU,CAAC,EAAE,CAAA;4BAClB,EAAE,CAAC,CAAA;yBACJ;qBACF;oBACD,IAAI,CAAC,GAAG,CAAC;wBAAE,CAAC,GAAG,IAAI,CAAA;oBACnB,IAAI,CAAC;wBAAE,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAA;iBACxB;aACF;YACD,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;SACnB;;QAGD,MAAM;YACJ,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;YAC9B,OAAO,CAAC,CAAA;SACT;;QAGD,GAAG;YACD,OAAO,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAA;SACzC;;QAGD,SAAS,CAAC,CAAa;YACrB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACpB,IAAI,CAAC,KAAK,CAAC;gBAAE,OAAO,CAAC,CAAA;YACrB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACd,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACX,IAAI,CAAC,KAAK,CAAC;gBAAE,OAAO,CAAC,CAAA;YACrB,OAAO,EAAE,CAAC,IAAI,CAAC;gBAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBAAE,OAAO,CAAC,CAAA;YACzD,OAAO,CAAC,CAAA;SACT;;QAGD,SAAS;YACP,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAA;YACzB,QACE,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC5B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC,EACnD;SACF;;QAGD,SAAS,CAAC,CAAS,EAAE,CAAa;YAChC,IAAI,CAAC,CAAA;YACL,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YACpD,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACrC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YAChB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;SACb;;QAGD,SAAS,CAAC,CAAS,EAAE,CAAa;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YACnD,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;YAC7B,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;SACb;;QAGD,QAAQ,CAAC,CAAS,EAAE,CAAa;YAC/B,MAAM,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;YAC5B,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,GAAG,EAAE,CAAA;YAC9B,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA;YACzB,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAA;YACxC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,UAAU,CAAC,EAAE,EACpC,CAAC,CAAA;YACH,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;gBAChC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA;gBACpC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,CAAA;aACzB;YACD,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACtC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;YACT,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;YACrB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACZ,CAAC,CAAC,KAAK,EAAE,CAAA;SACV;;QAGD,QAAQ,CAAC,CAAS,EAAE,CAAa;YAC/B,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACZ,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAA;YACxC,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC,EAAE;gBAChB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACP,OAAM;aACP;YACD,MAAM,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;YAC5B,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,GAAG,EAAE,CAAA;YAC9B,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACxB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YACrB,KAAK,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;gBACpC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,GAAG,CAAA;gBACtC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;aAC1B;YACD,IAAI,EAAE,GAAG,CAAC;gBAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,GAAG,CAAA;YACtD,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,CAAA;YACjB,CAAC,CAAC,KAAK,EAAE,CAAA;SACV;;QAGD,KAAK,CAAC,CAAa,EAAE,CAAa;YAChC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,GAAG,CAAC,CAAA;YACP,OAAO,CAAC,GAAG,CAAC,EAAE;gBACZ,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;gBACnB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;gBAC1B,CAAC,KAAK,UAAU,CAAC,EAAE,CAAA;aACpB;YACD,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE;gBAChB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACR,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE;oBACjB,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAA;oBACZ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;oBAC1B,CAAC,KAAK,UAAU,CAAC,EAAE,CAAA;iBACpB;gBACD,CAAC,IAAI,IAAI,CAAC,CAAC,CAAA;aACZ;iBAAM;gBACL,CAAC,IAAI,IAAI,CAAC,CAAC,CAAA;gBACX,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;oBACd,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;oBACT,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;oBAC1B,CAAC,KAAK,UAAU,CAAC,EAAE,CAAA;iBACpB;gBACD,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;aACT;YACD,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;YACpB,IAAI,CAAC,GAAG,CAAC,CAAC;gBAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,EAAE,GAAG,CAAC,CAAA;iBACjC,IAAI,CAAC,GAAG,CAAC;gBAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;YAC1B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACP,CAAC,CAAC,KAAK,EAAE,CAAA;SACV;;;QAID,UAAU,CAAC,CAAa,EAAE,CAAa;YACrC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,EAClB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;YACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACb,OAAO,EAAE,CAAC,IAAI,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACzB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACP,CAAC,CAAC,KAAK,EAAE,CAAA;YACT,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SAChD;;QAGD,QAAQ,CAAC,CAAa;YACpB,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YACpB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvB,OAAO,EAAE,CAAC,IAAI,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACzB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBAC5B,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;gBACvC,IACE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAClE,UAAU,CAAC,EAAE,EACb;oBACA,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,CAAA;oBAC3B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;iBACnB;aACF;YACD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;YACxD,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACP,CAAC,CAAC,KAAK,EAAE,CAAA;SACV;;;QAID,QAAQ,CAAC,CAAa,EAAE,CAAc,EAAE,CAAc;YACpD,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;YAClB,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;gBAAE,OAAM;YACrB,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YACrB,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;gBACf,IAAI,CAAC;oBAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;gBACnB,IAAI,CAAC;oBAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;gBACrB,OAAM;aACP;YACD,IAAI,CAAC,CAAC;gBAAE,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC5B,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,EACxB,EAAE,GAAG,IAAI,CAAC,CAAC,EACX,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;YACV,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YAC/C,IAAI,GAAG,GAAG,CAAC,EAAE;gBACX,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;gBACnB,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;aACpB;iBAAM;gBACL,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;gBACZ,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;aACb;YACD,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;YACd,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;YACpB,IAAI,EAAE,KAAK,CAAC;gBAAE,OAAM;YACpB,MAAM,EAAE,GACN,EAAE,IAAI,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;YACvE,MAAM,EAAE,GAAG,UAAU,CAAC,EAAE,GAAG,EAAE,EAC3B,EAAE,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,IAAI,EAAE,EAC9B,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,EAAE,EACtB,CAAC,GAAG,CAAC,IAAI,IAAI,UAAU,EAAE,CAAA;YAC3B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EACT,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;YACZ,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjB,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gBACvB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;gBACZ,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;aACd;YACD,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC/B,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACb,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;gBAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;YAC7B,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;;gBAEf,IAAI,EAAE,GACJ,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE;sBACT,UAAU,CAAC,EAAE;sBACb,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;gBACjD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;;oBAE3C,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACjB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACb,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE;wBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBAClC;aACF;YACD,IAAI,CAAC,EAAE;gBACL,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;gBAClB,IAAI,EAAE,KAAK,EAAE;oBAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;aAC3C;YACD,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;YACR,CAAC,CAAC,KAAK,EAAE,CAAA;YACT,IAAI,GAAG,GAAG,CAAC;gBAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;YAC/B,IAAI,EAAE,GAAG,CAAC;gBAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACxC;;QAGD,GAAG,CAAC,CAAa;YACf,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;YACpC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;gBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjE,OAAO,CAAC,CAAA;SACT;;;;;;;;;;;QAYD,QAAQ;YACN,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;gBAAE,OAAO,CAAC,CAAA;YACxB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YACjB,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC;gBAAE,OAAO,CAAC,CAAA;YAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YACb,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,CAAA;YACnC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAA;YACrC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAA;;;YAGtD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,CAAA;;YAEzD,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;SACtC;;QAGD,MAAM;YACJ,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAA;SACjD;;QAGD,GAAG,CAAC,CAAS,EAAE,CAAU;YACvB,IAAI,CAAC,GAAG,UAAU,IAAI,CAAC,GAAG,CAAC;gBAAE,OAAO,UAAU,CAAC,GAAG,CAAA;YAClD,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YACzB,IAAI,CAAC,GAAG,IAAI,UAAU,EAAE,EACtB,EAAE,GAAG,IAAI,UAAU,EAAE,EACrB,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YAClB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;gBACf,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;gBACd,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;oBAAE,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;qBACpC;oBACH,MAAM,CAAC,GAAG,CAAC,CAAA;oBACX,CAAC,GAAG,EAAE,CAAA;oBACN,EAAE,GAAG,CAAC,CAAA;iBACP;aACF;YACD,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACnB;;QAGD,SAAS,CAAC,CAAS,EAAE,CAAa;YAChC,IAAI,CAAC,CAAA;YACL,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,MAAM,EAAE;gBAAE,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAA;;gBACxC,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;YAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACtB;QAED,KAAK;YACH,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACd,OAAO,CAAC,CAAA;SACT;;QAGD,QAAQ;YACN,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;gBACd,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC;oBAAE,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;qBAC3C,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC;oBAAE,OAAO,CAAC,CAAC,CAAA;aACjC;iBAAM,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC,CAAC,CAAC,CAAA;iBAClC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC;gBAAE,OAAO,CAAC,CAAA;;YAE/B,QACE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,EAC3E;SACF;;QAGD,SAAS;YACP,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,CAAA;SACrD;;QAGD,UAAU;YACR,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,CAAA;SACrD;;QAGD,SAAS,CAAC,CAAS;YACjB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;SAC5D;;QAGD,MAAM;YACJ,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;gBAAE,OAAO,CAAC,CAAC,CAAA;iBACpB,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAAE,OAAO,CAAC,CAAA;;gBAC3D,OAAO,CAAC,CAAA;SACd;;QAGD,OAAO,CAAC,CAAS;YACf,IAAI,CAAC,CAAC;gBAAE,CAAC,GAAG,EAAE,CAAA;YACd,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE;gBAAE,OAAO,GAAG,CAAA;YACtD,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;YAC5B,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;YACzB,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EACzB,CAAC,GAAG,IAAI,UAAU,EAAE,EACpB,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YACtB,IAAI,CAAC,GAAG,EAAE,CAAA;YACV,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;YACtB,OAAO,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;gBACrB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBAChD,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;aACpB;YACD,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;SACpC;;QAGD,SAAS,CAAC,CAAS,EAAE,CAAS;YAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;YACf,IAAI,CAAC,CAAC;gBAAE,CAAC,GAAG,EAAE,CAAA;YACd,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;YAC5B,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;YACzB,IAAI,EAAE,GAAG,KAAK,EACZ,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,CAAC,CAAA;YACP,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACjC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBACrB,IAAI,CAAC,GAAG,CAAC,EAAE;oBACT,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;wBAAE,EAAE,GAAG,IAAI,CAAA;oBACzD,SAAQ;iBACT;gBACD,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;gBACb,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;oBACb,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;oBACjB,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACrB,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,CAAC,CAAA;iBACN;aACF;YACD,IAAI,CAAC,GAAG,CAAC,EAAE;gBACT,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;aACtB;YACD,IAAI,EAAE;gBAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;SAC1C;;QAGD,UAAU,CAAC,CAAS,EAAE,CAAwB,EAAE,CAAU;YACxD,IAAI,QAAQ,KAAK,OAAO,CAAC,EAAE;;gBAEzB,IAAI,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;qBACrB;;oBAEH,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAE,CAAC,CAAA;oBACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;;wBAEtB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;oBAC9D,IAAI,IAAI,CAAC,MAAM,EAAE;wBAAE,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACxC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;wBAC/B,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;wBACrB,IAAI,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC;4BACtB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;qBACpD;iBACF;aACF;iBAAM;;gBAEL,MAAM,CAAC,GAAa,EAAE,EACpB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;gBACX,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACvB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;gBACd,IAAI,CAAC,GAAG,CAAC;oBAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;oBAC1B,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBACb,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;aACxB;SACF;;QAGD,WAAW;YACT,MAAM,CAAC,GAAG,EAAE,CAAA;YACZ,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACd,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACb,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,EAC/C,CAAC,EACD,CAAC,GAAG,CAAC,CAAA;YACP,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE;gBACX,IACE,CAAC,GAAG,UAAU,CAAC,EAAE;oBACjB,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,KAAK,CAAC;oBAEpD,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC9C,OAAO,CAAC,IAAI,CAAC,EAAE;oBACb,IAAI,CAAC,GAAG,CAAC,EAAE;wBACT,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;wBACzC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;qBAC3C;yBAAM;wBACL,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAA;wBAChC,IAAI,CAAC,IAAI,CAAC,EAAE;4BACV,CAAC,IAAI,UAAU,CAAC,EAAE,CAAA;4BAClB,EAAE,CAAC,CAAA;yBACJ;qBACF;oBACD,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC;wBAAE,CAAC,IAAI,CAAC,GAAG,CAAA;oBAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,IAAI,CAAC;wBAAE,EAAE,CAAC,CAAA;oBAClD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;wBAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;iBACtC;aACF;YACD,OAAO,CAAC,CAAA;SACT;QAED,MAAM,CAAC,CAAa;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;SAC/B;QAED,GAAG,CAAC,CAAa;YACf,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAA;SACxC;QAED,GAAG,CAAC,CAAa;YACf,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAA;SACxC;;QAGD,SAAS,CAAC,CAAa,EAAE,EAAM,EAAE,CAAa;YAC5C,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAI,CAAC,CAAA;YACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YACpD,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE;gBAChB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;oBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBACtD,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;aACb;iBAAM;gBACL,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;gBAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;oBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAChD,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;aACV;YACD,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;YACrB,CAAC,CAAC,KAAK,EAAE,CAAA;SACV;;QAGD,GAAG,CAAC,CAAa;YACf,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAA;YAC5B,OAAO,CAAC,CAAA;SACT;;QAGD,EAAE,CAAC,CAAa;YACd,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAA;YAC3B,OAAO,CAAC,CAAA;SACT;;QAGD,GAAG,CAAC,CAAa;YACf,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAA;YAC5B,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAa;YAClB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;YAC/B,OAAO,CAAC,CAAA;SACT;;QAGD,GAAG;YACD,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAChE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACZ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;YACb,OAAO,CAAC,CAAA;SACT;;QAGD,SAAS,CAAC,CAAS;YACjB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,GAAG,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;gBAC1B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACxB,OAAO,CAAC,CAAA;SACT;;QAGD,UAAU,CAAC,CAAS;YAClB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,GAAG,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;gBAC1B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACxB,OAAO,CAAC,CAAA;SACT;;QAGD,eAAe;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;gBAC7B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;oBAAE,OAAO,CAAC,GAAG,UAAU,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7D,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;gBAAE,OAAO,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;YAC7C,OAAO,CAAC,CAAC,CAAA;SACV;;QAGD,QAAQ;YACN,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;YAChC,IAAI,CAAC,GAAG,CAAC,CAAA;YACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;gBAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YACvD,OAAO,CAAC,CAAA;SACT;;QAGD,OAAO,CAAC,CAAS;YACf,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAA;YACvC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;gBAAE,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC,CAAA;YACpC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAA;SAClD;;QAGD,SAAS,CAAC,CAAS,EAAE,EAAM;YACzB,MAAM,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;YACrC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;YACxB,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAS;YACd,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;SAChC;;QAGD,QAAQ,CAAC,CAAS;YAChB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAA;SACpC;;QAGD,OAAO,CAAC,CAAS;YACf,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;SACjC;;QAGD,KAAK,CAAC,CAAa,EAAE,CAAa;YAChC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,GAAG,CAAC,CAAA;YACP,OAAO,CAAC,GAAG,CAAC,EAAE;gBACZ,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;gBACnB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;gBAC1B,CAAC,KAAK,UAAU,CAAC,EAAE,CAAA;aACpB;YACD,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE;gBAChB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACR,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE;oBACjB,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAA;oBACZ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;oBAC1B,CAAC,KAAK,UAAU,CAAC,EAAE,CAAA;iBACpB;gBACD,CAAC,IAAI,IAAI,CAAC,CAAC,CAAA;aACZ;iBAAM;gBACL,CAAC,IAAI,IAAI,CAAC,CAAC,CAAA;gBACX,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;oBACd,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;oBACT,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,CAAA;oBAC1B,CAAC,KAAK,UAAU,CAAC,EAAE,CAAA;iBACpB;gBACD,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;aACT;YACD,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;YACpB,IAAI,CAAC,GAAG,CAAC;gBAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;iBAChB,IAAI,CAAC,GAAG,CAAC,CAAC;gBAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,EAAE,GAAG,CAAC,CAAA;YAC3C,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACP,CAAC,CAAC,KAAK,EAAE,CAAA;SACV;;QAGD,GAAG,CAAC,CAAa;YACf,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAChB,OAAO,CAAC,CAAA;SACT;;QAGD,QAAQ,CAAC,CAAa;YACpB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAChB,OAAO,CAAC,CAAA;SACT;;QAGD,QAAQ,CAAC,CAAa;YACpB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACrB,OAAO,CAAC,CAAA;SACT;;;QAID,MAAM;YACJ,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YAChB,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAa;YAClB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAA;YAC9B,OAAO,CAAC,CAAA;SACT;;QAGD,SAAS,CAAC,CAAa;YACrB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;YAC9B,OAAO,CAAC,CAAA;SACT;;QAGD,kBAAkB,CAAC,CAAa;YAC9B,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,EACxB,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YACtB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;YACtB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACd;;QAGS,SAAS,CAAC,CAAS;YAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;YACpD,EAAE,IAAI,CAAC,CAAC,CAAA;YACR,IAAI,CAAC,KAAK,EAAE,CAAA;SACb;;QAGD,UAAU,CAAC,CAAS,EAAE,CAAS;YAC7B,IAAI,CAAC,KAAK,CAAC;gBAAE,OAAM;YACnB,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC;gBAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;YACtC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;YACZ,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,EAAE;gBAC/B,IAAI,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,CAAA;gBACxB,IAAI,EAAE,CAAC,IAAI,IAAI,CAAC,CAAC;oBAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;gBACrC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;aACV;SACF;;QAGD,GAAG,CAAC,CAAS;YACX,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,OAAO,EAAE,CAAC,CAAA;SAClC;;;QAID,eAAe,CAAC,CAAa,EAAE,CAAS,EAAE,CAAa;YACrD,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACP,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACP,OAAO,CAAC,GAAG,CAAC;gBAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAA;YACxB,IAAI,CAAC,CAAA;YACL,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;gBAC/B,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;YACnD,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;gBAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;YACvE,CAAC,CAAC,KAAK,EAAE,CAAA;SACV;;;QAID,eAAe,CAAC,CAAa,EAAE,CAAS,EAAE,CAAa;YACrD,EAAE,CAAC,CAAA;YACH,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAChC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACP,OAAO,EAAE,CAAC,IAAI,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACzB,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;gBAC5C,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,KAAK,EAAE,CAAA;YACT,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SAClB;;QAGD,MAAM,CAAC,CAAa,EAAE,CAAa;YACjC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EACnB,CAAC,EACD,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EACrB,CAAC,CAAA;YACH,IAAI,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAA;iBACf,IAAI,CAAC,GAAG,EAAE;gBAAE,CAAC,GAAG,CAAC,CAAA;iBACjB,IAAI,CAAC,GAAG,EAAE;gBAAE,CAAC,GAAG,CAAC,CAAA;iBACjB,IAAI,CAAC,GAAG,GAAG;gBAAE,CAAC,GAAG,CAAC,CAAA;iBAClB,IAAI,CAAC,GAAG,GAAG;gBAAE,CAAC,GAAG,CAAC,CAAA;;gBAClB,CAAC,GAAG,CAAC,CAAA;YACV,IAAI,CAAC,GAAG,CAAC;gBAAE,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAA;iBACxB,IAAI,CAAC,CAAC,MAAM,EAAE;gBAAE,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAA;;gBAClC,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;;YAG1B,MAAM,CAAC,GAAiB,EAAE,EACxB,EAAE,GAAG,CAAC,GAAG,CAAC,EACV,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACnB,IAAI,CAAC,GAAG,CAAC,CAAA;YACT,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,CAAC,EAAE;gBACT,MAAM,EAAE,GAAG,IAAI,UAAU,EAAE,CAAA;gBAC3B,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;gBACjB,OAAO,CAAC,IAAI,EAAE,EAAE;oBACd,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;oBACvB,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;oBAC3B,CAAC,IAAI,CAAC,CAAA;iBACP;aACF;YAED,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EACb,CAAC,EACD,GAAG,GAAG,IAAI,EACV,EAAE,GAAG,IAAI,UAAU,EAAE,EACrB,CAAC,CAAA;YACH,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACnB,OAAO,CAAC,IAAI,CAAC,EAAE;gBACb,IAAI,CAAC,IAAI,EAAE;oBAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAA;qBACnC;oBACH,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAA;oBAC7C,IAAI,CAAC,GAAG,CAAC;wBAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAA;iBACrD;gBAED,CAAC,GAAG,CAAC,CAAA;gBACL,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;oBACpB,CAAC,KAAK,CAAC,CAAA;oBACP,EAAE,CAAC,CAAA;iBACJ;gBACD,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBAChB,CAAC,IAAI,UAAU,CAAC,EAAE,CAAA;oBAClB,EAAE,CAAC,CAAA;iBACJ;gBACD,IAAI,GAAG,EAAE;;oBAEP,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;oBACd,GAAG,GAAG,KAAK,CAAA;iBACZ;qBAAM;oBACL,OAAO,CAAC,GAAG,CAAC,EAAE;wBACZ,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;wBACd,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;wBACd,CAAC,IAAI,CAAC,CAAA;qBACP;oBACD,IAAI,CAAC,GAAG,CAAC;wBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;yBACpB;wBACH,CAAC,GAAG,CAAC,CAAA;wBACL,CAAC,GAAG,EAAE,CAAA;wBACN,EAAE,GAAG,CAAC,CAAA;qBACP;oBACD,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACrB;gBAED,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;oBACxC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;oBACd,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,EAAE,CAAA;oBACN,EAAE,GAAG,CAAC,CAAA;oBACN,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE;wBACX,CAAC,GAAG,UAAU,CAAC,EAAE,GAAG,CAAC,CAAA;wBACrB,EAAE,CAAC,CAAA;qBACJ;iBACF;aACF;YACD,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACnB;;QAGD,GAAG,CAAC,CAAa;YACf,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;YACjD,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,CAAA;YACxC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;gBACtB,MAAM,CAAC,GAAG,CAAC,CAAA;gBACX,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,CAAC,CAAA;aACN;YACD,IAAI,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,EACzB,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,CAAA;YACzB,IAAI,CAAC,GAAG,CAAC;gBAAE,OAAO,CAAC,CAAA;YACnB,IAAI,CAAC,GAAG,CAAC;gBAAE,CAAC,GAAG,CAAC,CAAA;YAChB,IAAI,CAAC,GAAG,CAAC,EAAE;gBACT,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAChB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;aACjB;YACD,OAAO,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;gBACrB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,CAAC;oBAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBACnD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,CAAC;oBAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBACnD,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;oBACvB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACb,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACjB;qBAAM;oBACL,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACb,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACjB;aACF;YACD,IAAI,CAAC,GAAG,CAAC;gBAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC3B,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAS;YACd,IAAI,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAA;YACpB,MAAM,CAAC,GAAG,UAAU,CAAC,EAAE,GAAG,CAAC,CAAA;YAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YAC9B,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,KAAK,CAAC;oBAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;;oBACvB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;wBAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;YACtE,OAAO,CAAC,CAAA;SACT;;QAGD,UAAU,CAAC,CAAa;YACtB,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,CAAA;YACrB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC;gBAAE,OAAO,UAAU,CAAC,IAAI,CAAA;YACrE,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EACjB,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;YAClB,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EACzB,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EACrB,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EACrB,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;YACvB,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;gBACvB,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;oBACjB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBAChB,IAAI,EAAE,EAAE;wBACN,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE;4BAC9B,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;4BAChB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;yBACd;wBACD,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;qBACjB;yBAAM,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;wBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACrC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACjB;gBACD,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;oBACjB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBAChB,IAAI,EAAE,EAAE;wBACN,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE;4BAC9B,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;4BAChB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;yBACd;wBACD,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;qBACjB;yBAAM,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;wBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACrC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACjB;gBACD,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;oBACvB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACb,IAAI,EAAE;wBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACrB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACd;qBAAM;oBACL,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACb,IAAI,EAAE;wBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;oBACrB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACd;aACF;YACD,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;gBAAE,OAAO,UAAU,CAAC,IAAI,CAAA;YAC7D,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YAC7C,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC;gBAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;gBAC5B,OAAO,CAAC,CAAA;YACb,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC;gBAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;;gBAC9B,OAAO,CAAC,CAAA;SACd;QAED,OAAO,SAAS,GAAG;YACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;YAC1E,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;SAC3D,CAAA;QACD,OAAO,KAAK,GACV,CAAC,CAAC,IAAI,EAAE,IAAI,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;;QAGnE,eAAe,CAAC,CAAS;YACvB,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YACpB,IAAI,CAAC,CAAA;YACL,IACE,CAAC,CAAC,CAAC,KAAK,CAAC;gBACT,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EAC7D;gBACA,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;oBAC9C,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;wBAAE,OAAO,IAAI,CAAA;gBACnD,OAAO,KAAK,CAAA;aACb;YACD,IAAI,CAAC,CAAC,MAAM,EAAE;gBAAE,OAAO,KAAK,CAAA;YAC5B,CAAC,GAAG,CAAC,CAAA;YACL,OAAO,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE;gBACtC,IAAI,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;gBACX,OAAO,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK;oBAC5D,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAA;gBAChC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;gBACf,OAAO,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;wBAAE,OAAO,KAAK,CAAA;aACpE;YACD,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;SACxB;;QAGD,WAAW,CAAC,CAAS;YACnB,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;YACxC,MAAM,CAAC,GAAG,EAAE,CAAC,eAAe,EAAE,CAAA;YAC9B,IAAI,CAAC,IAAI,CAAC;gBAAE,OAAO,KAAK,CAAA;YACxB,MAAM,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;YAC1B,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YAChB,IAAI,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM;gBAAE,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAA;YACpE,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;;gBAE1B,CAAC,CAAC,OAAO,CACP,UAAU,CAAC,SAAS,CAClB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CACxD,CACF,CAAA;gBACD,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;gBACzB,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;oBAC9D,IAAI,CAAC,GAAG,CAAC,CAAA;oBACT,OAAO,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;wBACvC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;wBACxB,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;4BAAE,OAAO,KAAK,CAAA;qBACpD;oBACD,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC;wBAAE,OAAO,KAAK,CAAA;iBACxC;aACF;YACD,OAAO,IAAI,CAAA;SACZ;;IAGH;IACA,MAAM,KAAK,GAAG,sCAAsC,CAAA;IACpD,MAAM,KAAK,GAAa,EAAE,CAAA;IAC1B,IAAI,EAAE,EAAE,EAAE,CAAA;IACV,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;IACtB,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;QAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAA;IAC5C,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;IACtB,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE;QAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAA;IAC7C,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;IACtB,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE;QAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAA;aAE7B,QAAQ,CAAC,CAAS;QAChC,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;IACxB,CAAC;IAED,SAAS,KAAK,CAAC,CAAS,EAAE,CAAS;QACjC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;QAChC,OAAO,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC;IAED;IACA,SAAS,KAAK,CAAC,CAAS;QACtB,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,CAAA;QACH,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YACxB,CAAC,GAAG,CAAC,CAAA;YACL,CAAC,IAAI,EAAE,CAAA;SACR;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACtB,CAAC,GAAG,CAAC,CAAA;YACL,CAAC,IAAI,CAAC,CAAA;SACP;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACtB,CAAC,GAAG,CAAC,CAAA;YACL,CAAC,IAAI,CAAC,CAAA;SACP;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACtB,CAAC,GAAG,CAAC,CAAA;YACL,CAAC,IAAI,CAAC,CAAA;SACP;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;;YAEtB,CAAC,IAAI,CAAC,CAAA;SACP;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAUD;IACA,MAAM,OAAO;QACkB;QAA7B,YAA6B,CAAa;YAAb,MAAC,GAAD,CAAC,CAAY;SAAI;QAE9C,OAAO,CAAC,CAAa;YACnB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;;gBACxD,OAAO,CAAC,CAAA;SACd;QAED,MAAM,CAAC,CAAa;YAClB,OAAO,CAAC,CAAA;SACT;QAED,MAAM,CAAC,CAAa;YAClB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;SACjC;QAED,KAAK,CAAC,CAAa,EAAE,CAAa,EAAE,CAAa;YAC/C,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAClB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACf;QAED,KAAK,CAAC,CAAa,EAAE,CAAa;YAChC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YACb,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACf;KACF;IAED;IACA,MAAM,UAAU;QACG,CAAC,CAAY;QACb,EAAE,CAAQ;QACV,GAAG,CAAQ;QACX,GAAG,CAAQ;QACX,EAAE,CAAQ;QACV,GAAG,CAAQ;QAE5B,YAAY,CAAa;YACvB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;YACV,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAA;YACtB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,MAAM,CAAA;YAC3B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,IAAI,EAAE,CAAA;YACxB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAA;YACzC,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACnB;;QAGD,OAAO,CAAC,CAAa;YACnB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,CAAC,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC9B,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;YAChC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;gBAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACnE,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAa;YAClB,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACd,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAa;YAClB,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG;;gBAEpB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;YACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;;gBAEjC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAA;gBACrB,MAAM,EAAE,GACN,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG;qBACV,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;oBAC9D,UAAU,CAAC,EAAE,CAAA;;gBAEf,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAChB,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;gBAE3C,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,EAAE;oBAC5B,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,CAAA;oBACrB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAA;iBACT;aACF;YACD,CAAC,CAAC,KAAK,EAAE,CAAA;YACT,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACxB,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACjD;;QAGD,KAAK,CAAC,CAAa,EAAE,CAAa;YAChC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YACb,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACf;;QAGD,KAAK,CAAC,CAAa,EAAE,CAAa,EAAE,CAAa;YAC/C,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAClB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACf;KACF;IAED;IACA,SAAS,IAAI,CAAC,CAAS;QACrB,IAAI,CAAC,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAA;QACtB,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,IAAI,CAAC,CAAC,GAAG,MAAM,MAAM,CAAC,EAAE;YACtB,CAAC,KAAK,EAAE,CAAA;YACR,CAAC,IAAI,EAAE,CAAA;SACR;QACD,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE;YACpB,CAAC,KAAK,CAAC,CAAA;YACP,CAAC,IAAI,CAAC,CAAA;SACP;QACD,IAAI,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC,EAAE;YACnB,CAAC,KAAK,CAAC,CAAA;YACP,CAAC,IAAI,CAAC,CAAA;SACP;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACjB,CAAC,KAAK,CAAC,CAAA;YACP,CAAC,IAAI,CAAC,CAAA;SACP;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC;YAAE,EAAE,CAAC,CAAA;QACtB,OAAO,CAAC,CAAA;IACV,CAAC;IAED;IACA,SAAS,IAAI,CAAC,CAAS;QACrB,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,OAAO,CAAC,KAAK,CAAC,EAAE;YACd,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACV,EAAE,CAAC,CAAA;SACJ;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAED;IACA,MAAM,OAAO;QACX,OAAO,GAAG,IAAI,CAAA;QACd,MAAM,GAAG,IAAI,CAAA;;QAEb,MAAM,GAAG,SAAc,CAAA;QAEvB,KAAK,CAAC,CAAa,EAAE,CAAa,EAAE,CAAa;YAC/C,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACnB;QAED,KAAK,CAAC,CAAa,EAAE,CAAa;YAChC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;SACd;KACF;IAED,SAAS,IAAI,CAAC,CAAa;QACzB,OAAO,CAAC,CAAA;IACV,CAAC;IAED;IAEA,MAAM,OAAO;QACM,EAAE,CAAY;QACd,EAAE,CAAY;QACd,EAAE,CAAY;QACd,CAAC,CAAY;QAE9B,YAAY,CAAa;;YAEvB,IAAI,CAAC,EAAE,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,IAAI,CAAC,EAAE,GAAG,IAAI,UAAU,EAAE,CAAA;YAC1B,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;YAC1C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAC3B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;SACX;QAED,OAAO,CAAC,CAAa;YACnB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBAAE,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;iBAClD,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;gBAAE,OAAO,CAAC,CAAA;iBACrC;gBACH,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAA;gBAC1B,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;gBACX,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;gBACd,OAAO,CAAC,CAAA;aACT;SACF;QAED,MAAM,CAAC,CAAa;YAClB,OAAO,CAAC,CAAA;SACT;;QAGD,MAAM,CAAC,CAAa;YAClB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;YAClC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;gBACtB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;gBAClB,CAAC,CAAC,KAAK,EAAE,CAAA;aACV;YACD,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;YACvD,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;YACtD,OAAO,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC;gBAAE,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAC9D,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YACnB,OAAO,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACpD;;QAGD,KAAK,CAAC,CAAa,EAAE,CAAa;YAChC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YACb,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACf;;QAGD,KAAK,CAAC,CAAa,EAAE,CAAa,EAAE,CAAa;YAC/C,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAClB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACf;;;IC53CH;IAIA;;;;;;;;aAQgBA,QAAM,CAAC,GAAW;QAChC,MAAM,KAAK,GAAG,CAAC,CAAA;QAGf,SAAS,QAAQ,CAAC,CAAS,EAAE,CAAS;YACpC,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,CAAC,CAAA;YACvC,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC,CAAA;YAC/C,OAAO,CAAC,GAAG,IAAI,EAAE,KAAK,GAAG,GAAG,MAAM,CAAC,CAAA;SACpC;QAED,SAAS,CAAC,CAAC,CAAS,EAAE,CAAS;YAC7B,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;SACnC;QACD,SAAS,CAAC,CAAC,CAAS,EAAE,CAAS;YAC7B,OAAO,CAAC,KAAK,CAAC,CAAA;SACf;QACD,SAAS,EAAE,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;YACzC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;SAC1B;QACD,SAAS,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;YAC1C,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;SACnC;QACD,SAAS,SAAS,CAAC,CAAS;YAC1B,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;SACrC;QACD,SAAS,SAAS,CAAC,CAAS;YAC1B,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;SACrC;QACD,SAAS,SAAS,CAAC,CAAS;YAC1B,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACpC;QACD,SAAS,SAAS,CAAC,CAAS;YAC1B,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;SACtC;QAED,SAAS,WAAW,CAAC,CAAY,EAAE,CAAS;YAC1C,MAAM,CAAC,GAAG;gBACR,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACrE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACrE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;aAC/C,CAAA;YACD,MAAM,IAAI,GAAG;gBACX,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;gBACtE,UAAU,EAAE,UAAU;aACvB,CAAA;YACD,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAA;YACvB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;YAC1B,IAAI,EAAE,EAAE,EAAE,CAAA;YAEV,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;YACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAA;YAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBAEX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC3B,IAAI,CAAC,GAAG,EAAE;wBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;;wBAEzB,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CACb,QAAQ,CACN,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EACvC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CACrB,EACD,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CACV,CAAA;oBAEH,EAAE,GAAG,QAAQ,CACX,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAChE,CAAC,CAAC,CAAC,CAAC,CACL,CAAA;oBACD,EAAE,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;oBAEzC,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;oBACnB,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,CAAC,CAAA;oBACL,CAAC,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;iBACrB;gBAED,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;aAC/B;YACD,OAAO,IAAI,CAAA;SACZ;QAED,SAAS,QAAQ,CAAC,GAAW;YAC3B,MAAM,GAAG,GAAc,EAAE,CAAA;YACzB,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;YAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE;gBAClD,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;aACrE;YACD,OAAO,GAAG,CAAA;SACX;QAED,SAAS,QAAQ,CAAC,QAAmB;YACnC,MAAM,OAAO,GAAkC,kBAAkB,CAAA;YACjE,IAAI,GAAG,GAAG,EAAE,CAAA;YACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC5C,GAAG;oBACD,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;wBACnE,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAA;aAClE;YACD,OAAO,GAAG,CAAA;SACX;QAED,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QACrB,OAAO,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAA;IACjE,CAAC;IAED;;;;;;aAMgBC,MAAI,CAAC,GAAW;QAC9B,SAAS,WAAW,CAAC,CAAS,EAAE,CAAS;YACvC,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;YACtC,OAAO,EAAE,CAAA;SACV;;;;;;;;;;;;;QAeD,SAAS,OAAO,CAAC,GAAW;YAC1B,IAAI,GAAG,GAAG,EAAE,CAAA;YACZ,IAAI,CAAC,CAAA;YAEL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3B,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAA;gBAC5B,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;aACtB;YACD,OAAO,GAAG,CAAA;SACX;QAED,IAAI,UAAU,CAAA;QACd,IAAI,CAAC,EAAE,CAAC,CAAA;QACR,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAA;QACvB,IAAI,EAAE,GAAG,UAAU,CAAA;QACnB,IAAI,EAAE,GAAG,UAAU,CAAA;QACnB,IAAI,EAAE,GAAG,UAAU,CAAA;QACnB,IAAI,EAAE,GAAG,UAAU,CAAA;QACnB,IAAI,EAAE,GAAG,UAAU,CAAA;QACnB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;QACjB,IAAI,IAAI,CAAA;QAER,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QAErB,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAA;QAE1B,MAAM,UAAU,GAAG,EAAE,CAAA;QACrB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACnC,CAAC;gBACC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE;qBACvB,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;qBAC5B,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC5B,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YACvB,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SACnB;QAED,QAAQ,OAAO,GAAG,CAAC;YACjB,KAAK,CAAC;gBACJ,CAAC,GAAG,WAAW,CAAA;gBACf,MAAK;YACP,KAAK,CAAC;gBACJ,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,SAAS,CAAA;gBACnD,MAAK;YAEP,KAAK,CAAC;gBACJ,CAAC;oBACC,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,EAAE;yBACjC,GAAG,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;wBACnC,OAAO,CAAA;gBACT,MAAK;YAEP,KAAK,CAAC;gBACJ,CAAC;oBACC,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,EAAE;yBACjC,GAAG,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;yBAClC,GAAG,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBAClC,IAAI,CAAA;gBACN,MAAK;SACR;QAED,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAElB,OAAO,UAAU,CAAC,MAAM,GAAG,EAAE,KAAK,EAAE;YAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAExD,UAAU,CAAC,IAAI,CAAC,OAAO,KAAK,EAAE,CAAC,CAAA;QAC/B,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,WAAW,CAAC,CAAA;QAE7C,KAAK,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,CAAC,MAAM,EAAE,UAAU,IAAI,EAAE,EAAE;YACrE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;YAC1D,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;gBACvB,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;YAEpE,CAAC,GAAG,EAAE,CAAA;YACN,CAAC,GAAG,EAAE,CAAA;YACN,CAAC,GAAG,EAAE,CAAA;YACN,CAAC,GAAG,EAAE,CAAA;YACN,CAAC,GAAG,EAAE,CAAA;YAEN,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;gBACxB,IAAI;oBACF,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU;wBACjE,WAAW,CAAA;gBACb,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;gBACtB,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,IAAI,CAAA;aACT;YAED,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;gBACzB,IAAI;oBACF,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,WAAW,CAAA;gBACzE,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;gBACtB,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,IAAI,CAAA;aACT;YAED,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;gBACzB,IAAI;oBACF,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;yBACf,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC7B,CAAC;wBACD,CAAC,CAAC,CAAC,CAAC;wBACJ,UAAU;wBACZ,WAAW,CAAA;gBACb,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;gBACtB,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,IAAI,CAAA;aACT;YAED,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;gBACzB,IAAI;oBACF,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,WAAW,CAAA;gBACzE,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;gBACtB,CAAC,GAAG,CAAC,CAAA;gBACL,CAAC,GAAG,IAAI,CAAA;aACT;YAED,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAA;YAC3B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAA;YAC3B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAA;YAC3B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAA;YAC3B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAA;SAC5B;QAED,MAAM,GAAG,GACP,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAA;QAErE,OAAO,GAAG,CAAC,WAAW,EAAE,CAAA;IAC1B,CAAC;IAED;;;;;;aAMgBC,KAAG,CAAC,GAAW;QAC7B,SAAS,UAAU,CAAC,MAAc,EAAE,UAAkB;YACpD,OAAO,CAAC,MAAM,IAAI,UAAU,KAAK,MAAM,MAAM,EAAE,GAAG,UAAU,CAAC,CAAC,CAAA;SAC/D;QAED,SAAS,WAAW,CAAC,EAAU,EAAE,EAAU;YACzC,MAAM,GAAG,GAAG,EAAE,GAAG,UAAU,CAAA;YAC3B,MAAM,GAAG,GAAG,EAAE,GAAG,UAAU,CAAA;YAC3B,MAAM,GAAG,GAAG,EAAE,GAAG,UAAU,CAAA;YAC3B,MAAM,GAAG,GAAG,EAAE,GAAG,UAAU,CAAA;YAC3B,MAAM,OAAO,GAAG,CAAC,EAAE,GAAG,UAAU,KAAK,EAAE,GAAG,UAAU,CAAC,CAAA;YACrD,IAAI,GAAG,GAAG,GAAG,EAAE;gBACb,OAAO,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,GAAG,CAAA;aACxC;YACD,IAAI,GAAG,GAAG,GAAG,EAAE;gBACb,IAAI,OAAO,GAAG,UAAU,EAAE;oBACxB,OAAO,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,GAAG,CAAA;iBACxC;qBAAM;oBACL,OAAO,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,GAAG,CAAA;iBACxC;aACF;iBAAM;gBACL,OAAO,OAAO,GAAG,GAAG,GAAG,GAAG,CAAA;aAC3B;SACF;QAED,SAAS,CAAC,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;YACxC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;SAC1B;QACD,SAAS,CAAC,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;YACxC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SAC1B;QACD,SAAS,CAAC,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;YACxC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SACjB;QACD,SAAS,CAAC,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;YACxC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACpB;QAED,SAAS,EAAE,CACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,EAAU;YAEV,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC/D,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACxC;QAED,SAAS,EAAE,CACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,EAAU;YAEV,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC/D,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACxC;QAED,SAAS,EAAE,CACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,EAAU;YAEV,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC/D,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACxC;QAED,SAAS,EAAE,CACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,CAAS,EACT,EAAU;YAEV,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC/D,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACxC;QAED,SAAS,kBAAkB,CAAC,GAAW;YACrC,IAAI,UAAU,CAAA;YACd,MAAM,cAAc,GAAG,GAAG,CAAC,MAAM,CAAA;YACjC,MAAM,oBAAoB,GAAG,cAAc,GAAG,CAAC,CAAA;YAC/C,MAAM,oBAAoB,GACxB,CAAC,oBAAoB,IAAI,oBAAoB,GAAG,EAAE,CAAC,IAAI,EAAE,CAAA;YAC3D,MAAM,cAAc,GAAG,CAAC,oBAAoB,GAAG,CAAC,IAAI,EAAE,CAAA;YACtD,MAAM,UAAU,GAAc,KAAK,CAAS,cAAc,GAAG,CAAC,CAAC,CAAA;YAC/D,IAAI,aAAa,GAAG,CAAC,CAAA;YACrB,IAAI,UAAU,GAAG,CAAC,CAAA;YAClB,OAAO,UAAU,GAAG,cAAc,EAAE;gBAClC,UAAU,GAAG,CAAC,UAAU,IAAI,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA;gBAChD,aAAa,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,CAAA;gBACpC,UAAU,CAAC,UAAU,CAAC;oBACpB,UAAU,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,aAAa,CAAC,CAAA;gBACxE,UAAU,EAAE,CAAA;aACb;YACD,UAAU,GAAG,CAAC,UAAU,IAAI,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA;YAChD,aAAa,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,CAAA;YACpC,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,UAAU,CAAC,IAAI,IAAI,IAAI,aAAa,CAAC,CAAA;YACzE,UAAU,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,cAAc,IAAI,CAAC,CAAA;YACpD,UAAU,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,cAAc,KAAK,EAAE,CAAA;YACtD,OAAO,UAAU,CAAA;SAClB;QAED,SAAS,SAAS,CAAC,MAAc;YAC/B,IAAI,cAAc,GAAG,EAAE,EACrB,mBAAmB,GAAG,EAAE,EACxB,KAAK,EACL,MAAM,CAAA;YACR,KAAK,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE;gBACtC,KAAK,GAAG,CAAC,MAAM,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG,CAAA;gBACvC,mBAAmB,GAAG,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;gBAC9C,cAAc;oBACZ,cAAc;wBACd,mBAAmB,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;aAChE;YACD,OAAO,cAAc,CAAA;SACtB;QAED,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;QACjC,MAAM,GAAG,GAAG,CAAC,EACX,GAAG,GAAG,EAAE,EACR,GAAG,GAAG,EAAE,EACR,GAAG,GAAG,EAAE,CAAA;QACV,MAAM,GAAG,GAAG,CAAC,EACX,GAAG,GAAG,CAAC,EACP,GAAG,GAAG,EAAE,EACR,GAAG,GAAG,EAAE,CAAA;QACV,MAAM,GAAG,GAAG,CAAC,EACX,GAAG,GAAG,EAAE,EACR,GAAG,GAAG,EAAE,EACR,GAAG,GAAG,EAAE,CAAA;QACV,MAAM,GAAG,GAAG,CAAC,EACX,GAAG,GAAG,EAAE,EACR,GAAG,GAAG,EAAE,EACR,GAAG,GAAG,EAAE,CAAA;QAEV,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QAErB,MAAM,CAAC,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAA;QAEjC,CAAC,GAAG,UAAU,CAAA;QACd,CAAC,GAAG,UAAU,CAAA;QACd,CAAC,GAAG,UAAU,CAAA;QACd,CAAC,GAAG,UAAU,CAAA;QAEd,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;YACjC,EAAE,GAAG,CAAC,CAAA;YACN,EAAE,GAAG,CAAC,CAAA;YACN,EAAE,GAAG,CAAC,CAAA;YACN,EAAE,GAAG,CAAC,CAAA;YACN,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAA;YAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;YAC7C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAA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"}