{"version":3,"file":"cryptico.iife.js","sources":["../src/aes.ts","../src/random.ts","../src/jsbn.ts","../src/hash/native.ts","../src/hash/index.ts","../src/hash/node.ts","../src/rsa.ts","../src/api.ts"],"sourcesContent":["/*\r\n *  jsaes version 0.1  -  Copyright 2006 B. Poettering\r\n *\r\n *  This program is free software; you can redistribute it and/or\r\n *  modify it under the terms of the GNU General Public License as\r\n *  published by the Free Software Foundation; either version 2 of the\r\n *  License, or (at your option) any later version.\r\n *\r\n *  This program is distributed in the hope that it will be useful,\r\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n *  General Public License for more details.\r\n *\r\n *  You should have received a copy of the GNU General Public License\r\n *  along with this program; if not, write to the Free Software\r\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\r\n *  02111-1307 USA\r\n */\r\n\r\n// later modifications by wwwtyro@github\r\n\r\nimport { ByteArray } from './type'\r\n\r\nexport type AESKey = ByteArray\r\n\r\nexport const aes = <const>{\r\n  // eslint-disable-next-line prettier/prettier\r\n  Sbox: [\r\n    99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118,\r\n    202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114,\r\n    192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49,\r\n    21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9,\r\n    131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209,\r\n    0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170,\r\n    251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143,\r\n    146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236,\r\n    95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34,\r\n    42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6,\r\n    36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213,\r\n    78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166,\r\n    180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3,\r\n    246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217,\r\n    142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230,\r\n    66, 104, 65, 153, 45, 15, 176, 84, 187, 22,\r\n  ] as ByteArray,\r\n\r\n  ShiftRowTab: [\r\n    0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11,\r\n  ] as ByteArray,\r\n\r\n  Sbox_Inv: new Array<number>(256),\r\n  ShiftRowTab_Inv: new Array<number>(16),\r\n  xtime: new Array<number>(256),\r\n\r\n  Init() {\r\n    for (let i = 0; i < 256; i++) this.Sbox_Inv[this.Sbox[i]] = i\r\n\r\n    for (let i = 0; i < 16; i++) this.ShiftRowTab_Inv[this.ShiftRowTab[i]] = i\r\n\r\n    for (let i = 0; i < 128; i++) {\r\n      this.xtime[i] = i << 1\r\n      this.xtime[128 + i] = (i << 1) ^ 0x1b\r\n    }\r\n  },\r\n\r\n  Done() {\r\n    this.Sbox_Inv.length = 0\r\n    this.Sbox_Inv.length = 256\r\n    this.ShiftRowTab_Inv.length = 0\r\n    this.ShiftRowTab_Inv.length = 16\r\n    this.xtime.length = 0\r\n    this.xtime.length = 256\r\n  },\r\n\r\n  ExpandKey(key: AESKey) {\r\n    const kl = key.length\r\n    let ks,\r\n      Rcon = 1\r\n    switch (kl) {\r\n      case 16:\r\n        ks = 16 * (10 + 1)\r\n        break\r\n      case 24:\r\n        ks = 16 * (12 + 1)\r\n        break\r\n      case 32:\r\n        ks = 16 * (14 + 1)\r\n        break\r\n      default:\r\n        throw 'my.ExpandKey: Only key lengths of 16, 24 or 32 bytes allowed!'\r\n    }\r\n    for (let i = kl; i < ks; i += 4) {\r\n      let temp = key.slice(i - 4, i)\r\n      if (i % kl === 0) {\r\n        temp = [\r\n          aes.Sbox[temp[1]] ^ Rcon,\r\n          aes.Sbox[temp[2]],\r\n          aes.Sbox[temp[3]],\r\n          aes.Sbox[temp[0]],\r\n        ]\r\n        if ((Rcon <<= 1) >= 256) Rcon ^= 0x11b\r\n      } else if (kl > 24 && i % kl === 16)\r\n        temp = [\r\n          aes.Sbox[temp[0]],\r\n          aes.Sbox[temp[1]],\r\n          aes.Sbox[temp[2]],\r\n          aes.Sbox[temp[3]],\r\n        ]\r\n      for (let j = 0; j < 4; j++) key[i + j] = key[i + j - kl] ^ temp[j]\r\n    }\r\n  },\r\n\r\n  Encrypt(block: ByteArray, key: AESKey) {\r\n    const l = key.length\r\n    aes.AddRoundKey(block, key.slice(0, 16))\r\n    let i\r\n    for (i = 16; i < l - 16; i += 16) {\r\n      aes.SubBytes(block, aes.Sbox)\r\n      aes.ShiftRows(block, aes.ShiftRowTab)\r\n      aes.MixColumns(block)\r\n      aes.AddRoundKey(block, key.slice(i, i + 16))\r\n    }\r\n    aes.SubBytes(block, aes.Sbox)\r\n    aes.ShiftRows(block, aes.ShiftRowTab)\r\n    aes.AddRoundKey(block, key.slice(i, l))\r\n  },\r\n\r\n  Decrypt(block: ByteArray, key: AESKey) {\r\n    const l = key.length\r\n    aes.AddRoundKey(block, key.slice(l - 16, l))\r\n    aes.ShiftRows(block, aes.ShiftRowTab_Inv)\r\n    aes.SubBytes(block, aes.Sbox_Inv)\r\n    for (let i = l - 32; i >= 16; i -= 16) {\r\n      aes.AddRoundKey(block, key.slice(i, i + 16))\r\n      aes.MixColumns_Inv(block)\r\n      aes.ShiftRows(block, aes.ShiftRowTab_Inv)\r\n      aes.SubBytes(block, aes.Sbox_Inv)\r\n    }\r\n    aes.AddRoundKey(block, key.slice(0, 16))\r\n  },\r\n\r\n  SubBytes(state: ByteArray, sbox: ByteArray) {\r\n    for (let i = 0; i < 16; i++) state[i] = sbox[state[i]]\r\n  },\r\n\r\n  AddRoundKey(state: ByteArray, rkey: ByteArray) {\r\n    for (let i = 0; i < 16; i++) state[i] ^= rkey[i]\r\n  },\r\n\r\n  ShiftRows(state: ByteArray, shifttab: number[]) {\r\n    const h = new Array<number>().concat(state)\r\n    for (let i = 0; i < 16; i++) state[i] = h[shifttab[i]]\r\n  },\r\n\r\n  MixColumns(state: ByteArray) {\r\n    for (let i = 0; i < 16; i += 4) {\r\n      const s0 = state[i + 0],\r\n        s1 = state[i + 1]\r\n      const s2 = state[i + 2],\r\n        s3 = state[i + 3]\r\n      const h = s0 ^ s1 ^ s2 ^ s3\r\n      state[i + 0] ^= h ^ aes.xtime[s0 ^ s1]\r\n      state[i + 1] ^= h ^ aes.xtime[s1 ^ s2]\r\n      state[i + 2] ^= h ^ aes.xtime[s2 ^ s3]\r\n      state[i + 3] ^= h ^ aes.xtime[s3 ^ s0]\r\n    }\r\n  },\r\n\r\n  MixColumns_Inv(state: ByteArray) {\r\n    for (let i = 0; i < 16; i += 4) {\r\n      const s0 = state[i + 0],\r\n        s1 = state[i + 1]\r\n      const s2 = state[i + 2],\r\n        s3 = state[i + 3]\r\n      const h = s0 ^ s1 ^ s2 ^ s3\r\n      const xh = aes.xtime[h]\r\n      const h1 = aes.xtime[aes.xtime[xh ^ s0 ^ s2]] ^ h\r\n      const h2 = aes.xtime[aes.xtime[xh ^ s1 ^ s3]] ^ h\r\n      state[i + 0] ^= h1 ^ aes.xtime[s0 ^ s1]\r\n      state[i + 1] ^= h2 ^ aes.xtime[s1 ^ s2]\r\n      state[i + 2] ^= h1 ^ aes.xtime[s2 ^ s3]\r\n      state[i + 3] ^= h2 ^ aes.xtime[s3 ^ s0]\r\n    }\r\n  },\r\n}\r\n","// seedrandom.js version 2.0.\r\n// Author: David Bau 4/2/2011\r\n//\r\n// Defines a method math.seedrandom() that, when called, substitutes\r\n// an explicitly seeded RC4-based algorithm for math.random().  Also\r\n// supports automatic seeding from local or network sources of entropy.\r\n//\r\n// Usage:\r\n//\r\n//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\r\n//\r\n//   Math.seedrandom('yipee'); Sets math.random to a function that is\r\n//                             initialized using the given explicit seed.\r\n//\r\n//   Math.seedrandom();        Sets math.random to a function that is\r\n//                             seeded using the current time, dom state,\r\n//                             and other accumulated local entropy.\r\n//                             The generated seed string is returned.\r\n//\r\n//   Math.seedrandom('yowza', true);\r\n//                             Seeds using the given explicit seed mixed\r\n//                             together with accumulated entropy.\r\n//\r\n//   <script src=\"http://bit.ly/srandom-512\"></script>\r\n//                             Seeds using physical random bits downloaded\r\n//                             from random.org.\r\n//\r\n//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\r\n//   </script>                 Seeds using urandom bits from call.jsonlib.com,\r\n//                             which is faster than random.org.\r\n//\r\n// Examples:\r\n//\r\n//   math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\r\n//   document.write(math.random());       // Always 0.5463663768140734\r\n//   document.write(math.random());       // Always 0.43973793770592234\r\n//   let rng1 = math.random;              // Remember the current prng.\r\n//\r\n//   let autoseed = math.seedrandom();    // New prng with an automatic seed.\r\n//   document.write(math.random());       // Pretty much unpredictable.\r\n//\r\n//   math.random = rng1;                  // Continue \"hello\" prng sequence.\r\n//   document.write(math.random());       // Always 0.554769432473455\r\n//\r\n//   Math.seedrandom(autoseed);           // Restart at the previous seed.\r\n//   document.write(math.random());       // Repeat the 'unpredictable' value.\r\n//\r\n// Notes:\r\n//\r\n// Each time seedrandom('arg') is called, entropy from the passed seed\r\n// is accumulated in a pool to help generate future seeds for the\r\n// zero-argument form of Math.seedrandom, so entropy can be injected over\r\n// time by calling seedrandom with explicit data repeatedly.\r\n//\r\n// On speed - This javascript implementation of math.random() is about\r\n// 3-10x slower than the built-in Math.random() because it is not native\r\n// code, but this is typically fast enough anyway.  Seeding is more expensive,\r\n// especially if you use auto-seeding.  Some details (timings on Chrome 4):\r\n//\r\n// Our math.random()            - avg less than 0.002 milliseconds per call\r\n// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\r\n// seedrandom('explicit', true) - avg less than 2 milliseconds per call\r\n// seedrandom()                 - avg about 38 milliseconds per call\r\n//\r\n// LICENSE (BSD):\r\n//\r\n// Copyright 2010 David Bau, all rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//   1. Redistributions of source code must retain the above copyright\r\n//      notice, this list of conditions and the following disclaimer.\r\n//\r\n//   2. Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//   3. Neither the name of this module nor the names of its contributors may\r\n//      be used to endorse or promote products derived from this software\r\n//      without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\nimport { ByteArray } from './type'\r\n\r\nconst pool: number[] = [] // pool: entropy pool starts empty\r\nconst width = 256 // width: each RC4 output is 0 <= x < 256\r\nconst chunks = 6 // chunks: at least six RC4 outputs for each double\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nconst significance = Math.pow(2, 52) // significance: there are 52 significant digits in a double\r\nconst overflow = significance * 2\r\nconst startdenom = Math.pow(width, chunks)\r\n\r\nexport const math = {\r\n  //\r\n  // seedrandom()\r\n  // This is the seedrandom function described above.\r\n  //\r\n  seedrandom(seed: string, use_entropy = false): string {\r\n    const key: number[] = []\r\n\r\n    // Flatten the seed string or build one from local entropy if needed.\r\n    seed = mixkey(\r\n      flatten(\r\n        use_entropy\r\n          ? [seed, pool]\r\n          : arguments.length\r\n          ? seed\r\n          : [new Date().getTime(), pool],\r\n        3,\r\n      ),\r\n      key,\r\n    )\r\n\r\n    // Use the seed to initialize an ARC4 generator.\r\n    const arc4 = new ARC4(key)\r\n\r\n    // Mix the randomness into accumulated entropy.\r\n    mixkey(arc4.S, pool)\r\n\r\n    // Override math.random\r\n    // This function returns a random double in [0, 1) that contains\r\n    // randomness in every bit of the mantissa of the IEEE 754 value.\r\n    math.random = function (): number {\r\n      // Closure to return a random double:\r\n      let n = arc4.g(chunks) // Start with a numerator n < 2 ^ 48\r\n      let d = startdenom //   and denominator d = 2 ^ 48.\r\n      let x = 0 //   and no 'extra last byte'.\r\n      while (n < significance) {\r\n        // Fill up all significant digits by\r\n        n = (n + x) * width //   shifting numerator and\r\n        d *= width //   denominator and generating a\r\n        x = arc4.g(1) //   new least-significant-byte.\r\n      }\r\n      while (n >= overflow) {\r\n        // To avoid rounding up, before adding\r\n        n /= 2 //   last byte, shift everything\r\n        d /= 2 //   right using integer math until\r\n        x >>>= 1 //   we have exactly the desired bits.\r\n      }\r\n      return (n + x) / d // Form the number within [0, 1).\r\n    }\r\n\r\n    // Return the seed that was used\r\n    return seed\r\n  },\r\n\r\n  random: function (): number {\r\n    return Math.random()\r\n  },\r\n}\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nclass ARC4 {\r\n  i = 0\r\n  j = 0\r\n  S: number[] = []\r\n  c: number[] = []\r\n\r\n  constructor(key: number[]) {\r\n    let t,\r\n      u,\r\n      keylen = key.length\r\n    let i = 0,\r\n      j = 0\r\n\r\n    // The empty key [] is treated as [0].\r\n    if (!keylen) {\r\n      key = [keylen++]\r\n    }\r\n\r\n    // Set up S using the standard key scheduling algorithm.\r\n    while (i < width) {\r\n      this.S[i] = i++\r\n    }\r\n    for (i = 0; i < width; i++) {\r\n      t = this.S[i]\r\n      j = lowbits(j + t + key[i % keylen])\r\n      u = this.S[j]\r\n      this.S[i] = u\r\n      this.S[j] = t\r\n    }\r\n\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n    this.g(width)\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  g(count: number): number {\r\n    const s = this.S\r\n    let i = lowbits(this.i + 1)\r\n    let t = s[i]\r\n    let j = lowbits(this.j + t)\r\n    let u = s[j]\r\n    s[i] = u\r\n    s[j] = t\r\n    let r = s[lowbits(t + u)]\r\n    while (--count) {\r\n      i = lowbits(i + 1)\r\n      t = s[i]\r\n      j = lowbits(j + t)\r\n      u = s[j]\r\n      s[i] = u\r\n      s[j] = t\r\n      r = r * width + s[lowbits(t + u)]\r\n    }\r\n    this.i = i\r\n    this.j = j\r\n    return r\r\n  }\r\n}\r\n\r\ntype NestedStrArray = (string | NestedStrArray)[]\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\n/** @param {Object=} result\r\n * @param {string=} prop\r\n * @param {string=} typ */\r\nfunction flatten(obj: unknown, depth: number): NestedStrArray | string {\r\n  const result: NestedStrArray = []\r\n  const typ = typeof obj\r\n  if (depth && typ === 'object') {\r\n    for (const prop in obj as Record<string, unknown>) {\r\n      if (prop.indexOf('S') < 5) {\r\n        // Avoid FF3 bug (local/sessionStorage)\r\n        try {\r\n          result.push(\r\n            flatten((obj as Record<string, unknown>)[prop], depth - 1),\r\n          )\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return result.length ? result : obj + (typ !== 'string' ? '\\0' : '')\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\n/** @param {number=} smear\r\n * @param {number=} j */\r\nfunction mixkey(seed: unknown, key: number[]): string {\r\n  const seedStr = seed + '' // Ensure the seed is a string\r\n  let smear = 0\r\n  for (let i = 0; i < seedStr.length; i++) {\r\n    key[lowbits(i)] = lowbits(\r\n      (smear ^= key[lowbits(i)] * 19) + seedStr.charCodeAt(i),\r\n    )\r\n  }\r\n  let mixed = ''\r\n  key.forEach((v) => (mixed += String.fromCharCode(v)))\r\n  return mixed\r\n}\r\n\r\n//\r\n// lowbits()\r\n// A quick \"n mod width\" for width a power of 2.\r\n//\r\nfunction lowbits(n: number): number {\r\n  return n & (width - 1)\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool)\r\n\r\n// This is not really a random number generator object, and two SeededRandom\r\n// objects will conflict with one another, but it's good enough for generating\r\n// the rsa key.\r\nexport class SeededRandom {\r\n  nextBytes(ba: number[]): void {\r\n    for (let i = 0; i < ba.length; i++) {\r\n      ba[i] = Math.floor(math.random() * 256)\r\n    }\r\n  }\r\n}\r\n\r\n// prng4.js - uses Arcfour as a PRNG\r\nclass Arcfour {\r\n  i = 0\r\n  j = 0\r\n  S: number[] = []\r\n\r\n  // Initialize arcfour context from key, an array of ints, each from [0..255]\r\n  init(key: number[]): void {\r\n    let i, j, t\r\n    for (i = 0; i < 256; ++i) this.S[i] = i\r\n    j = 0\r\n    for (i = 0; i < 256; ++i) {\r\n      j = (j + this.S[i] + key[i % key.length]) & 255\r\n      t = this.S[i]\r\n      this.S[i] = this.S[j]\r\n      this.S[j] = t\r\n    }\r\n    this.i = 0\r\n    this.j = 0\r\n  }\r\n\r\n  next(): number {\r\n    this.i = (this.i + 1) & 255\r\n    this.j = (this.j + this.S[this.i]) & 255\r\n    const t = this.S[this.i]\r\n    this.S[this.i] = this.S[this.j]\r\n    this.S[this.j] = t\r\n    return this.S[(t + this.S[this.i]) & 255]\r\n  }\r\n}\r\n\r\n// Plug in your RNG constructor here\r\nfunction prng_newstate(): Arcfour {\r\n  return new Arcfour()\r\n}\r\n\r\n// Pool size must be a multiple of 4 and greater than 32.\r\n// An array of bytes the size of the pool will be passed to init()\r\nconst rng_psize = 256\r\n\r\n// Random number generator - requires a PRNG backend, e.g. prng4.js\r\n\r\n// For best results, put code like\r\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\r\n// in your main HTML document.\r\n\r\nlet rng_state: Arcfour\r\nlet rng_pool: number[] = []\r\nlet rng_pptr: number\r\n\r\n// Mix in a 32-bit integer into the pool\r\nfunction rng_seed_int(x: number): void {\r\n  rng_pool[rng_pptr++] ^= x & 255\r\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255\r\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255\r\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255\r\n  if (rng_pptr >= rng_psize) rng_pptr -= rng_psize\r\n}\r\n\r\n// Mix in the current time (w/milliseconds) into the pool\r\nfunction rng_seed_time(): void {\r\n  rng_seed_int(new Date().getTime())\r\n}\r\n\r\n// Initialize the pool with junk if needed.\r\nif (!rng_pool) {\r\n  rng_pool = []\r\n  rng_pptr = 0\r\n  let t\r\n  while (rng_pptr < rng_psize) {\r\n    // extract some randomness from Math.random()\r\n    t = Math.floor(65536 * Math.random())\r\n    rng_pool[rng_pptr++] = t >>> 8\r\n    rng_pool[rng_pptr++] = t & 255\r\n  }\r\n  rng_pptr = 0\r\n  rng_seed_time()\r\n  //rng_seed_int(window.screenX);\r\n  //rng_seed_int(window.screenY);\r\n}\r\n\r\nfunction rng_get_byte(): number {\r\n  if (!rng_state) {\r\n    rng_seed_time()\r\n    rng_state = prng_newstate()\r\n    rng_state.init(rng_pool)\r\n    for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\r\n      rng_pool[rng_pptr] = 0\r\n    rng_pptr = 0\r\n    //rng_pool = null;\r\n  }\r\n  // TODO: allow reseeding after first request\r\n  return rng_state.next()\r\n}\r\n\r\nexport class SecureRandom {\r\n  nextBytes(ba: ByteArray): void {\r\n    let i\r\n    for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte()\r\n  }\r\n}\r\n","// Copyright (c) 2005  Tom Wu\r\n// All Rights Reserved.\r\n// See \"LICENSE\" for details.\r\n// Basic JavaScript BN library - subset useful for RSA encryption.\r\n\r\n// (public) Constructor\r\n\r\nimport { math, SeededRandom } from './random'\r\nimport { ByteArray } from './type'\r\n\r\nexport type Op = (x: number, y: number) => number\r\nexport const op_and: Op = (x, y) => x & y\r\nexport const op_or: Op = (x, y) => x | y\r\nexport const op_xor: Op = (x, y) => x ^ y\r\nexport const op_andnot: Op = (x, y) => x & ~y\r\n\r\nconst dbits = 30\r\nconst BI_FP = 52\r\n\r\nexport class BigInteger {\r\n  static DB = dbits\r\n  static DM = (1 << dbits) - 1\r\n  static DV = 1 << dbits\r\n  static FV = Math.pow(2, BI_FP)\r\n  static F1 = BI_FP - dbits\r\n  static F2 = 2 * dbits - BI_FP\r\n  // \"constants\"\r\n  static ZERO = new BigInteger(0)\r\n  static ONE = new BigInteger(1)\r\n\r\n  // FIXME: ;\r\n  s = 0\r\n  t = 0;\r\n  [k: number]: number\r\n\r\n  constructor(\r\n    a?: number | string | number[],\r\n    b?: number | SeededRandom,\r\n    c?: number | SeededRandom,\r\n  ) {\r\n    if (a) {\r\n      if ('number' === typeof a) {\r\n        if (b) {\r\n          this.fromNumber(a, b, c as number)\r\n        } else {\r\n          // return bigint initialized to value\r\n          this.fromInt(a)\r\n        }\r\n      } else {\r\n        this.fromString(a, (b as number) || 256)\r\n      }\r\n    }\r\n  }\r\n\r\n  // am avoids a big mult-and-extract completely.\r\n  // Max digit bits should be <= 30 because we do bitwise ops\r\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\r\n  am(\r\n    i: number,\r\n    x: number,\r\n    w: BigInteger,\r\n    j: number,\r\n    c: number,\r\n    n: number,\r\n  ): number {\r\n    const xl = x & 0x7fff,\r\n      xh = x >> 15\r\n    while (--n >= 0) {\r\n      let l = this[i] & 0x7fff\r\n      const h = this[i++] >> 15\r\n      const m = xh * l + h * xl\r\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)\r\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)\r\n      w[j++] = l & 0x3fffffff\r\n    }\r\n    return c\r\n  }\r\n\r\n  // copy this to r\r\n  copyTo(r: BigInteger): void {\r\n    for (let i = this.t - 1; i >= 0; --i) r[i] = this[i]\r\n    r.t = this.t\r\n    r.s = this.s\r\n  }\r\n\r\n  // set from integer value x, -DV <= x < DV\r\n  fromInt(x: number): void {\r\n    this.t = 1\r\n    this.s = x < 0 ? -1 : 0\r\n    if (x > 0) this[0] = x\r\n    else if (x < -1) this[0] = x + BigInteger.DV\r\n    else this.t = 0\r\n  }\r\n\r\n  // set from string and radix\r\n  fromString(s: string | number[], b: number): void {\r\n    let k\r\n    if (b === 16) k = 4\r\n    else if (b === 8) k = 3\r\n    else if (b === 256) k = 8\r\n    // byte array\r\n    else if (b === 2) k = 1\r\n    else if (b === 32) k = 5\r\n    else if (b === 4) k = 2\r\n    else {\r\n      this.fromRadix(s as string, b)\r\n      return\r\n    }\r\n    this.t = 0\r\n    this.s = 0\r\n    let i = s.length,\r\n      mi = false,\r\n      sh = 0\r\n    while (--i >= 0) {\r\n      const x = k === 8 ? (s[i] as number & 0xff) : intAt(s as string, i)\r\n      if (x < 0) {\r\n        if ((s as string).charAt(i) === '-') mi = true\r\n        continue\r\n      }\r\n      mi = false\r\n      if (sh === 0) this[this.t++] = x\r\n      else if (sh + k > BigInteger.DB) {\r\n        this[this.t - 1] |= (x & ((1 << (BigInteger.DB - sh)) - 1)) << sh\r\n        this[this.t++] = x >> (BigInteger.DB - sh)\r\n      } else this[this.t - 1] |= x << sh\r\n      sh += k\r\n      if (sh >= BigInteger.DB) sh -= BigInteger.DB\r\n    }\r\n    if (k === 8 && ((s[0] as number) & 0x80) !== 0) {\r\n      this.s = -1\r\n      if (sh > 0) this[this.t - 1] |= ((1 << (BigInteger.DB - sh)) - 1) << sh\r\n    }\r\n    this.clamp()\r\n    if (mi) BigInteger.ZERO.subTo(this, this)\r\n  }\r\n\r\n  // clamp off excess high words\r\n  clamp(): void {\r\n    const c = this.s & BigInteger.DM\r\n    while (this.t > 0 && this[this.t - 1] === c) --this.t\r\n  }\r\n\r\n  // return string representation in given radix (default to 16)\r\n  toString(b = 16): string {\r\n    if (this.s < 0) return '-' + this.negate().toString(b)\r\n    let k\r\n    if (b === 16) k = 4\r\n    else if (b === 8) k = 3\r\n    else if (b === 2) k = 1\r\n    else if (b === 32) k = 5\r\n    else if (b === 64) k = 6\r\n    else if (b === 4) k = 2\r\n    else return this.toRadix(b)\r\n    const km = (1 << k) - 1\r\n    let d,\r\n      m = false,\r\n      r = '',\r\n      i = this.t\r\n    let p = BigInteger.DB - ((i * BigInteger.DB) % k)\r\n    if (i-- > 0) {\r\n      if (p < BigInteger.DB && (d = this[i] >> p) > 0) {\r\n        m = true\r\n        r = int2char(d)\r\n      }\r\n      while (i >= 0) {\r\n        if (p < k) {\r\n          d = (this[i] & ((1 << p) - 1)) << (k - p)\r\n          d |= this[--i] >> (p += BigInteger.DB - k)\r\n        } else {\r\n          d = (this[i] >> (p -= k)) & km\r\n          if (p <= 0) {\r\n            p += BigInteger.DB\r\n            --i\r\n          }\r\n        }\r\n        if (d > 0) m = true\r\n        if (m) r += int2char(d)\r\n      }\r\n    }\r\n    return m ? r : '0'\r\n  }\r\n\r\n  // -this\r\n  negate(): BigInteger {\r\n    const r = new BigInteger()\r\n    BigInteger.ZERO.subTo(this, r)\r\n    return r\r\n  }\r\n\r\n  // |this|\r\n  abs(): BigInteger {\r\n    return this.s < 0 ? this.negate() : this\r\n  }\r\n\r\n  // return + if this > a, - if this < a, 0 if equal\r\n  compareTo(a: BigInteger): number {\r\n    let r = this.s - a.s\r\n    if (r !== 0) return r\r\n    let i = this.t\r\n    r = i - a.t\r\n    if (r !== 0) return r\r\n    while (--i >= 0) if ((r = this[i] - a[i]) !== 0) return r\r\n    return 0\r\n  }\r\n\r\n  // return the number of bits in \"this\"\r\n  bitLength(): number {\r\n    if (this.t <= 0) return 0\r\n    return (\r\n      BigInteger.DB * (this.t - 1) +\r\n      nbits(this[this.t - 1] ^ (this.s & BigInteger.DM))\r\n    )\r\n  }\r\n\r\n  // r = this << n*DB\r\n  dlShiftTo(n: number, r: BigInteger): void {\r\n    let i\r\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]\r\n    for (i = n - 1; i >= 0; --i) r[i] = 0\r\n    r.t = this.t + n\r\n    r.s = this.s\r\n  }\r\n\r\n  // r = this >> n*DB\r\n  drShiftTo(n: number, r: BigInteger): void {\r\n    for (let i = n; i < this.t; ++i) r[i - n] = this[i]\r\n    r.t = Math.max(this.t - n, 0)\r\n    r.s = this.s\r\n  }\r\n\r\n  // r = this << n\r\n  lShiftTo(n: number, r: BigInteger): void {\r\n    const bs = n % BigInteger.DB\r\n    const cbs = BigInteger.DB - bs\r\n    const bm = (1 << cbs) - 1\r\n    const ds = Math.floor(n / BigInteger.DB)\r\n    let c = (this.s << bs) & BigInteger.DM,\r\n      i\r\n    for (i = this.t - 1; i >= 0; --i) {\r\n      r[i + ds + 1] = (this[i] >> cbs) | c\r\n      c = (this[i] & bm) << bs\r\n    }\r\n    for (i = ds - 1; i >= 0; --i) r[i] = 0\r\n    r[ds] = c\r\n    r.t = this.t + ds + 1\r\n    r.s = this.s\r\n    r.clamp()\r\n  }\r\n\r\n  // r = this >> n\r\n  rShiftTo(n: number, r: BigInteger): void {\r\n    r.s = this.s\r\n    const ds = Math.floor(n / BigInteger.DB)\r\n    if (ds >= this.t) {\r\n      r.t = 0\r\n      return\r\n    }\r\n    const bs = n % BigInteger.DB\r\n    const cbs = BigInteger.DB - bs\r\n    const bm = (1 << bs) - 1\r\n    r[0] = this[ds] >> bs\r\n    for (let i = ds + 1; i < this.t; ++i) {\r\n      r[i - ds - 1] |= (this[i] & bm) << cbs\r\n      r[i - ds] = this[i] >> bs\r\n    }\r\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs\r\n    r.t = this.t - ds\r\n    r.clamp()\r\n  }\r\n\r\n  // r = this - a\r\n  subTo(a: BigInteger, r: BigInteger): void {\r\n    const m = Math.min(a.t, this.t)\r\n    let i = 0,\r\n      c = 0\r\n    while (i < m) {\r\n      c += this[i] - a[i]\r\n      r[i++] = c & BigInteger.DM\r\n      c >>= BigInteger.DB\r\n    }\r\n    if (a.t < this.t) {\r\n      c -= a.s\r\n      while (i < this.t) {\r\n        c += this[i]\r\n        r[i++] = c & BigInteger.DM\r\n        c >>= BigInteger.DB\r\n      }\r\n      c += this.s\r\n    } else {\r\n      c += this.s\r\n      while (i < a.t) {\r\n        c -= a[i]\r\n        r[i++] = c & BigInteger.DM\r\n        c >>= BigInteger.DB\r\n      }\r\n      c -= a.s\r\n    }\r\n    r.s = c < 0 ? -1 : 0\r\n    if (c < -1) r[i++] = BigInteger.DV + c\r\n    else if (c > 0) r[i++] = c\r\n    r.t = i\r\n    r.clamp()\r\n  }\r\n\r\n  // r = this * a, r !== this,a (HAC 14.12)\r\n  // \"this\" should be the larger one if appropriate.\r\n  multiplyTo(a: BigInteger, r: BigInteger): void {\r\n    const x = this.abs(),\r\n      y = a.abs()\r\n    let i = x.t\r\n    r.t = i + y.t\r\n    while (--i >= 0) r[i] = 0\r\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)\r\n    r.s = 0\r\n    r.clamp()\r\n    if (this.s !== a.s) BigInteger.ZERO.subTo(r, r)\r\n  }\r\n\r\n  // r = this^2, r !== this (HAC 14.16)\r\n  squareTo(r: BigInteger): void {\r\n    const x = this.abs()\r\n    let i = (r.t = 2 * x.t)\r\n    while (--i >= 0) r[i] = 0\r\n    for (i = 0; i < x.t - 1; ++i) {\r\n      const c = x.am(i, x[i], r, 2 * i, 0, 1)\r\n      if (\r\n        (r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >=\r\n        BigInteger.DV\r\n      ) {\r\n        r[i + x.t] -= BigInteger.DV\r\n        r[i + x.t + 1] = 1\r\n      }\r\n    }\r\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)\r\n    r.s = 0\r\n    r.clamp()\r\n  }\r\n\r\n  // divide this by m, quotient and remainder to q, r (HAC 14.20)\r\n  // r !== q, this !== m.  q or r may be null.\r\n  divRemTo(m: BigInteger, q?: BigInteger, r?: BigInteger): void {\r\n    const pm = m.abs()\r\n    if (pm.t <= 0) return\r\n    const pt = this.abs()\r\n    if (pt.t < pm.t) {\r\n      if (q) q.fromInt(0)\r\n      if (r) this.copyTo(r)\r\n      return\r\n    }\r\n    if (!r) r = new BigInteger()\r\n    const y = new BigInteger(),\r\n      ts = this.s,\r\n      ms = m.s\r\n    const nsh = BigInteger.DB - nbits(pm[pm.t - 1]) // normalize modulus\r\n    if (nsh > 0) {\r\n      pm.lShiftTo(nsh, y)\r\n      pt.lShiftTo(nsh, r)\r\n    } else {\r\n      pm.copyTo(y)\r\n      pt.copyTo(r)\r\n    }\r\n    const ys = y.t\r\n    const y0 = y[ys - 1]\r\n    if (y0 === 0) return\r\n    const yt =\r\n      y0 * (1 << BigInteger.F1) + (ys > 1 ? y[ys - 2] >> BigInteger.F2 : 0)\r\n    const d1 = BigInteger.FV / yt,\r\n      d2 = (1 << BigInteger.F1) / yt,\r\n      e = 1 << BigInteger.F2,\r\n      t = q || new BigInteger()\r\n    let i = r.t,\r\n      j = i - ys\r\n    y.dlShiftTo(j, t)\r\n    if (r.compareTo(t) >= 0) {\r\n      r[r.t++] = 1\r\n      r.subTo(t, r)\r\n    }\r\n    BigInteger.ONE.dlShiftTo(ys, t)\r\n    t.subTo(y, y) // \"negative\" y so we can replace sub with am later\r\n    while (y.t < ys) y[y.t++] = 0\r\n    while (--j >= 0) {\r\n      // Estimate quotient digit\r\n      let qd =\r\n        r[--i] === y0\r\n          ? BigInteger.DM\r\n          : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)\r\n      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\r\n        // Try it out\r\n        y.dlShiftTo(j, t)\r\n        r.subTo(t, r)\r\n        while (r[i] < --qd) r.subTo(t, r)\r\n      }\r\n    }\r\n    if (q) {\r\n      r.drShiftTo(ys, q)\r\n      if (ts !== ms) BigInteger.ZERO.subTo(q, q)\r\n    }\r\n    r.t = ys\r\n    r.clamp()\r\n    if (nsh > 0) r.rShiftTo(nsh, r) // Denormalize remainder\r\n    if (ts < 0) BigInteger.ZERO.subTo(r, r)\r\n  }\r\n\r\n  // this mod a\r\n  mod(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.abs().divRemTo(a, undefined, r)\r\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)\r\n    return r\r\n  }\r\n\r\n  // return \"-1/this % 2^DB\"; useful for Mont. reduction\r\n  // justification:\r\n  //         xy === 1 (mod m)\r\n  //         xy =  1+km\r\n  //   xy(2-xy) = (1+km)(1-km)\r\n  // x[y(2-xy)] = 1-k^2m^2\r\n  // x[y(2-xy)] === 1 (mod m^2)\r\n  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\r\n  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\r\n  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\r\n  invDigit(): number {\r\n    if (this.t < 1) return 0\r\n    const x = this[0]\r\n    if ((x & 1) === 0) return 0\r\n    let y = x & 3 // y === 1/x mod 2^2\r\n    y = (y * (2 - (x & 0xf) * y)) & 0xf // y === 1/x mod 2^4\r\n    y = (y * (2 - (x & 0xff) * y)) & 0xff // y === 1/x mod 2^8\r\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff // y === 1/x mod 2^16\r\n    // last step - calculate inverse mod DV directly;\r\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\r\n    y = (y * (2 - ((x * y) % BigInteger.DV))) % BigInteger.DV // y === 1/x mod 2^dbits\r\n    // we really want the negative inverse, and -DV < y < DV\r\n    return y > 0 ? BigInteger.DV - y : -y\r\n  }\r\n\r\n  // true iff this is even\r\n  isEven(): boolean {\r\n    return (this.t > 0 ? this[0] & 1 : this.s) === 0\r\n  }\r\n\r\n  // this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\r\n  exp(e: number, z: Reducer): BigInteger {\r\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE\r\n    const g = z.convert(this)\r\n    let r = new BigInteger(),\r\n      r2 = new BigInteger(),\r\n      i = nbits(e) - 1\r\n    g.copyTo(r)\r\n    while (--i >= 0) {\r\n      z.sqrTo(r, r2)\r\n      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)\r\n      else {\r\n        const t = r\r\n        r = r2\r\n        r2 = t\r\n      }\r\n    }\r\n    return z.revert(r)\r\n  }\r\n\r\n  // this^e % m, 0 <= e < 2^32\r\n  modPowInt(e: number, m: BigInteger): BigInteger {\r\n    let z\r\n    if (e < 256 || m.isEven()) z = new Classic(m)\r\n    else z = new Montgomery(m)\r\n    return this.exp(e, z)\r\n  }\r\n\r\n  clone(): BigInteger {\r\n    const r = new BigInteger()\r\n    this.copyTo(r)\r\n    return r\r\n  }\r\n\r\n  // return value as integer\r\n  intValue(): number {\r\n    if (this.s < 0) {\r\n      if (this.t === 1) return this[0] - BigInteger.DV\r\n      else if (this.t === 0) return -1\r\n    } else if (this.t === 1) return this[0]\r\n    else if (this.t === 0) return 0\r\n    // assumes 16 < DB < 32\r\n    return (\r\n      ((this[1] & ((1 << (32 - BigInteger.DB)) - 1)) << BigInteger.DB) | this[0]\r\n    )\r\n  }\r\n\r\n  // return value as byte\r\n  byteValue(): number {\r\n    return this.t === 0 ? this.s : (this[0] << 24) >> 24\r\n  }\r\n\r\n  // return value as short (assumes DB>=16)\r\n  shortValue(): number {\r\n    return this.t === 0 ? this.s : (this[0] << 16) >> 16\r\n  }\r\n\r\n  // return x s.t. r^x < DV\r\n  chunkSize(r: number): number {\r\n    return Math.floor((Math.LN2 * BigInteger.DB) / Math.log(r))\r\n  }\r\n\r\n  // 0 if this === 0, 1 if this > 0, -1 if this < 0\r\n  signum(): -1 | 0 | 1 {\r\n    if (this.s < 0) return -1\r\n    else if (this.t <= 0 || (this.t === 1 && this[0] <= 0)) return 0\r\n    else return 1\r\n  }\r\n\r\n  // convert to radix string\r\n  toRadix(b: number): string {\r\n    if (!b) b = 10\r\n    if (this.signum() === 0 || b < 2 || b > 36) return '0'\r\n    const cs = this.chunkSize(b)\r\n    const a = Math.pow(b, cs)\r\n    const d = new BigInteger(a),\r\n      y = new BigInteger(),\r\n      z = new BigInteger()\r\n    let r = ''\r\n    this.divRemTo(d, y, z)\r\n    while (y.signum() > 0) {\r\n      r = (a + z.intValue()).toString(b).substr(1) + r\r\n      y.divRemTo(d, y, z)\r\n    }\r\n    return z.intValue().toString(b) + r\r\n  }\r\n\r\n  // convert from radix string\r\n  fromRadix(s: string, b: number): void {\r\n    this.fromInt(0)\r\n    if (!b) b = 10\r\n    const cs = this.chunkSize(b)\r\n    const d = Math.pow(b, cs)\r\n    let mi = false,\r\n      j = 0,\r\n      w = 0\r\n    for (let i = 0; i < s.length; ++i) {\r\n      const x = intAt(s, i)\r\n      if (x < 0) {\r\n        if (s.charAt(i) === '-' && this.signum() === 0) mi = true\r\n        continue\r\n      }\r\n      w = b * w + x\r\n      if (++j >= cs) {\r\n        this.dMultiply(d)\r\n        this.dAddOffset(w, 0)\r\n        j = 0\r\n        w = 0\r\n      }\r\n    }\r\n    if (j > 0) {\r\n      this.dMultiply(Math.pow(b, j))\r\n      this.dAddOffset(w, 0)\r\n    }\r\n    if (mi) BigInteger.ZERO.subTo(this, this)\r\n  }\r\n\r\n  // alternate constructor\r\n  fromNumber(a: number, b: number | SeededRandom, c?: number): void {\r\n    if ('number' === typeof b) {\r\n      // new BigInteger(int,int,RNG)\r\n      if (a < 2) this.fromInt(1)\r\n      else {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.fromNumber(a, c!)\r\n        if (!this.testBit(a - 1))\r\n          // force MSB set\r\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this)\r\n        if (this.isEven()) this.dAddOffset(1, 0) // force odd\r\n        while (!this.isProbablePrime(b)) {\r\n          this.dAddOffset(2, 0)\r\n          if (this.bitLength() > a)\r\n            this.subTo(BigInteger.ONE.shiftLeft(a - 1), this)\r\n        }\r\n      }\r\n    } else {\r\n      // new BigInteger(int,RNG)\r\n      const x: number[] = [],\r\n        t = a & 7\r\n      x.length = (a >> 3) + 1\r\n      b.nextBytes(x)\r\n      if (t > 0) x[0] &= (1 << t) - 1\r\n      else x[0] = 0\r\n      this.fromString(x, 256)\r\n    }\r\n  }\r\n\r\n  // convert to bigendian byte array\r\n  toByteArray(): ByteArray {\r\n    const r = []\r\n    let i = this.t\r\n    r[0] = this.s\r\n    let p = BigInteger.DB - ((i * BigInteger.DB) % 8),\r\n      d,\r\n      k = 0\r\n    if (i-- > 0) {\r\n      if (\r\n        p < BigInteger.DB &&\r\n        (d = this[i] >> p) !== (this.s & BigInteger.DM) >> p\r\n      )\r\n        r[k++] = d | (this.s << (BigInteger.DB - p))\r\n      while (i >= 0) {\r\n        if (p < 8) {\r\n          d = (this[i] & ((1 << p) - 1)) << (8 - p)\r\n          d |= this[--i] >> (p += BigInteger.DB - 8)\r\n        } else {\r\n          d = (this[i] >> (p -= 8)) & 0xff\r\n          if (p <= 0) {\r\n            p += BigInteger.DB\r\n            --i\r\n          }\r\n        }\r\n        if ((d & 0x80) !== 0) d |= -256\r\n        if (k === 0 && (this.s & 0x80) !== (d & 0x80)) ++k\r\n        if (k > 0 || d !== this.s) r[k++] = d\r\n      }\r\n    }\r\n    return r\r\n  }\r\n\r\n  equals(a: BigInteger): boolean {\r\n    return this.compareTo(a) === 0\r\n  }\r\n\r\n  min(a: BigInteger): BigInteger {\r\n    return this.compareTo(a) < 0 ? this : a\r\n  }\r\n\r\n  max(a: BigInteger): BigInteger {\r\n    return this.compareTo(a) > 0 ? this : a\r\n  }\r\n\r\n  // r = this op a (bitwise)\r\n  bitwiseTo(a: BigInteger, op: Op, r: BigInteger): void {\r\n    const m = Math.min(a.t, this.t)\r\n    let f\r\n    for (let i = 0; i < m; ++i) r[i] = op(this[i], a[i])\r\n    if (a.t < this.t) {\r\n      f = a.s & BigInteger.DM\r\n      for (let i = m; i < this.t; ++i) r[i] = op(this[i], f)\r\n      r.t = this.t\r\n    } else {\r\n      f = this.s & BigInteger.DM\r\n      for (let i = m; i < a.t; ++i) r[i] = op(f, a[i])\r\n      r.t = a.t\r\n    }\r\n    r.s = op(this.s, a.s)\r\n    r.clamp()\r\n  }\r\n\r\n  // this & a\r\n  and(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.bitwiseTo(a, op_and, r)\r\n    return r\r\n  }\r\n\r\n  // this | a\r\n  or(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.bitwiseTo(a, op_or, r)\r\n    return r\r\n  }\r\n\r\n  // this ^ a\r\n  xor(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.bitwiseTo(a, op_xor, r)\r\n    return r\r\n  }\r\n\r\n  // this & ~a\r\n  andNot(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.bitwiseTo(a, op_andnot, r)\r\n    return r\r\n  }\r\n\r\n  // ~this\r\n  not(): BigInteger {\r\n    const r = new BigInteger()\r\n    for (let i = 0; i < this.t; ++i) r[i] = BigInteger.DM & ~this[i]\r\n    r.t = this.t\r\n    r.s = ~this.s\r\n    return r\r\n  }\r\n\r\n  // this << n\r\n  shiftLeft(n: number): BigInteger {\r\n    const r = new BigInteger()\r\n    if (n < 0) this.rShiftTo(-n, r)\r\n    else this.lShiftTo(n, r)\r\n    return r\r\n  }\r\n\r\n  // this >> n\r\n  shiftRight(n: number): BigInteger {\r\n    const r = new BigInteger()\r\n    if (n < 0) this.lShiftTo(-n, r)\r\n    else this.rShiftTo(n, r)\r\n    return r\r\n  }\r\n\r\n  // returns index of lowest 1-bit (or -1 if none)\r\n  getLowestSetBit(): number {\r\n    for (let i = 0; i < this.t; ++i)\r\n      if (this[i] !== 0) return i * BigInteger.DB + lbit(this[i])\r\n    if (this.s < 0) return this.t * BigInteger.DB\r\n    return -1\r\n  }\r\n\r\n  // return number of set bits\r\n  bitCount(): number {\r\n    const x = this.s & BigInteger.DM\r\n    let r = 0\r\n    for (let i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)\r\n    return r\r\n  }\r\n\r\n  // true iff nth bit is set\r\n  testBit(n: number): boolean {\r\n    const j = Math.floor(n / BigInteger.DB)\r\n    if (j >= this.t) return this.s !== 0\r\n    return (this[j] & (1 << n % BigInteger.DB)) !== 0\r\n  }\r\n\r\n  // this op (1<<n)\r\n  changeBit(n: number, op: Op): BigInteger {\r\n    const r = BigInteger.ONE.shiftLeft(n)\r\n    this.bitwiseTo(r, op, r)\r\n    return r\r\n  }\r\n\r\n  // this | (1<<n)\r\n  setBit(n: number): BigInteger {\r\n    return this.changeBit(n, op_or)\r\n  }\r\n\r\n  // this & ~(1<<n)\r\n  clearBit(n: number): BigInteger {\r\n    return this.changeBit(n, op_andnot)\r\n  }\r\n\r\n  // this ^ (1<<n)\r\n  flipBit(n: number): BigInteger {\r\n    return this.changeBit(n, op_xor)\r\n  }\r\n\r\n  // r = this + a\r\n  addTo(a: BigInteger, r: BigInteger): void {\r\n    const m = Math.min(a.t, this.t)\r\n    let i = 0,\r\n      c = 0\r\n    while (i < m) {\r\n      c += this[i] + a[i]\r\n      r[i++] = c & BigInteger.DM\r\n      c >>= BigInteger.DB\r\n    }\r\n    if (a.t < this.t) {\r\n      c += a.s\r\n      while (i < this.t) {\r\n        c += this[i]\r\n        r[i++] = c & BigInteger.DM\r\n        c >>= BigInteger.DB\r\n      }\r\n      c += this.s\r\n    } else {\r\n      c += this.s\r\n      while (i < a.t) {\r\n        c += a[i]\r\n        r[i++] = c & BigInteger.DM\r\n        c >>= BigInteger.DB\r\n      }\r\n      c += a.s\r\n    }\r\n    r.s = c < 0 ? -1 : 0\r\n    if (c > 0) r[i++] = c\r\n    else if (c < -1) r[i++] = BigInteger.DV + c\r\n    r.t = i\r\n    r.clamp()\r\n  }\r\n\r\n  // this + a\r\n  add(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.addTo(a, r)\r\n    return r\r\n  }\r\n\r\n  // this - a\r\n  subtract(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.subTo(a, r)\r\n    return r\r\n  }\r\n\r\n  // this * a\r\n  multiply(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.multiplyTo(a, r)\r\n    return r\r\n  }\r\n\r\n  // JSBN-specific extension\r\n  // this^2\r\n  square(): BigInteger {\r\n    const r = new BigInteger()\r\n    this.squareTo(r)\r\n    return r\r\n  }\r\n\r\n  // this / a\r\n  divide(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.divRemTo(a, r, undefined)\r\n    return r\r\n  }\r\n\r\n  // this % a\r\n  remainder(a: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    this.divRemTo(a, undefined, r)\r\n    return r\r\n  }\r\n\r\n  // [this/a,this%a]\r\n  divideAndRemainder(a: BigInteger): [BigInteger, BigInteger] {\r\n    const q = new BigInteger(),\r\n      r = new BigInteger()\r\n    this.divRemTo(a, q, r)\r\n    return [q, r]\r\n  }\r\n\r\n  // this *= n, this >= 0, 1 < n < DV\r\n  protected dMultiply(n: number): void {\r\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)\r\n    ++this.t\r\n    this.clamp()\r\n  }\r\n\r\n  // this += n << w words, this >= 0\r\n  dAddOffset(n: number, w: number): void {\r\n    if (n === 0) return\r\n    while (this.t <= w) this[this.t++] = 0\r\n    this[w] += n\r\n    while (this[w] >= BigInteger.DV) {\r\n      this[w] -= BigInteger.DV\r\n      if (++w >= this.t) this[this.t++] = 0\r\n      ++this[w]\r\n    }\r\n  }\r\n\r\n  // this^e\r\n  pow(e: number): BigInteger {\r\n    return this.exp(e, new NullExp())\r\n  }\r\n\r\n  // r = lower n words of \"this * a\", a.t <= n\r\n  // \"this\" should be the larger one if appropriate.\r\n  multiplyLowerTo(a: BigInteger, n: number, r: BigInteger): void {\r\n    let i = Math.min(this.t + a.t, n)\r\n    r.s = 0 // assumes a,this >= 0\r\n    r.t = i\r\n    while (i > 0) r[--i] = 0\r\n    let j\r\n    for (j = r.t - this.t; i < j; ++i)\r\n      r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)\r\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)\r\n    r.clamp()\r\n  }\r\n\r\n  // r = \"this * a\" without lower n words, n > 0\r\n  // \"this\" should be the larger one if appropriate.\r\n  multiplyUpperTo(a: BigInteger, n: number, r: BigInteger): void {\r\n    --n\r\n    let i = (r.t = this.t + a.t - n)\r\n    r.s = 0 // assumes a,this >= 0\r\n    while (--i >= 0) r[i] = 0\r\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\r\n      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)\r\n    r.clamp()\r\n    r.drShiftTo(1, r)\r\n  }\r\n\r\n  // this^e % m (HAC 14.85)\r\n  modPow(e: BigInteger, m: BigInteger): BigInteger {\r\n    let i = e.bitLength(),\r\n      k,\r\n      r = new BigInteger(1),\r\n      z\r\n    if (i <= 0) return r\r\n    else if (i < 18) k = 1\r\n    else if (i < 48) k = 3\r\n    else if (i < 144) k = 4\r\n    else if (i < 768) k = 5\r\n    else k = 6\r\n    if (i < 8) z = new Classic(m)\r\n    else if (m.isEven()) z = new Barrett(m)\r\n    else z = new Montgomery(m)\r\n\r\n    // precomputation\r\n    const g: BigInteger[] = [],\r\n      k1 = k - 1,\r\n      km = (1 << k) - 1\r\n    let n = 3\r\n    g[1] = z.convert(this)\r\n    if (k > 1) {\r\n      const g2 = new BigInteger()\r\n      z.sqrTo(g[1], g2)\r\n      while (n <= km) {\r\n        g[n] = new BigInteger()\r\n        z.mulTo(g2, g[n - 2], g[n])\r\n        n += 2\r\n      }\r\n    }\r\n\r\n    let j = e.t - 1,\r\n      w,\r\n      is1 = true,\r\n      r2 = new BigInteger(),\r\n      t\r\n    i = nbits(e[j]) - 1\r\n    while (j >= 0) {\r\n      if (i >= k1) w = (e[j] >> (i - k1)) & km\r\n      else {\r\n        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)\r\n        if (j > 0) w |= e[j - 1] >> (BigInteger.DB + i - k1)\r\n      }\r\n\r\n      n = k\r\n      while ((w & 1) === 0) {\r\n        w >>= 1\r\n        --n\r\n      }\r\n      if ((i -= n) < 0) {\r\n        i += BigInteger.DB\r\n        --j\r\n      }\r\n      if (is1) {\r\n        // ret === 1, don't bother squaring or multiplying it\r\n        g[w].copyTo(r)\r\n        is1 = false\r\n      } else {\r\n        while (n > 1) {\r\n          z.sqrTo(r, r2)\r\n          z.sqrTo(r2, r)\r\n          n -= 2\r\n        }\r\n        if (n > 0) z.sqrTo(r, r2)\r\n        else {\r\n          t = r\r\n          r = r2\r\n          r2 = t\r\n        }\r\n        z.mulTo(r2, g[w], r)\r\n      }\r\n\r\n      while (j >= 0 && (e[j] & (1 << i)) === 0) {\r\n        z.sqrTo(r, r2)\r\n        t = r\r\n        r = r2\r\n        r2 = t\r\n        if (--i < 0) {\r\n          i = BigInteger.DB - 1\r\n          --j\r\n        }\r\n      }\r\n    }\r\n    return z.revert(r)\r\n  }\r\n\r\n  // gcd(this,a) (HAC 14.54)\r\n  gcd(a: BigInteger): BigInteger {\r\n    let x = this.s < 0 ? this.negate() : this.clone()\r\n    let y = a.s < 0 ? a.negate() : a.clone()\r\n    if (x.compareTo(y) < 0) {\r\n      const t = x\r\n      x = y\r\n      y = t\r\n    }\r\n    let i = x.getLowestSetBit(),\r\n      g = y.getLowestSetBit()\r\n    if (g < 0) return x\r\n    if (i < g) g = i\r\n    if (g > 0) {\r\n      x.rShiftTo(g, x)\r\n      y.rShiftTo(g, y)\r\n    }\r\n    while (x.signum() > 0) {\r\n      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)\r\n      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)\r\n      if (x.compareTo(y) >= 0) {\r\n        x.subTo(y, x)\r\n        x.rShiftTo(1, x)\r\n      } else {\r\n        y.subTo(x, y)\r\n        y.rShiftTo(1, y)\r\n      }\r\n    }\r\n    if (g > 0) y.lShiftTo(g, y)\r\n    return y\r\n  }\r\n\r\n  // this % n, n < 2^26\r\n  modInt(n: number): number {\r\n    if (n <= 0) return 0\r\n    const d = BigInteger.DV % n\r\n    let r = this.s < 0 ? n - 1 : 0\r\n    if (this.t > 0)\r\n      if (d === 0) r = this[0] % n\r\n      else for (let i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n\r\n    return r\r\n  }\r\n\r\n  // 1/this % m (HAC 14.61)\r\n  modInverse(m: BigInteger): BigInteger {\r\n    const ac = m.isEven()\r\n    if ((this.isEven() && ac) || m.signum() === 0) return BigInteger.ZERO\r\n    const u = m.clone(),\r\n      v = this.clone()\r\n    const a = new BigInteger(1),\r\n      b = new BigInteger(0),\r\n      c = new BigInteger(0),\r\n      d = new BigInteger(1)\r\n    while (u.signum() !== 0) {\r\n      while (u.isEven()) {\r\n        u.rShiftTo(1, u)\r\n        if (ac) {\r\n          if (!a.isEven() || !b.isEven()) {\r\n            a.addTo(this, a)\r\n            b.subTo(m, b)\r\n          }\r\n          a.rShiftTo(1, a)\r\n        } else if (!b.isEven()) b.subTo(m, b)\r\n        b.rShiftTo(1, b)\r\n      }\r\n      while (v.isEven()) {\r\n        v.rShiftTo(1, v)\r\n        if (ac) {\r\n          if (!c.isEven() || !d.isEven()) {\r\n            c.addTo(this, c)\r\n            d.subTo(m, d)\r\n          }\r\n          c.rShiftTo(1, c)\r\n        } else if (!d.isEven()) d.subTo(m, d)\r\n        d.rShiftTo(1, d)\r\n      }\r\n      if (u.compareTo(v) >= 0) {\r\n        u.subTo(v, u)\r\n        if (ac) a.subTo(c, a)\r\n        b.subTo(d, b)\r\n      } else {\r\n        v.subTo(u, v)\r\n        if (ac) c.subTo(a, c)\r\n        d.subTo(b, d)\r\n      }\r\n    }\r\n    if (v.compareTo(BigInteger.ONE) !== 0) return BigInteger.ZERO\r\n    if (d.compareTo(m) >= 0) return d.subtract(m)\r\n    if (d.signum() < 0) d.addTo(m, d)\r\n    else return d\r\n    if (d.signum() < 0) return d.add(m)\r\n    else return d\r\n  }\r\n\r\n  static lowprimes = [\r\n    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\r\n    73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\r\n    157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\r\n    239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\r\n    331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\r\n    421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\r\n    509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\r\n    613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n    709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\r\n    821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\r\n    919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997,\r\n  ]\r\n  static lplim =\r\n    (1 << 26) / BigInteger.lowprimes[BigInteger.lowprimes.length - 1]\r\n\r\n  // test primality with certainty >= 1-.5^t\r\n  isProbablePrime(t: number): boolean {\r\n    const x = this.abs()\r\n    let i\r\n    if (\r\n      x.t === 1 &&\r\n      x[0] <= BigInteger.lowprimes[BigInteger.lowprimes.length - 1]\r\n    ) {\r\n      for (i = 0; i < BigInteger.lowprimes.length; ++i)\r\n        if (x[0] === BigInteger.lowprimes[i]) return true\r\n      return false\r\n    }\r\n    if (x.isEven()) return false\r\n    i = 1\r\n    while (i < BigInteger.lowprimes.length) {\r\n      let m = BigInteger.lowprimes[i],\r\n        j = i + 1\r\n      while (j < BigInteger.lowprimes.length && m < BigInteger.lplim)\r\n        m *= BigInteger.lowprimes[j++]\r\n      m = x.modInt(m)\r\n      while (i < j) if (m % BigInteger.lowprimes[i++] === 0) return false\r\n    }\r\n    return x.millerRabin(t)\r\n  }\r\n\r\n  // true if probably prime (HAC 4.24, Miller-Rabin)\r\n  millerRabin(t: number): boolean {\r\n    const n1 = this.subtract(BigInteger.ONE)\r\n    const k = n1.getLowestSetBit()\r\n    if (k <= 0) return false\r\n    const r = n1.shiftRight(k)\r\n    t = (t + 1) >> 1\r\n    if (t > BigInteger.lowprimes.length) t = BigInteger.lowprimes.length\r\n    const a = new BigInteger()\r\n    for (let i = 0; i < t; ++i) {\r\n      //Pick bases at random, instead of starting at 2\r\n      a.fromInt(\r\n        BigInteger.lowprimes[\r\n          Math.floor(math.random() * BigInteger.lowprimes.length)\r\n        ],\r\n      )\r\n      let y = a.modPow(r, this)\r\n      if (y.compareTo(BigInteger.ONE) !== 0 && y.compareTo(n1) !== 0) {\r\n        let j = 1\r\n        while (j++ < k && y.compareTo(n1) !== 0) {\r\n          y = y.modPowInt(2, this)\r\n          if (y.compareTo(BigInteger.ONE) === 0) return false\r\n        }\r\n        if (y.compareTo(n1) !== 0) return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\n// Digit conversions\r\nconst BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz'\r\nconst BI_RC: number[] = []\r\nlet rr, vv\r\nrr = '0'.charCodeAt(0)\r\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv\r\nrr = 'a'.charCodeAt(0)\r\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\r\nrr = 'A'.charCodeAt(0)\r\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\r\n\r\nexport function int2char(n: number): string {\r\n  return BI_RM.charAt(n)\r\n}\r\n\r\nfunction intAt(s: string, i: number): number {\r\n  const c = BI_RC[s.charCodeAt(i)]\r\n  return c == null ? -1 : c\r\n}\r\n\r\n// returns bit length of the integer x\r\nfunction nbits(x: number): number {\r\n  let r = 1,\r\n    t\r\n  if ((t = x >>> 16) !== 0) {\r\n    x = t\r\n    r += 16\r\n  }\r\n  if ((t = x >> 8) !== 0) {\r\n    x = t\r\n    r += 8\r\n  }\r\n  if ((t = x >> 4) !== 0) {\r\n    x = t\r\n    r += 4\r\n  }\r\n  if ((t = x >> 2) !== 0) {\r\n    x = t\r\n    r += 2\r\n  }\r\n  if ((t = x >> 1) !== 0) {\r\n    // x = t\r\n    r += 1\r\n  }\r\n  return r\r\n}\r\n\r\ninterface Reducer {\r\n  convert(x: BigInteger): BigInteger\r\n  revert(x: BigInteger): BigInteger\r\n  reduce(x: BigInteger): void\r\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void\r\n  sqrTo(x: BigInteger, r: BigInteger): void\r\n}\r\n\r\n// Modular reduction using \"classic\" algorithm\r\nclass Classic implements Reducer {\r\n  constructor(private readonly m: BigInteger) {}\r\n\r\n  convert(x: BigInteger): BigInteger {\r\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)\r\n    else return x\r\n  }\r\n\r\n  revert(x: BigInteger): BigInteger {\r\n    return x\r\n  }\r\n\r\n  reduce(x: BigInteger): void {\r\n    x.divRemTo(this.m, undefined, x)\r\n  }\r\n\r\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\r\n    x.multiplyTo(y, r)\r\n    this.reduce(r)\r\n  }\r\n\r\n  sqrTo(x: BigInteger, r: BigInteger): void {\r\n    x.squareTo(r)\r\n    this.reduce(r)\r\n  }\r\n}\r\n\r\n// Montgomery reduction\r\nclass Montgomery implements Reducer {\r\n  private readonly m: BigInteger\r\n  private readonly mp: number\r\n  private readonly mpl: number\r\n  private readonly mph: number\r\n  private readonly um: number\r\n  private readonly mt2: number\r\n\r\n  constructor(m: BigInteger) {\r\n    this.m = m\r\n    this.mp = m.invDigit()\r\n    this.mpl = this.mp & 0x7fff\r\n    this.mph = this.mp >> 15\r\n    this.um = (1 << (BigInteger.DB - 15)) - 1\r\n    this.mt2 = 2 * m.t\r\n  }\r\n\r\n  // xR mod m\r\n  convert(x: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    x.abs().dlShiftTo(this.m.t, r)\r\n    r.divRemTo(this.m, undefined, r)\r\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\r\n    return r\r\n  }\r\n\r\n  // x/R mod m\r\n  revert(x: BigInteger): BigInteger {\r\n    const r = new BigInteger()\r\n    x.copyTo(r)\r\n    this.reduce(r)\r\n    return r\r\n  }\r\n\r\n  // x = x/R mod m (HAC 14.32)\r\n  reduce(x: BigInteger): void {\r\n    while (x.t <= this.mt2)\r\n      // pad x so am has enough room later\r\n      x[x.t++] = 0\r\n    for (let i = 0; i < this.m.t; ++i) {\r\n      // faster way of calculating u0 = x[i]*mp mod DV\r\n      let j = x[i] & 0x7fff\r\n      const u0 =\r\n        (j * this.mpl +\r\n          (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) &\r\n        BigInteger.DM\r\n      // use am to combine the multiply-shift-add into one call\r\n      j = i + this.m.t\r\n      x[j] += this.m.am(0, u0, x, i, 0, this.m.t)\r\n      // propagate carry\r\n      while (x[j] >= BigInteger.DV) {\r\n        x[j] -= BigInteger.DV\r\n        x[++j]++\r\n      }\r\n    }\r\n    x.clamp()\r\n    x.drShiftTo(this.m.t, x)\r\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)\r\n  }\r\n\r\n  // r = \"x^2/R mod m\"; x !== r\r\n  sqrTo(x: BigInteger, r: BigInteger): void {\r\n    x.squareTo(r)\r\n    this.reduce(r)\r\n  }\r\n\r\n  // r = \"xy/R mod m\"; x,y !== r\r\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\r\n    x.multiplyTo(y, r)\r\n    this.reduce(r)\r\n  }\r\n}\r\n\r\n// return index of lowest 1-bit in x, x < 2^31\r\nfunction lbit(x: number): number {\r\n  if (x === 0) return -1\r\n  let r = 0\r\n  if ((x & 0xffff) === 0) {\r\n    x >>= 16\r\n    r += 16\r\n  }\r\n  if ((x & 0xff) === 0) {\r\n    x >>= 8\r\n    r += 8\r\n  }\r\n  if ((x & 0xf) === 0) {\r\n    x >>= 4\r\n    r += 4\r\n  }\r\n  if ((x & 3) === 0) {\r\n    x >>= 2\r\n    r += 2\r\n  }\r\n  if ((x & 1) === 0) ++r\r\n  return r\r\n}\r\n\r\n// return number of 1 bits in x\r\nfunction cbit(x: number): number {\r\n  let r = 0\r\n  while (x !== 0) {\r\n    x &= x - 1\r\n    ++r\r\n  }\r\n  return r\r\n}\r\n\r\n// A \"null\" reducer\r\nclass NullExp implements Reducer {\r\n  convert = nNop\r\n  revert = nNop\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  reduce = (): void => {}\r\n\r\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\r\n    x.multiplyTo(y, r)\r\n  }\r\n\r\n  sqrTo(x: BigInteger, r: BigInteger): void {\r\n    x.squareTo(r)\r\n  }\r\n}\r\n\r\nfunction nNop(x: BigInteger): BigInteger {\r\n  return x\r\n}\r\n\r\n// Barrett modular reduction\r\n\r\nclass Barrett implements Reducer {\r\n  private readonly r2: BigInteger\r\n  private readonly q3: BigInteger\r\n  private readonly mu: BigInteger\r\n  private readonly m: BigInteger\r\n\r\n  constructor(m: BigInteger) {\r\n    // setup Barrett\r\n    this.r2 = new BigInteger()\r\n    this.q3 = new BigInteger()\r\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)\r\n    this.mu = this.r2.divide(m)\r\n    this.m = m\r\n  }\r\n\r\n  convert(x: BigInteger): BigInteger {\r\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)\r\n    else if (x.compareTo(this.m) < 0) return x\r\n    else {\r\n      const r = new BigInteger()\r\n      x.copyTo(r)\r\n      this.reduce(r)\r\n      return r\r\n    }\r\n  }\r\n\r\n  revert(x: BigInteger): BigInteger {\r\n    return x\r\n  }\r\n\r\n  // x = x mod m (HAC 14.42)\r\n  reduce(x: BigInteger): void {\r\n    x.drShiftTo(this.m.t - 1, this.r2)\r\n    if (x.t > this.m.t + 1) {\r\n      x.t = this.m.t + 1\r\n      x.clamp()\r\n    }\r\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3)\r\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2)\r\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1)\r\n    x.subTo(this.r2, x)\r\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x)\r\n  }\r\n\r\n  // r = x^2 mod m; x !== r\r\n  sqrTo(x: BigInteger, r: BigInteger): void {\r\n    x.squareTo(r)\r\n    this.reduce(r)\r\n  }\r\n\r\n  // r = x*y mod m; x,y !== r\r\n  mulTo(x: BigInteger, y: BigInteger, r: BigInteger): void {\r\n    x.multiplyTo(y, r)\r\n    this.reduce(r)\r\n  }\r\n}\r\n","// From: https://github.com/tracker1/cryptico-js/blob/57b32417967b9c9b75c47c04971f72a120b59a67/src/hash.js\r\n\r\nimport { ByteArray } from '../type'\r\n\r\n/**\r\n *\r\n *  Secure Hash Algorithm (SHA256)\r\n *  http://www.webtoolkit.info/\r\n *\r\n *  Original code by Angel Marin, Paul Johnston.\r\n *\r\n **/\r\nexport function sha256(msg: string): string {\r\n  const chrsz = 8\r\n  const hexcase = 0\r\n\r\n  function safe_add(x: number, y: number): number {\r\n    const lsw = (x & 0xffff) + (y & 0xffff)\r\n    const msw = (x >> 16) + (y >> 16) + (lsw >> 16)\r\n    return (msw << 16) | (lsw & 0xffff)\r\n  }\r\n\r\n  function S(X: number, n: number): number {\r\n    return (X >>> n) | (X << (32 - n))\r\n  }\r\n  function R(X: number, n: number): number {\r\n    return X >>> n\r\n  }\r\n  function Ch(x: number, y: number, z: number): number {\r\n    return (x & y) ^ (~x & z)\r\n  }\r\n  function Maj(x: number, y: number, z: number): number {\r\n    return (x & y) ^ (x & z) ^ (y & z)\r\n  }\r\n  function Sigma0256(x: number): number {\r\n    return S(x, 2) ^ S(x, 13) ^ S(x, 22)\r\n  }\r\n  function Sigma1256(x: number): number {\r\n    return S(x, 6) ^ S(x, 11) ^ S(x, 25)\r\n  }\r\n  function Gamma0256(x: number): number {\r\n    return S(x, 7) ^ S(x, 18) ^ R(x, 3)\r\n  }\r\n  function Gamma1256(x: number): number {\r\n    return S(x, 17) ^ S(x, 19) ^ R(x, 10)\r\n  }\r\n\r\n  function core_sha256(m: ByteArray, l: number): ByteArray {\r\n    const K = [\r\n      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,\r\n      0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\r\n      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\r\n      0xfc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\r\n      0x6ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\r\n      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\r\n      0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\r\n      0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\r\n      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\r\n    ]\r\n    const HASH = [\r\n      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c,\r\n      0x1f83d9ab, 0x5be0cd19,\r\n    ]\r\n    const W = new Array(64)\r\n    let a, b, c, d, e, f, g, h\r\n    let T1, T2\r\n\r\n    m[l >> 5] |= 0x80 << (24 - (l % 32))\r\n    m[(((l + 64) >> 9) << 4) + 15] = l\r\n\r\n    for (let i = 0; i < m.length; i += 16) {\r\n      a = HASH[0]\r\n      b = HASH[1]\r\n      c = HASH[2]\r\n      d = HASH[3]\r\n      e = HASH[4]\r\n      f = HASH[5]\r\n      g = HASH[6]\r\n      h = HASH[7]\r\n\r\n      for (let j = 0; j < 64; j++) {\r\n        if (j < 16) W[j] = m[j + i]\r\n        else\r\n          W[j] = safe_add(\r\n            safe_add(\r\n              safe_add(Gamma1256(W[j - 2]), W[j - 7]),\r\n              Gamma0256(W[j - 15]),\r\n            ),\r\n            W[j - 16],\r\n          )\r\n\r\n        T1 = safe_add(\r\n          safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]),\r\n          W[j],\r\n        )\r\n        T2 = safe_add(Sigma0256(a), Maj(a, b, c))\r\n\r\n        h = g\r\n        g = f\r\n        f = e\r\n        e = safe_add(d, T1)\r\n        d = c\r\n        c = b\r\n        b = a\r\n        a = safe_add(T1, T2)\r\n      }\r\n\r\n      HASH[0] = safe_add(a, HASH[0])\r\n      HASH[1] = safe_add(b, HASH[1])\r\n      HASH[2] = safe_add(c, HASH[2])\r\n      HASH[3] = safe_add(d, HASH[3])\r\n      HASH[4] = safe_add(e, HASH[4])\r\n      HASH[5] = safe_add(f, HASH[5])\r\n      HASH[6] = safe_add(g, HASH[6])\r\n      HASH[7] = safe_add(h, HASH[7])\r\n    }\r\n    return HASH\r\n  }\r\n\r\n  function str2binb(str: string): ByteArray {\r\n    const bin: ByteArray = []\r\n    const mask = (1 << chrsz) - 1\r\n    for (let i = 0; i < str.length * chrsz; i += chrsz) {\r\n      bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - (i % 32))\r\n    }\r\n    return bin\r\n  }\r\n\r\n  function binb2hex(binarray: ByteArray): string {\r\n    const hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef'\r\n    let str = ''\r\n    for (let i = 0; i < binarray.length * 4; i++) {\r\n      str +=\r\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8 + 4)) & 0xf) +\r\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8)) & 0xf)\r\n    }\r\n    return str\r\n  }\r\n\r\n  msg = Utf8Encode(msg)\r\n  return binb2hex(core_sha256(str2binb(msg), msg.length * chrsz))\r\n}\r\n\r\n/**\r\n *\r\n *  Secure Hash Algorithm (SHA1)\r\n *  http://www.webtoolkit.info/\r\n *\r\n **/\r\nexport function sha1(msg: string): string {\r\n  function rotate_left(n: number, s: number): number {\r\n    const t4 = (n << s) | (n >>> (32 - s))\r\n    return t4\r\n  }\r\n\r\n  // function lsb_hex(val: number): string {\r\n  //   let str = ''\r\n  //   let vh\r\n  //   let vl\r\n  //\r\n  //   for (let i = 0; i <= 6; i += 2) {\r\n  //     vh = (val >>> (i * 4 + 4)) & 0x0f\r\n  //     vl = (val >>> (i * 4)) & 0x0f\r\n  //     str += vh.toString(16) + vl.toString(16)\r\n  //   }\r\n  //   return str\r\n  // }\r\n\r\n  function cvt_hex(val: number): string {\r\n    let str = ''\r\n    let v\r\n\r\n    for (let i = 7; i >= 0; i--) {\r\n      v = (val >>> (i * 4)) & 0x0f\r\n      str += v.toString(16)\r\n    }\r\n    return str\r\n  }\r\n\r\n  let blockstart\r\n  let i, j\r\n  const W = new Array(80)\r\n  let H0 = 0x67452301\r\n  let H1 = 0xefcdab89\r\n  let H2 = 0x98badcfe\r\n  let H3 = 0x10325476\r\n  let H4 = 0xc3d2e1f0\r\n  let A, B, C, D, E\r\n  let temp\r\n\r\n  msg = Utf8Encode(msg)\r\n\r\n  const msg_len = msg.length\r\n\r\n  const word_array = []\r\n  for (i = 0; i < msg_len - 3; i += 4) {\r\n    j =\r\n      (msg.charCodeAt(i) << 24) |\r\n      (msg.charCodeAt(i + 1) << 16) |\r\n      (msg.charCodeAt(i + 2) << 8) |\r\n      msg.charCodeAt(i + 3)\r\n    word_array.push(j)\r\n  }\r\n\r\n  switch (msg_len % 4) {\r\n    case 0:\r\n      i = 0x080000000\r\n      break\r\n    case 1:\r\n      i = (msg.charCodeAt(msg_len - 1) << 24) | 0x0800000\r\n      break\r\n\r\n    case 2:\r\n      i =\r\n        (msg.charCodeAt(msg_len - 2) << 24) |\r\n        (msg.charCodeAt(msg_len - 1) << 16) |\r\n        0x08000\r\n      break\r\n\r\n    case 3:\r\n      i =\r\n        (msg.charCodeAt(msg_len - 3) << 24) |\r\n        (msg.charCodeAt(msg_len - 2) << 16) |\r\n        (msg.charCodeAt(msg_len - 1) << 8) |\r\n        0x80\r\n      break\r\n  }\r\n\r\n  word_array.push(i)\r\n\r\n  while (word_array.length % 16 !== 14) word_array.push(0)\r\n\r\n  word_array.push(msg_len >>> 29)\r\n  word_array.push((msg_len << 3) & 0x0ffffffff)\r\n\r\n  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {\r\n    for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i]\r\n    for (i = 16; i <= 79; i++)\r\n      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1)\r\n\r\n    A = H0\r\n    B = H1\r\n    C = H2\r\n    D = H3\r\n    E = H4\r\n\r\n    for (i = 0; i <= 19; i++) {\r\n      temp =\r\n        (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5a827999) &\r\n        0x0ffffffff\r\n      E = D\r\n      D = C\r\n      C = rotate_left(B, 30)\r\n      B = A\r\n      A = temp\r\n    }\r\n\r\n    for (i = 20; i <= 39; i++) {\r\n      temp =\r\n        (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ed9eba1) & 0x0ffffffff\r\n      E = D\r\n      D = C\r\n      C = rotate_left(B, 30)\r\n      B = A\r\n      A = temp\r\n    }\r\n\r\n    for (i = 40; i <= 59; i++) {\r\n      temp =\r\n        (rotate_left(A, 5) +\r\n          ((B & C) | (B & D) | (C & D)) +\r\n          E +\r\n          W[i] +\r\n          0x8f1bbcdc) &\r\n        0x0ffffffff\r\n      E = D\r\n      D = C\r\n      C = rotate_left(B, 30)\r\n      B = A\r\n      A = temp\r\n    }\r\n\r\n    for (i = 60; i <= 79; i++) {\r\n      temp =\r\n        (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xca62c1d6) & 0x0ffffffff\r\n      E = D\r\n      D = C\r\n      C = rotate_left(B, 30)\r\n      B = A\r\n      A = temp\r\n    }\r\n\r\n    H0 = (H0 + A) & 0x0ffffffff\r\n    H1 = (H1 + B) & 0x0ffffffff\r\n    H2 = (H2 + C) & 0x0ffffffff\r\n    H3 = (H3 + D) & 0x0ffffffff\r\n    H4 = (H4 + E) & 0x0ffffffff\r\n  }\r\n\r\n  const ret =\r\n    cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4)\r\n\r\n  return ret.toLowerCase()\r\n}\r\n\r\n/**\r\n *\r\n *  MD5 (Message-Digest Algorithm)\r\n *  http://www.webtoolkit.info/\r\n *\r\n **/\r\nexport function md5(msg: string): string {\r\n  function RotateLeft(lValue: number, iShiftBits: number): number {\r\n    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits))\r\n  }\r\n\r\n  function AddUnsigned(lX: number, lY: number): number {\r\n    const lX8 = lX & 0x80000000\r\n    const lY8 = lY & 0x80000000\r\n    const lX4 = lX & 0x40000000\r\n    const lY4 = lY & 0x40000000\r\n    const lResult = (lX & 0x3fffffff) + (lY & 0x3fffffff)\r\n    if (lX4 & lY4) {\r\n      return lResult ^ 0x80000000 ^ lX8 ^ lY8\r\n    }\r\n    if (lX4 | lY4) {\r\n      if (lResult & 0x40000000) {\r\n        return lResult ^ 0xc0000000 ^ lX8 ^ lY8\r\n      } else {\r\n        return lResult ^ 0x40000000 ^ lX8 ^ lY8\r\n      }\r\n    } else {\r\n      return lResult ^ lX8 ^ lY8\r\n    }\r\n  }\r\n\r\n  function F(x: number, y: number, z: number): number {\r\n    return (x & y) | (~x & z)\r\n  }\r\n  function G(x: number, y: number, z: number): number {\r\n    return (x & z) | (y & ~z)\r\n  }\r\n  function H(x: number, y: number, z: number): number {\r\n    return x ^ y ^ z\r\n  }\r\n  function I(x: number, y: number, z: number): number {\r\n    return y ^ (x | ~z)\r\n  }\r\n\r\n  function FF(\r\n    a: number,\r\n    b: number,\r\n    c: number,\r\n    d: number,\r\n    x: number,\r\n    s: number,\r\n    ac: number,\r\n  ): number {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac))\r\n    return AddUnsigned(RotateLeft(a, s), b)\r\n  }\r\n\r\n  function GG(\r\n    a: number,\r\n    b: number,\r\n    c: number,\r\n    d: number,\r\n    x: number,\r\n    s: number,\r\n    ac: number,\r\n  ): number {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac))\r\n    return AddUnsigned(RotateLeft(a, s), b)\r\n  }\r\n\r\n  function HH(\r\n    a: number,\r\n    b: number,\r\n    c: number,\r\n    d: number,\r\n    x: number,\r\n    s: number,\r\n    ac: number,\r\n  ): number {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac))\r\n    return AddUnsigned(RotateLeft(a, s), b)\r\n  }\r\n\r\n  function II(\r\n    a: number,\r\n    b: number,\r\n    c: number,\r\n    d: number,\r\n    x: number,\r\n    s: number,\r\n    ac: number,\r\n  ): number {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac))\r\n    return AddUnsigned(RotateLeft(a, s), b)\r\n  }\r\n\r\n  function ConvertToWordArray(str: string): ByteArray {\r\n    let lWordCount\r\n    const lMessageLength = str.length\r\n    const lNumberOfWords_temp1 = lMessageLength + 8\r\n    const lNumberOfWords_temp2 =\r\n      (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64\r\n    const lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16\r\n    const lWordArray: ByteArray = Array<number>(lNumberOfWords - 1)\r\n    let lBytePosition = 0\r\n    let lByteCount = 0\r\n    while (lByteCount < lMessageLength) {\r\n      lWordCount = (lByteCount - (lByteCount % 4)) / 4\r\n      lBytePosition = (lByteCount % 4) * 8\r\n      lWordArray[lWordCount] =\r\n        lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition)\r\n      lByteCount++\r\n    }\r\n    lWordCount = (lByteCount - (lByteCount % 4)) / 4\r\n    lBytePosition = (lByteCount % 4) * 8\r\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition)\r\n    lWordArray[lNumberOfWords - 2] = lMessageLength << 3\r\n    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29\r\n    return lWordArray\r\n  }\r\n\r\n  function WordToHex(lValue: number): string {\r\n    let WordToHexValue = '',\r\n      WordToHexValue_temp = '',\r\n      lByte,\r\n      lCount\r\n    for (lCount = 0; lCount <= 3; lCount++) {\r\n      lByte = (lValue >>> (lCount * 8)) & 255\r\n      WordToHexValue_temp = '0' + lByte.toString(16)\r\n      WordToHexValue =\r\n        WordToHexValue +\r\n        WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2)\r\n    }\r\n    return WordToHexValue\r\n  }\r\n\r\n  let k, AA, BB, CC, DD, a, b, c, d\r\n  const S11 = 7,\r\n    S12 = 12,\r\n    S13 = 17,\r\n    S14 = 22\r\n  const S21 = 5,\r\n    S22 = 9,\r\n    S23 = 14,\r\n    S24 = 20\r\n  const S31 = 4,\r\n    S32 = 11,\r\n    S33 = 16,\r\n    S34 = 23\r\n  const S41 = 6,\r\n    S42 = 10,\r\n    S43 = 15,\r\n    S44 = 21\r\n\r\n  msg = Utf8Encode(msg)\r\n\r\n  const x = ConvertToWordArray(msg)\r\n\r\n  a = 0x67452301\r\n  b = 0xefcdab89\r\n  c = 0x98badcfe\r\n  d = 0x10325476\r\n\r\n  for (k = 0; k < x.length; k += 16) {\r\n    AA = a\r\n    BB = b\r\n    CC = c\r\n    DD = d\r\n    a = FF(a, b, c, d, x[k + 0], S11, 0xd76aa478)\r\n    d = FF(d, a, b, c, x[k + 1], S12, 0xe8c7b756)\r\n    c = FF(c, d, a, b, x[k + 2], S13, 0x242070db)\r\n    b = FF(b, c, d, a, x[k + 3], S14, 0xc1bdceee)\r\n    a = FF(a, b, c, d, x[k + 4], S11, 0xf57c0faf)\r\n    d = FF(d, a, b, c, x[k + 5], S12, 0x4787c62a)\r\n    c = FF(c, d, a, b, x[k + 6], S13, 0xa8304613)\r\n    b = FF(b, c, d, a, x[k + 7], S14, 0xfd469501)\r\n    a = FF(a, b, c, d, x[k + 8], S11, 0x698098d8)\r\n    d = FF(d, a, b, c, x[k + 9], S12, 0x8b44f7af)\r\n    c = FF(c, d, a, b, x[k + 10], S13, 0xffff5bb1)\r\n    b = FF(b, c, d, a, x[k + 11], S14, 0x895cd7be)\r\n    a = FF(a, b, c, d, x[k + 12], S11, 0x6b901122)\r\n    d = FF(d, a, b, c, x[k + 13], S12, 0xfd987193)\r\n    c = FF(c, d, a, b, x[k + 14], S13, 0xa679438e)\r\n    b = FF(b, c, d, a, x[k + 15], S14, 0x49b40821)\r\n    a = GG(a, b, c, d, x[k + 1], S21, 0xf61e2562)\r\n    d = GG(d, a, b, c, x[k + 6], S22, 0xc040b340)\r\n    c = GG(c, d, a, b, x[k + 11], S23, 0x265e5a51)\r\n    b = GG(b, c, d, a, x[k + 0], S24, 0xe9b6c7aa)\r\n    a = GG(a, b, c, d, x[k + 5], S21, 0xd62f105d)\r\n    d = GG(d, a, b, c, x[k + 10], S22, 0x2441453)\r\n    c = GG(c, d, a, b, x[k + 15], S23, 0xd8a1e681)\r\n    b = GG(b, c, d, a, x[k + 4], S24, 0xe7d3fbc8)\r\n    a = GG(a, b, c, d, x[k + 9], S21, 0x21e1cde6)\r\n    d = GG(d, a, b, c, x[k + 14], S22, 0xc33707d6)\r\n    c = GG(c, d, a, b, x[k + 3], S23, 0xf4d50d87)\r\n    b = GG(b, c, d, a, x[k + 8], S24, 0x455a14ed)\r\n    a = GG(a, b, c, d, x[k + 13], S21, 0xa9e3e905)\r\n    d = GG(d, a, b, c, x[k + 2], S22, 0xfcefa3f8)\r\n    c = GG(c, d, a, b, x[k + 7], S23, 0x676f02d9)\r\n    b = GG(b, c, d, a, x[k + 12], S24, 0x8d2a4c8a)\r\n    a = HH(a, b, c, d, x[k + 5], S31, 0xfffa3942)\r\n    d = HH(d, a, b, c, x[k + 8], S32, 0x8771f681)\r\n    c = HH(c, d, a, b, x[k + 11], S33, 0x6d9d6122)\r\n    b = HH(b, c, d, a, x[k + 14], S34, 0xfde5380c)\r\n    a = HH(a, b, c, d, x[k + 1], S31, 0xa4beea44)\r\n    d = HH(d, a, b, c, x[k + 4], S32, 0x4bdecfa9)\r\n    c = HH(c, d, a, b, x[k + 7], S33, 0xf6bb4b60)\r\n    b = HH(b, c, d, a, x[k + 10], S34, 0xbebfbc70)\r\n    a = HH(a, b, c, d, x[k + 13], S31, 0x289b7ec6)\r\n    d = HH(d, a, b, c, x[k + 0], S32, 0xeaa127fa)\r\n    c = HH(c, d, a, b, x[k + 3], S33, 0xd4ef3085)\r\n    b = HH(b, c, d, a, x[k + 6], S34, 0x4881d05)\r\n    a = HH(a, b, c, d, x[k + 9], S31, 0xd9d4d039)\r\n    d = HH(d, a, b, c, x[k + 12], S32, 0xe6db99e5)\r\n    c = HH(c, d, a, b, x[k + 15], S33, 0x1fa27cf8)\r\n    b = HH(b, c, d, a, x[k + 2], S34, 0xc4ac5665)\r\n    a = II(a, b, c, d, x[k + 0], S41, 0xf4292244)\r\n    d = II(d, a, b, c, x[k + 7], S42, 0x432aff97)\r\n    c = II(c, d, a, b, x[k + 14], S43, 0xab9423a7)\r\n    b = II(b, c, d, a, x[k + 5], S44, 0xfc93a039)\r\n    a = II(a, b, c, d, x[k + 12], S41, 0x655b59c3)\r\n    d = II(d, a, b, c, x[k + 3], S42, 0x8f0ccc92)\r\n    c = II(c, d, a, b, x[k + 10], S43, 0xffeff47d)\r\n    b = II(b, c, d, a, x[k + 1], S44, 0x85845dd1)\r\n    a = II(a, b, c, d, x[k + 8], S41, 0x6fa87e4f)\r\n    d = II(d, a, b, c, x[k + 15], S42, 0xfe2ce6e0)\r\n    c = II(c, d, a, b, x[k + 6], S43, 0xa3014314)\r\n    b = II(b, c, d, a, x[k + 13], S44, 0x4e0811a1)\r\n    a = II(a, b, c, d, x[k + 4], S41, 0xf7537e82)\r\n    d = II(d, a, b, c, x[k + 11], S42, 0xbd3af235)\r\n    c = II(c, d, a, b, x[k + 2], S43, 0x2ad7d2bb)\r\n    b = II(b, c, d, a, x[k + 9], S44, 0xeb86d391)\r\n    a = AddUnsigned(a, AA)\r\n    b = AddUnsigned(b, BB)\r\n    c = AddUnsigned(c, CC)\r\n    d = AddUnsigned(d, DD)\r\n  }\r\n\r\n  const temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d)\r\n\r\n  return temp.toLowerCase()\r\n}\r\n\r\nfunction Utf8Encode(str: string): string {\r\n  str = str.replace(/\\r\\n/g, '\\n')\r\n  let utftext = ''\r\n\r\n  for (let n = 0; n < str.length; n++) {\r\n    const c = str.charCodeAt(n)\r\n\r\n    if (c < 128) {\r\n      utftext += String.fromCharCode(c)\r\n    } else if (c > 127 && c < 2048) {\r\n      utftext += String.fromCharCode((c >> 6) | 192)\r\n      utftext += String.fromCharCode((c & 63) | 128)\r\n    } else {\r\n      utftext += String.fromCharCode((c >> 12) | 224)\r\n      utftext += String.fromCharCode(((c >> 6) & 63) | 128)\r\n      utftext += String.fromCharCode((c & 63) | 128)\r\n    }\r\n  }\r\n\r\n  return utftext\r\n}\r\n","import * as native from './native'\r\nimport * as node from './node'\r\n\r\nexport type HashFunc = (s: string) => string\r\n\r\nexport const sha256 = (\r\n  process.env.NODEJS ? node.sha256 : native.sha256\r\n) as HashFunc\r\n\r\nexport const sha1 = (process.env.NODEJS ? node.sha1 : native.sha1) as HashFunc\r\n\r\nexport const md5 = (process.env.NODEJS ? node.md5 : native.md5) as HashFunc\r\n","import crypto from 'crypto'\r\n\r\nexport function sha256(msg: string): string {\r\n  return crypto.createHash('sha256').update(msg, 'utf8').digest('hex')\r\n}\r\n\r\nexport function sha1(msg: string): string {\r\n  return crypto.createHash('sha1').update(msg, 'utf8').digest('hex')\r\n}\r\n\r\nexport function md5(msg: string): string {\r\n  return crypto.createHash('md5').update(msg, 'utf8').digest('hex')\r\n}\r\n","// Depends on jsbn.js and rng.js\r\n// Version 1.1: support utf-8 encoding in pkcs1pad2\r\n// convert a (hex) string to a bignum object\r\n\r\nimport { BigInteger } from './jsbn'\r\nimport { SecureRandom, SeededRandom } from './random'\r\nimport { sha1, sha256 } from './hash'\r\n\r\nexport function parseBigInt(str: string, r: number): BigInteger {\r\n  return new BigInteger(str, r)\r\n}\r\n\r\nexport function linebrk(s: string, n: number): string {\r\n  let ret = ''\r\n  let i = 0\r\n  while (i + n < s.length) {\r\n    ret += s.substring(i, i + n) + '\\n'\r\n    i += n\r\n  }\r\n  return ret + s.substring(i, s.length)\r\n}\r\n\r\nexport function byte2Hex(b: number): string {\r\n  if (b < 0x10) return '0' + b.toString(16)\r\n  else return b.toString(16)\r\n}\r\n\r\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\r\nexport function pkcs1pad2(s: string, n: number): BigInteger {\r\n  if (n < s.length + 11) {\r\n    // TODO: fix for utf-8\r\n    //throw \"Message too long for RSA (n=\" + n + \", l=\" + s.length + \")\"\r\n    //return null;\r\n    throw 'Message too long for RSA (n=' + n + ', l=' + s.length + ')'\r\n  }\r\n  const ba = []\r\n  let i = s.length - 1\r\n  while (i >= 0 && n > 0) {\r\n    const c = s.charCodeAt(i--)\r\n    if (c < 128) {\r\n      // encode using utf-8\r\n      ba[--n] = c\r\n    } else if (c > 127 && c < 2048) {\r\n      ba[--n] = (c & 63) | 128\r\n      ba[--n] = (c >> 6) | 192\r\n    } else {\r\n      ba[--n] = (c & 63) | 128\r\n      ba[--n] = ((c >> 6) & 63) | 128\r\n      ba[--n] = (c >> 12) | 224\r\n    }\r\n  }\r\n  ba[--n] = 0\r\n  const rng = new SecureRandom()\r\n  const x = []\r\n  while (n > 2) {\r\n    // random non-zero pad\r\n    x[0] = 0\r\n    while (x[0] === 0) rng.nextBytes(x)\r\n    ba[--n] = x[0]\r\n  }\r\n  ba[--n] = 2\r\n  ba[--n] = 0\r\n  return new BigInteger(ba)\r\n}\r\n\r\ntype RSAKeyKey = 'n' | 'e' | 'd' | 'p' | 'q' | 'dmp1' | 'dmq1' | 'coeff'\r\n\r\n// \"empty\" RSA key constructor\r\nexport class RSAKey {\r\n  n = new BigInteger()\r\n  e = 0\r\n  private d = new BigInteger()\r\n  private p = new BigInteger()\r\n  private q = new BigInteger()\r\n  private dmp1 = new BigInteger()\r\n  private dmq1 = new BigInteger()\r\n  private coeff = new BigInteger()\r\n\r\n  // Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\r\n  // encryptB64(text: string): string | null {\r\n  //   const h = this.encrypt(text)\r\n  //   if (h) return hex2b64(h)\r\n  //   else return null\r\n  // }\r\n\r\n  // Set the public key fields N and e from hex strings\r\n  setPublic(N: string, E: string): void {\r\n    if (N && E) {\r\n      this.n = parseBigInt(N, 16)\r\n      this.e = parseInt(E, 16)\r\n    } else throw 'Invalid RSA public key'\r\n  }\r\n\r\n  // Perform raw public operation on \"x\": return x^e (mod n)\r\n  doPublic(x: BigInteger): BigInteger {\r\n    return x.modPowInt(this.e, this.n)\r\n  }\r\n\r\n  // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\r\n  encrypt(text: string): string {\r\n    const m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3)\r\n    // if (!m) return null\r\n    const c = this.doPublic(m)\r\n    // if (!c) return null\r\n    const h = c.toString(16)\r\n    if ((h.length & 1) === 0) return h\r\n    else return '0' + h\r\n  }\r\n\r\n  // Set the private key fields N, e, and d from hex strings\r\n  setPrivate(N: string, E: string, D: string): void {\r\n    if (N && E && N.length > 0 && E.length > 0) {\r\n      this.n = parseBigInt(N, 16)\r\n      this.e = parseInt(E, 16)\r\n      this.d = parseBigInt(D, 16)\r\n    } else throw 'Invalid RSA private key'\r\n  }\r\n\r\n  // Set the private key fields N, e, d and CRT params from hex strings\r\n  setPrivateEx(\r\n    N: string,\r\n    E: string,\r\n    D: string,\r\n    P: string,\r\n    Q: string,\r\n    DP: string,\r\n    DQ: string,\r\n    C: string,\r\n  ): void {\r\n    if (N && E && N.length > 0 && E.length > 0) {\r\n      this.n = parseBigInt(N, 16)\r\n      this.e = parseInt(E, 16)\r\n      this.d = parseBigInt(D, 16)\r\n      this.p = parseBigInt(P, 16)\r\n      this.q = parseBigInt(Q, 16)\r\n      this.dmp1 = parseBigInt(DP, 16)\r\n      this.dmq1 = parseBigInt(DQ, 16)\r\n      this.coeff = parseBigInt(C, 16)\r\n    } else throw new Error('Invalid RSA private key')\r\n  }\r\n\r\n  // Generate a new random private key B bits long, using public expt E\r\n  generate(B: number, E: string): void {\r\n    const rng = new SeededRandom()\r\n    const qs = B >> 1\r\n    this.e = parseInt(E, 16)\r\n    const ee = new BigInteger(E, 16)\r\n    for (;;) {\r\n      for (;;) {\r\n        this.p = new BigInteger(B - qs, 1, rng)\r\n        if (\r\n          this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) ===\r\n            0 &&\r\n          this.p.isProbablePrime(10)\r\n        )\r\n          break\r\n      }\r\n      for (;;) {\r\n        this.q = new BigInteger(qs, 1, rng)\r\n        if (\r\n          this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) ===\r\n            0 &&\r\n          this.q.isProbablePrime(10)\r\n        )\r\n          break\r\n      }\r\n      if (this.p.compareTo(this.q) <= 0) {\r\n        const t = this.p\r\n        this.p = this.q\r\n        this.q = t\r\n      }\r\n      const p1 = this.p.subtract(BigInteger.ONE)\r\n      const q1 = this.q.subtract(BigInteger.ONE)\r\n      const phi = p1.multiply(q1)\r\n      if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {\r\n        this.n = this.p.multiply(this.q)\r\n        this.d = ee.modInverse(phi)\r\n        this.dmp1 = this.d.mod(p1)\r\n        this.dmq1 = this.d.mod(q1)\r\n        this.coeff = this.q.modInverse(this.p)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // Perform raw private operation on \"x\": return x^d (mod n)\r\n  protected doPrivate(x: BigInteger): BigInteger {\r\n    if (!this.p || !this.q) return x.modPow(this.d, this.n)\r\n    // TODO: re-calculate any missing CRT params\r\n    let xp = x.mod(this.p).modPow(this.dmp1, this.p)\r\n    const xq = x.mod(this.q).modPow(this.dmq1, this.q)\r\n    while (xp.compareTo(xq) < 0) xp = xp.add(this.p)\r\n    return xp\r\n      .subtract(xq)\r\n      .multiply(this.coeff)\r\n      .mod(this.p)\r\n      .multiply(this.q)\r\n      .add(xq)\r\n  }\r\n\r\n  // Return the PKCS#1 RSA decryption of \"ctext\".\r\n  // \"ctext\" is an even-length hex string and the output is a plain string.\r\n  decrypt(ctext: string): string | null {\r\n    const c = parseBigInt(ctext, 16)\r\n    const m = this.doPrivate(c)\r\n    if (!(m instanceof BigInteger)) return null\r\n    return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3)\r\n  }\r\n\r\n  signString = _rsasign_signString\r\n  signStringWithSHA1 = _rsasign_signStringWithSHA1\r\n  signStringWithSHA256 = _rsasign_signStringWithSHA256\r\n  verifyHexSignatureForMessage = _rsasign_verifyHexSignatureForMessage\r\n  verifyString = _rsasign_verifyString\r\n\r\n  toJSON(): string {\r\n    return JSON.stringify({\r\n      coeff: this.coeff.toString(16),\r\n      d: this.d.toString(16),\r\n      dmp1: this.dmp1.toString(16),\r\n      dmq1: this.dmq1.toString(16),\r\n      e: this.e.toString(16),\r\n      n: this.n.toString(16),\r\n      p: this.p.toString(16),\r\n      q: this.q.toString(16),\r\n    })\r\n  }\r\n\r\n  static parse(key: string | Record<RSAKeyKey, string>): RSAKey | null {\r\n    const json = (typeof key === 'string' ? JSON.parse(key) : key) as Record<\r\n      RSAKeyKey,\r\n      string\r\n    >\r\n    if (!json) {\r\n      return null\r\n    }\r\n\r\n    const rsa = new RSAKey()\r\n    rsa.setPrivateEx(\r\n      json.n,\r\n      json.e,\r\n      json.d,\r\n      json.p,\r\n      json.q,\r\n      json.dmp1,\r\n      json.dmq1,\r\n      json.coeff,\r\n    )\r\n\r\n    return rsa\r\n  }\r\n}\r\n\r\n// Version 1.1: support utf-8 decoding in pkcs1unpad2\r\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\r\nexport function pkcs1unpad2(d: BigInteger, n: number): string | null {\r\n  const b = d.toByteArray()\r\n  let i = 0\r\n  while (i < b.length && b[i] === 0) ++i\r\n  if (b.length - i !== n - 1 || b[i] !== 2) return null\r\n  ++i\r\n  while (b[i] !== 0) if (++i >= b.length) return null\r\n  let ret = ''\r\n  while (++i < b.length) {\r\n    const c = b[i] & 255\r\n    if (c < 128) {\r\n      // utf-8 decode\r\n      ret += String.fromCharCode(c)\r\n    } else if (c > 191 && c < 224) {\r\n      ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63))\r\n      ++i\r\n    } else {\r\n      ret += String.fromCharCode(\r\n        ((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63),\r\n      )\r\n      i += 2\r\n    }\r\n  }\r\n  return ret\r\n}\r\n\r\n//\r\n// rsa-sign.js - adding signing functions to RSAKey class.\r\n//\r\n//\r\n// version: 1.0 (2010-Jun-03)\r\n//\r\n// Copyright (c) 2010 Kenji Urushima (kenji.urushima@gmail.com)\r\n//\r\n// This software is licensed under the terms of the MIT License.\r\n// http://www.opensource.org/licenses/mit-license.php\r\n//\r\n// The above copyright and license notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n//\r\n// Depends on:\r\n//   function sha1(s) of sha1.js\r\n//   jsbn.js\r\n//   jsbn2.js\r\n//   rsa.js\r\n//   rsa2.js\r\n//\r\n// keysize / pmstrlen\r\n//  512 /  128\r\n// 1024 /  256\r\n// 2048 /  512\r\n// 4096 / 1024\r\n// As for _RSASGIN_DIHEAD values for each hash algorithm, see PKCS#1 v2.1 spec (p38).\r\nconst _RSASIGN_DIHEAD = <const>{\r\n  sha1: '3021300906052b0e03021a05000414',\r\n  sha256: '3031300d060960864801650304020105000420',\r\n  // md2: '3020300c06082a864886f70d020205000410',\r\n  // md5: '3020300c06082a864886f70d020505000410',\r\n  // sha384: '3041300d060960864801650304020205000430',\r\n  // sha512: '3051300d060960864801650304020305000440',\r\n}\r\nconst _RSASIGN_HASHHEXFUNC = <const>{\r\n  sha1,\r\n  sha256,\r\n}\r\ntype HashAlg = keyof typeof _RSASIGN_HASHHEXFUNC\r\n\r\n// ========================================================================\r\n// Signature Generation\r\n// ========================================================================\r\n\r\nfunction _rsasign_getHexPaddedDigestInfoForString(\r\n  s: string,\r\n  keySize: number,\r\n  hashAlg: HashAlg,\r\n): string {\r\n  const pmStrLen = keySize / 4\r\n  const hashFunc = _RSASIGN_HASHHEXFUNC[hashAlg]\r\n  const sHashHex = hashFunc(s)\r\n\r\n  const sHead = '0001'\r\n  const sTail = '00' + _RSASIGN_DIHEAD[hashAlg] + sHashHex\r\n  let sMid = ''\r\n  const fLen = pmStrLen - sHead.length - sTail.length\r\n  for (let i = 0; i < fLen; i += 2) {\r\n    sMid += 'ff'\r\n  }\r\n  const sPaddedMessageHex = sHead + sMid + sTail\r\n  return sPaddedMessageHex\r\n}\r\n\r\nfunction _rsasign_signString(\r\n  this: RSAKey,\r\n  s: string,\r\n  hashAlg: HashAlg,\r\n): string {\r\n  const hPM = _rsasign_getHexPaddedDigestInfoForString(\r\n    s,\r\n    this.n.bitLength(),\r\n    hashAlg,\r\n  )\r\n  const biPaddedMessage = parseBigInt(hPM, 16)\r\n  const biSign = this.doPrivate(biPaddedMessage)\r\n  const hexSign = biSign.toString(16)\r\n  return hexSign\r\n}\r\n\r\nfunction _rsasign_signStringWithSHA1(this: RSAKey, s: string): string {\r\n  const hPM = _rsasign_getHexPaddedDigestInfoForString(\r\n    s,\r\n    this.n.bitLength(),\r\n    'sha1',\r\n  )\r\n  const biPaddedMessage = parseBigInt(hPM, 16)\r\n  const biSign = this.doPrivate(biPaddedMessage)\r\n  const hexSign = biSign.toString(16)\r\n  return hexSign\r\n}\r\n\r\nfunction _rsasign_signStringWithSHA256(this: RSAKey, s: string): string {\r\n  const hPM = _rsasign_getHexPaddedDigestInfoForString(\r\n    s,\r\n    this.n.bitLength(),\r\n    'sha256',\r\n  )\r\n  const biPaddedMessage = parseBigInt(hPM, 16)\r\n  const biSign = this.doPrivate(biPaddedMessage)\r\n  const hexSign = biSign.toString(16)\r\n  return hexSign\r\n}\r\n\r\n// ========================================================================\r\n// Signature Verification\r\n// ========================================================================\r\n\r\nfunction _rsasign_getDecryptSignatureBI(\r\n  biSig: BigInteger,\r\n  hN: string,\r\n  hE: string,\r\n): BigInteger {\r\n  const rsa = new RSAKey()\r\n  rsa.setPublic(hN, hE)\r\n  const biDecryptedSig = rsa.doPublic(biSig)\r\n  return biDecryptedSig\r\n}\r\n\r\nfunction _rsasign_getHexDigestInfoFromSig(\r\n  biSig: BigInteger,\r\n  hN: string,\r\n  hE: string,\r\n): string {\r\n  const biDecryptedSig = _rsasign_getDecryptSignatureBI(biSig, hN, hE)\r\n  const hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '')\r\n  return hDigestInfo\r\n}\r\n\r\nfunction _rsasign_getAlgNameAndHashFromHexDisgestInfo(\r\n  hDigestInfo: string,\r\n): [HashAlg, string] | [] {\r\n  for (const algName in _RSASIGN_DIHEAD) {\r\n    const head = _RSASIGN_DIHEAD[algName as HashAlg]\r\n    const len = head.length\r\n    if (hDigestInfo.substring(0, len) === head) {\r\n      return [algName as HashAlg, hDigestInfo.substring(len)]\r\n    }\r\n  }\r\n  return []\r\n}\r\n\r\nfunction _rsasign_verifySignatureWithArgs(\r\n  sMsg: string,\r\n  biSig: BigInteger,\r\n  hN: string,\r\n  hE: string,\r\n): boolean {\r\n  const hDigestInfo = _rsasign_getHexDigestInfoFromSig(biSig, hN, hE)\r\n  const digestInfoAry =\r\n    _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo)\r\n  if (digestInfoAry.length === 0) return false\r\n  const algName = digestInfoAry[0]\r\n  const diHashValue = digestInfoAry[1]\r\n  const ff = _RSASIGN_HASHHEXFUNC[algName]\r\n  const msgHashValue = ff(sMsg)\r\n  return diHashValue === msgHashValue\r\n}\r\n\r\nfunction _rsasign_verifyHexSignatureForMessage(\r\n  this: RSAKey,\r\n  sMsg: string,\r\n  hSig: string,\r\n): boolean {\r\n  const biSig = parseBigInt(hSig, 16)\r\n  const result = _rsasign_verifySignatureWithArgs(\r\n    sMsg,\r\n    biSig,\r\n    this.n.toString(16),\r\n    this.e.toString(16),\r\n  )\r\n  return result\r\n}\r\n\r\nfunction _rsasign_verifyString(\r\n  this: RSAKey,\r\n  sMsg: string,\r\n  hSig: string,\r\n): boolean {\r\n  hSig = hSig.replace(/[ \\n]+/g, '')\r\n  const biSig = parseBigInt(hSig, 16)\r\n  const biDecryptedSig = this.doPublic(biSig)\r\n  const hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '')\r\n  const digestInfoAry =\r\n    _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo)\r\n\r\n  if (digestInfoAry.length === 0) return false\r\n  const algName = digestInfoAry[0]\r\n  const diHashValue = digestInfoAry[1]\r\n  const ff = _RSASIGN_HASHHEXFUNC[algName]\r\n  const msgHashValue = ff(sMsg)\r\n  return diHashValue === msgHashValue\r\n}\r\n","import { aes, AESKey } from './aes'\r\nimport { int2char } from './jsbn'\r\nimport { math, SecureRandom } from './random'\r\nimport { md5, sha256 } from './hash'\r\nimport { RSAKey } from './rsa'\r\nimport { ByteArray } from './type'\r\n\r\nconst base64Chars =\r\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nconst magic = '::52cee64bb3a38f6403386519a39ac91c::'\r\n\r\naes.Init()\r\n\r\ntype DecryptStatusSuccessForSignature<Signature> = {\r\n  status: 'success'\r\n  plaintext: string\r\n  signature: Signature\r\n  publicKeyString: Signature extends 'unsigned' ? never : string\r\n}\r\ntype DecryptStatusSuccess =\r\n  | DecryptStatusSuccessForSignature<'unsigned'>\r\n  | DecryptStatusSuccessForSignature<'verified' | 'forged'>\r\ntype DecryptStatusFailure = { status: 'Invalid public key' | 'failure' }\r\n\r\nexport class cryptico {\r\n  static b256to64(t: string): string {\r\n    let a = 0, // Should be reassigned before read\r\n      c,\r\n      n\r\n    let r = '',\r\n      // l = 0,\r\n      s = 0\r\n    const tl = t.length\r\n    for (n = 0; n < tl; n++) {\r\n      c = t.charCodeAt(n)\r\n      if (s === 0) {\r\n        r += base64Chars.charAt((c >> 2) & 63)\r\n        a = (c & 3) << 4\r\n      } else if (s === 1) {\r\n        r += base64Chars.charAt(a | ((c >> 4) & 15))\r\n        a = (c & 15) << 2\r\n      } else if (s === 2) {\r\n        r += base64Chars.charAt(a | ((c >> 6) & 3))\r\n        // l += 1\r\n        r += base64Chars.charAt(c & 63)\r\n      }\r\n      // l += 1\r\n      s += 1\r\n      if (s === 3) s = 0\r\n    }\r\n    if (s > 0) {\r\n      r += base64Chars.charAt(a)\r\n      // l += 1\r\n      r += '='\r\n      // l += 1\r\n    }\r\n    if (s === 1) {\r\n      r += '='\r\n    }\r\n    return r\r\n  }\r\n\r\n  static b64to256(t: string): string {\r\n    let c, n\r\n    let r = '',\r\n      s = 0,\r\n      a = 0\r\n    const tl = t.length\r\n    for (n = 0; n < tl; n++) {\r\n      c = base64Chars.indexOf(t.charAt(n))\r\n      if (c >= 0) {\r\n        if (s) r += String.fromCharCode(a | ((c >> (6 - s)) & 255))\r\n        s = (s + 2) & 7\r\n        a = (c << s) & 255\r\n      }\r\n    }\r\n    return r\r\n  }\r\n\r\n  static b16to64(h: string): string {\r\n    let i\r\n    let c\r\n    let ret = ''\r\n    if (h.length % 2 === 1) {\r\n      h = '0' + h\r\n    }\r\n    for (i = 0; i + 3 <= h.length; i += 3) {\r\n      c = parseInt(h.substring(i, i + 3), 16)\r\n      ret += base64Chars.charAt(c >> 6) + base64Chars.charAt(c & 63)\r\n    }\r\n    if (i + 1 === h.length) {\r\n      c = parseInt(h.substring(i, i + 1), 16)\r\n      ret += base64Chars.charAt(c << 2)\r\n    } else if (i + 2 === h.length) {\r\n      c = parseInt(h.substring(i, i + 2), 16)\r\n      ret += base64Chars.charAt(c >> 2) + base64Chars.charAt((c & 3) << 4)\r\n    }\r\n    while ((ret.length & 3) > 0) ret += '='\r\n    return ret\r\n  }\r\n\r\n  static b64to16(s: string): string {\r\n    let ret = ''\r\n    let i\r\n    let k = 0\r\n    let slop = 0 // Should be reassigned before read\r\n    for (i = 0; i < s.length; ++i) {\r\n      if (s.charAt(i) === '=') break\r\n      const v = base64Chars.indexOf(s.charAt(i))\r\n      if (v < 0) continue\r\n      if (k === 0) {\r\n        ret += int2char(v >> 2)\r\n        slop = v & 3\r\n        k = 1\r\n      } else if (k === 1) {\r\n        ret += int2char((slop << 2) | (v >> 4))\r\n        slop = v & 0xf\r\n        k = 2\r\n      } else if (k === 2) {\r\n        ret += int2char(slop)\r\n        ret += int2char(v >> 2)\r\n        slop = v & 3\r\n        k = 3\r\n      } else {\r\n        ret += int2char((slop << 2) | (v >> 4))\r\n        ret += int2char(v & 0xf)\r\n        k = 0\r\n      }\r\n    }\r\n    if (k === 1) ret += int2char(slop << 2)\r\n    return ret\r\n  }\r\n\r\n  // Converts a string to a byte array.\r\n  static string2bytes(str: string): ByteArray {\r\n    const bytes = []\r\n    for (let i = 0; i < str.length; i++) {\r\n      bytes.push(str.charCodeAt(i))\r\n    }\r\n    return bytes\r\n  }\r\n\r\n  // Converts a byte array to a string.\r\n  static bytes2string(bytes: ByteArray): string {\r\n    let str = ''\r\n    for (let i = 0; i < bytes.length; i++) {\r\n      str += String.fromCharCode(bytes[i])\r\n    }\r\n    return str\r\n  }\r\n\r\n  // Converts a UTF-8 string to ASCII string.\r\n  static utf82string(str: string): string {\r\n    return unescape(encodeURIComponent(str))\r\n  }\r\n\r\n  // Converts ascii string to a UTF-8 string.\r\n  static string2utf8(uriencoded: string): string {\r\n    return decodeURIComponent(escape(uriencoded))\r\n  }\r\n\r\n  // Converts a UTF-8 string to a byte array.\r\n  static utf82bytes(str: string): ByteArray {\r\n    const uriencoded = unescape(encodeURIComponent(str))\r\n    return this.string2bytes(uriencoded)\r\n  }\r\n\r\n  // Converts a byte array to a UTF-8 string.\r\n  static bytes2utf8(bytes: ByteArray): string {\r\n    const uriencoded = this.bytes2string(bytes)\r\n    return decodeURIComponent(escape(uriencoded))\r\n  }\r\n\r\n  // Returns a XOR b, where a and b are 16-byte byte arrays.\r\n  static blockXOR(a: ByteArray, b: ByteArray): ByteArray {\r\n    const xor = new Array(16) as ByteArray\r\n    for (let i = 0; i < 16; i++) {\r\n      xor[i] = a[i] ^ b[i]\r\n    }\r\n    return xor\r\n  }\r\n\r\n  // Returns a 16-byte initialization vector.\r\n  static blockIV(): ByteArray {\r\n    const r = new SecureRandom()\r\n    const IV = new Array(16) as ByteArray\r\n    r.nextBytes(IV)\r\n    return IV\r\n  }\r\n\r\n  // Returns a copy of bytes with zeros appended to the end\r\n  // so that the (length of bytes) % 16 === 0.\r\n  static pad16(bytes: ByteArray): ByteArray {\r\n    const newBytes = bytes.slice(0)\r\n    const padding = (16 - (bytes.length % 16)) % 16\r\n    for (let i = bytes.length; i < bytes.length + padding; i++) {\r\n      newBytes.push(0)\r\n    }\r\n    return newBytes\r\n  }\r\n\r\n  // Removes trailing zeros from a byte array.\r\n  static depad(bytes: ByteArray): ByteArray {\r\n    let newBytes = bytes.slice(0)\r\n    while (newBytes[newBytes.length - 1] === 0) {\r\n      newBytes = newBytes.slice(0, newBytes.length - 1)\r\n    }\r\n    return newBytes\r\n  }\r\n\r\n  // AES CBC Encryption.\r\n  static encryptAESCBC(plaintext: string, key: AESKey): string {\r\n    const exkey = key.slice(0)\r\n    aes.ExpandKey(exkey)\r\n    let blocks = this.utf82bytes(plaintext)\r\n    blocks = this.pad16(blocks)\r\n    let encryptedBlocks = this.blockIV()\r\n    for (let i = 0; i < blocks.length / 16; i++) {\r\n      let tempBlock = blocks.slice(i * 16, i * 16 + 16)\r\n      const prevBlock = encryptedBlocks.slice(i * 16, i * 16 + 16)\r\n      tempBlock = this.blockXOR(prevBlock, tempBlock)\r\n      aes.Encrypt(tempBlock, exkey)\r\n      encryptedBlocks = encryptedBlocks.concat(tempBlock)\r\n    }\r\n    const ciphertext = this.bytes2string(encryptedBlocks)\r\n    return this.b256to64(ciphertext)\r\n  }\r\n\r\n  // AES CBC Decryption.\r\n  static decryptAESCBC(encryptedText: string, key: AESKey): string {\r\n    const exkey = key.slice(0)\r\n    aes.ExpandKey(exkey)\r\n    const asciiText = this.b64to256(encryptedText)\r\n    const encryptedBlocks = this.string2bytes(asciiText)\r\n    let decryptedBlocks: ByteArray = []\r\n    for (let i = 1; i < encryptedBlocks.length / 16; i++) {\r\n      let tempBlock = encryptedBlocks.slice(i * 16, i * 16 + 16)\r\n      const prevBlock = encryptedBlocks.slice((i - 1) * 16, (i - 1) * 16 + 16)\r\n      aes.Decrypt(tempBlock, exkey)\r\n      tempBlock = this.blockXOR(prevBlock, tempBlock)\r\n      decryptedBlocks = decryptedBlocks.concat(tempBlock)\r\n    }\r\n    decryptedBlocks = this.depad(decryptedBlocks)\r\n    return this.bytes2utf8(decryptedBlocks)\r\n  }\r\n\r\n  // Wraps a str to 60 characters.\r\n  static wrap60(str: string): string {\r\n    let outstr = ''\r\n    for (let i = 0; i < str.length; i++) {\r\n      if (i % 60 === 0 && i !== 0) outstr += '\\n'\r\n      outstr += str[i]\r\n    }\r\n    return outstr\r\n  }\r\n\r\n  // Generate a random key for the AES-encrypted message. ciphertext.split\r\n  static generateAESKey(): AESKey {\r\n    const key = new Array(32) as ByteArray\r\n    const r = new SecureRandom()\r\n    r.nextBytes(key)\r\n    return key\r\n  }\r\n\r\n  // Generates an RSA key from a passphrase.\r\n  static generateRSAKey(passphrase: string, bitlength: number): RSAKey {\r\n    math.seedrandom(sha256(passphrase))\r\n    const rsa = new RSAKey()\r\n    rsa.generate(bitlength, '03')\r\n    return rsa\r\n  }\r\n\r\n  // Returns the ascii-armored version of the public key.\r\n  static publicKeyString(rsakey: RSAKey): string {\r\n    return this.b16to64(rsakey.n.toString(16))\r\n  }\r\n\r\n  // Returns an MD5 sum of a publicKeyString for easier identification.\r\n  static publicKeyID(publicKeyString: string): string {\r\n    return md5(publicKeyString)\r\n  }\r\n\r\n  static publicKeyFromString(str: string): RSAKey {\r\n    const N = this.b64to16(str.split('|')[0])\r\n    const E = '03'\r\n    const rsa = new RSAKey()\r\n    rsa.setPublic(N, E)\r\n    return rsa\r\n  }\r\n\r\n  static encrypt(\r\n    plaintext: string,\r\n    publickeystring: string,\r\n    signingkey: RSAKey,\r\n  ): { status: string } | { status: 'success'; cipher: string } {\r\n    {\r\n      let cipherblock = ''\r\n      const aeskey = this.generateAESKey()\r\n      try {\r\n        const publickey = this.publicKeyFromString(publickeystring)\r\n        cipherblock +=\r\n          this.b16to64(publickey.encrypt(this.bytes2string(aeskey))) + '?'\r\n      } catch (err) {\r\n        return { status: 'Invalid public key' }\r\n      }\r\n      if (signingkey) {\r\n        const signString = this.sign(plaintext, signingkey)\r\n        plaintext += magic\r\n        plaintext += this.publicKeyString(signingkey)\r\n        plaintext += magic\r\n        plaintext += signString\r\n      }\r\n      cipherblock += this.encryptAESCBC(plaintext, aeskey)\r\n      return { status: 'success', cipher: cipherblock }\r\n    }\r\n  }\r\n\r\n  static decrypt(\r\n    ciphertext: string,\r\n    key: RSAKey,\r\n  ): DecryptStatusSuccess | DecryptStatusFailure {\r\n    const cipherblock = ciphertext.split('?')\r\n    const aeskey = key.decrypt(this.b64to16(cipherblock[0]))\r\n    if (aeskey == null) {\r\n      return { status: 'failure' }\r\n    }\r\n    const aeskeyBytes = this.string2bytes(aeskey)\r\n    const plaintext = this.decryptAESCBC(cipherblock[1], aeskeyBytes).split(\r\n      magic,\r\n    )\r\n    if (plaintext.length > 1) {\r\n      return this._confirm(plaintext)\r\n    } else\r\n      return {\r\n        status: 'success',\r\n        plaintext: plaintext[0],\r\n        signature: 'unsigned',\r\n      } as DecryptStatusSuccessForSignature<'unsigned'>\r\n  }\r\n\r\n  static sign(plaintext: string, signingkey: RSAKey): string {\r\n    return this.b16to64(signingkey.signString(plaintext, 'sha256'))\r\n  }\r\n\r\n  static verify(plaintext: string[]): boolean {\r\n    const result = this._confirm(plaintext)\r\n    return result.status === 'success' && result.signature === 'verified'\r\n  }\r\n\r\n  private static _confirm(\r\n    plaintext: string[],\r\n  ): DecryptStatusSuccess | DecryptStatusFailure {\r\n    if (plaintext.length === 3) {\r\n      const publickey = this.publicKeyFromString(plaintext[1])\r\n      const signature = this.b64to16(plaintext[2])\r\n      if (publickey.verifyString(plaintext[0], signature)) {\r\n        return {\r\n          status: 'success',\r\n          plaintext: plaintext[0],\r\n          signature: 'verified',\r\n          publicKeyString: this.publicKeyString(publickey),\r\n        }\r\n      } else {\r\n        return {\r\n          status: 'success',\r\n          plaintext: plaintext[0],\r\n          signature: 'forged',\r\n          publicKeyString: this.publicKeyString(publickey),\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        status: 'failure',\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["aes","Sbox","ShiftRowTab","Sbox_Inv","Array","ShiftRowTab_Inv","xtime","Init","i","this","Done","length","ExpandKey","key","kl","ks","Rcon","temp","slice","j","Encrypt","block","l","AddRoundKey","SubBytes","ShiftRows","MixColumns","Decrypt","MixColumns_Inv","state","sbox","rkey","shifttab","h","concat","s0","s1","s2","s3","xh","h1","h2","pool","width","significance","Math","pow","overflow","startdenom","math","seedrandom","seed","use_entropy","mixkey","flatten","arguments","Date","getTime","arc4","ARC4","S","random","n","g","d","x","c","constructor","t","u","keylen","lowbits","count","s","r","obj","depth","result","typ","prop","indexOf","push","e","console","error","seedStr","smear","charCodeAt","mixed","forEach","v","String","fromCharCode","SeededRandom","nextBytes","ba","floor","Arcfour","init","next","rng_state","rng_pptr","rng_pool","rng_seed_time","rng_get_byte","SecureRandom","op_and","y","op_or","op_xor","op_andnot","BigInteger","static","BI_FP","a","b","fromNumber","fromInt","fromString","am","w","xl","m","copyTo","DV","k","fromRadix","mi","sh","intAt","charAt","DB","clamp","ZERO","subTo","DM","toString","negate","toRadix","km","p","int2char","abs","compareTo","bitLength","nbits","dlShiftTo","drShiftTo","max","lShiftTo","bs","cbs","bm","ds","rShiftTo","min","multiplyTo","squareTo","divRemTo","q","pm","pt","ts","ms","nsh","ys","y0","yt","F1","F2","d1","FV","d2","ONE","qd","mod","undefined","invDigit","isEven","exp","z","convert","r2","sqrTo","mulTo","revert","modPowInt","Classic","Montgomery","clone","intValue","byteValue","shortValue","chunkSize","LN2","log","signum","cs","substr","dMultiply","dAddOffset","testBit","bitwiseTo","shiftLeft","isProbablePrime","toByteArray","equals","op","f","and","or","xor","andNot","not","shiftRight","getLowestSetBit","lbit","bitCount","cbit","changeBit","setBit","clearBit","flipBit","addTo","add","subtract","multiply","square","divide","remainder","divideAndRemainder","NullExp","multiplyLowerTo","multiplyUpperTo","modPow","Barrett","k1","g2","is1","gcd","modInt","modInverse","ac","lowprimes","lplim","millerRabin","n1","BI_RC","rr","vv","reduce","mp","mpl","mph","um","mt2","u0","nNop","q3","mu","Utf8Encode","str","replace","utftext","sha256","process","env","NODEJS","msg","crypto","createHash","update","digest","safe_add","lsw","X","R","Ch","Maj","Sigma0256","Sigma1256","Gamma0256","binarray","hex_tab","binb2hex","K","HASH","W","T1","T2","core_sha256","bin","str2binb","sha1","rotate_left","cvt_hex","val","blockstart","A","B","C","D","E","H0","H1","H2","H3","H4","msg_len","word_array","toLowerCase","md5","RotateLeft","lValue","iShiftBits","AddUnsigned","lX","lY","lX8","lY8","lX4","lY4","lResult","FF","F","GG","G","HH","H","II","I","WordToHex","lByte","lCount","WordToHexValue","WordToHexValue_temp","AA","BB","CC","DD","lWordCount","lMessageLength","lNumberOfWords_temp1","lNumberOfWords","lWordArray","lBytePosition","lByteCount","ConvertToWordArray","parseBigInt","pkcs1pad2","rng","RSAKey","dmp1","dmq1","coeff","setPublic","N","parseInt","doPublic","encrypt","text","setPrivate","setPrivateEx","P","Q","DP","DQ","Error","generate","qs","ee","p1","q1","phi","doPrivate","xp","xq","decrypt","ctext","pkcs1unpad2","signString","_rsasign_signString","signStringWithSHA1","_rsasign_signStringWithSHA1","signStringWithSHA256","_rsasign_signStringWithSHA256","verifyHexSignatureForMessage","_rsasign_verifyHexSignatureForMessage","verifyString","_rsasign_verifyString","toJSON","JSON","stringify","json","parse","rsa","ret","_RSASIGN_DIHEAD","_RSASIGN_HASHHEXFUNC","_rsasign_getHexPaddedDigestInfoForString","keySize","hashAlg","pmStrLen","sHashHex","hashFunc","sHead","sTail","sMid","fLen","biPaddedMessage","_rsasign_getHexDigestInfoFromSig","biSig","hN","hE","biDecryptedSig","_rsasign_getDecryptSignatureBI","_rsasign_getAlgNameAndHashFromHexDisgestInfo","hDigestInfo","algName","head","len","substring","sMsg","hSig","digestInfoAry","ff","_rsasign_verifySignatureWithArgs","base64Chars","magic","tl","slop","bytes","unescape","encodeURIComponent","uriencoded","decodeURIComponent","escape","string2bytes","bytes2string","IV","newBytes","padding","plaintext","exkey","blocks","utf82bytes","pad16","encryptedBlocks","blockIV","tempBlock","prevBlock","blockXOR","ciphertext","b256to64","encryptedText","asciiText","b64to256","decryptedBlocks","depad","bytes2utf8","outstr","passphrase","bitlength","rsakey","b16to64","publicKeyString","b64to16","split","publickeystring","signingkey","cipherblock","aeskey","generateAESKey","publickey","publicKeyFromString","err","status","sign","encryptAESCBC","cipher","aeskeyBytes","decryptAESCBC","_confirm","signature"],"mappings":"4RAyBa,MAAAA,EAAa,CAExBC,KAAM,CACJ,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACpE,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GACvE,GAAI,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,EAAG,IAAK,EAAG,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,EAC1E,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IACvE,EAAG,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IACxE,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IACtE,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IACtE,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GACxE,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EACvE,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IACvE,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,GAAI,GAAI,GAAI,IACpE,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,EACvE,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IACrE,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IACvE,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAG1CC,YAAa,CACX,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAGpDC,SAAU,IAAIC,MAAc,KAC5BC,gBAAiB,IAAID,MAAc,IACnCE,MAAO,IAAIF,MAAc,KAEzBG,OACE,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAKC,KAAKN,SAASM,KAAKR,KAAKO,IAAMA,EAE5D,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAAKC,KAAKJ,gBAAgBI,KAAKP,YAAYM,IAAMA,EAEzE,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IACvBC,KAAKH,MAAME,GAAKA,GAAK,EACrBC,KAAKH,MAAM,IAAME,GAAMA,GAAK,EAAK,EAEpC,EAEDE,OACED,KAAKN,SAASQ,OAAS,EACvBF,KAAKN,SAASQ,OAAS,IACvBF,KAAKJ,gBAAgBM,OAAS,EAC9BF,KAAKJ,gBAAgBM,OAAS,GAC9BF,KAAKH,MAAMK,OAAS,EACpBF,KAAKH,MAAMK,OAAS,GACrB,EAEDC,UAAUC,GACR,MAAMC,EAAKD,EAAIF,OACf,IAAII,EACFC,EAAO,EACT,OAAQF,GACN,KAAK,GACHC,EAAK,IACL,MACF,KAAK,GACHA,EAAK,IACL,MACF,KAAK,GACHA,EAAK,IACL,MACF,QACE,KAAM,gEAEV,IAAK,IAAIP,EAAIM,EAAIN,EAAIO,EAAIP,GAAK,EAAG,CAC/B,IAAIS,EAAOJ,EAAIK,MAAMV,EAAI,EAAGA,GACxBA,EAAIM,GAAO,GACbG,EAAO,CACLjB,EAAIC,KAAKgB,EAAK,IAAMD,EACpBhB,EAAIC,KAAKgB,EAAK,IACdjB,EAAIC,KAAKgB,EAAK,IACdjB,EAAIC,KAAKgB,EAAK,MAEXD,IAAS,IAAM,MAAKA,GAAQ,MACxBF,EAAK,IAAMN,EAAIM,GAAO,KAC/BG,EAAO,CACLjB,EAAIC,KAAKgB,EAAK,IACdjB,EAAIC,KAAKgB,EAAK,IACdjB,EAAIC,KAAKgB,EAAK,IACdjB,EAAIC,KAAKgB,EAAK,MAElB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAKN,EAAIL,EAAIW,GAAKN,EAAIL,EAAIW,EAAIL,GAAMG,EAAKE,EACjE,CACF,EAEDC,QAAQC,EAAkBR,GACxB,MAAMS,EAAIT,EAAIF,OAEd,IAAIH,EACJ,IAFAR,EAAIuB,YAAYF,EAAOR,EAAIK,MAAM,EAAG,KAE/BV,EAAI,GAAIA,EAAIc,EAAI,GAAId,GAAK,GAC5BR,EAAIwB,SAASH,EAAOrB,EAAIC,MACxBD,EAAIyB,UAAUJ,EAAOrB,EAAIE,aACzBF,EAAI0B,WAAWL,GACfrB,EAAIuB,YAAYF,EAAOR,EAAIK,MAAMV,EAAGA,EAAI,KAE1CR,EAAIwB,SAASH,EAAOrB,EAAIC,MACxBD,EAAIyB,UAAUJ,EAAOrB,EAAIE,aACzBF,EAAIuB,YAAYF,EAAOR,EAAIK,MAAMV,EAAGc,GACrC,EAEDK,QAAQN,EAAkBR,GACxB,MAAMS,EAAIT,EAAIF,OACdX,EAAIuB,YAAYF,EAAOR,EAAIK,MAAMI,EAAI,GAAIA,IACzCtB,EAAIyB,UAAUJ,EAAOrB,EAAIK,iBACzBL,EAAIwB,SAASH,EAAOrB,EAAIG,UACxB,IAAK,IAAIK,EAAIc,EAAI,GAAId,GAAK,GAAIA,GAAK,GACjCR,EAAIuB,YAAYF,EAAOR,EAAIK,MAAMV,EAAGA,EAAI,KACxCR,EAAI4B,eAAeP,GACnBrB,EAAIyB,UAAUJ,EAAOrB,EAAIK,iBACzBL,EAAIwB,SAASH,EAAOrB,EAAIG,UAE1BH,EAAIuB,YAAYF,EAAOR,EAAIK,MAAM,EAAG,IACrC,EAEDM,SAASK,EAAkBC,GACzB,IAAK,IAAItB,EAAI,EAAGA,EAAI,GAAIA,IAAKqB,EAAMrB,GAAKsB,EAAKD,EAAMrB,GACpD,EAEDe,YAAYM,EAAkBE,GAC5B,IAAK,IAAIvB,EAAI,EAAGA,EAAI,GAAIA,IAAKqB,EAAMrB,IAAMuB,EAAKvB,EAC/C,EAEDiB,UAAUI,EAAkBG,GAC1B,MAAMC,GAAI,IAAI7B,OAAgB8B,OAAOL,GACrC,IAAK,IAAIrB,EAAI,EAAGA,EAAI,GAAIA,IAAKqB,EAAMrB,GAAKyB,EAAED,EAASxB,GACpD,EAEDkB,WAAWG,GACT,IAAK,IAAIrB,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,MAAM2B,EAAKN,EAAMrB,EAAI,GACnB4B,EAAKP,EAAMrB,EAAI,GACX6B,EAAKR,EAAMrB,EAAI,GACnB8B,EAAKT,EAAMrB,EAAI,GACXyB,EAAIE,EAAKC,EAAKC,EAAKC,EACzBT,EAAMrB,EAAI,IAAMyB,EAAIjC,EAAIM,MAAM6B,EAAKC,GACnCP,EAAMrB,EAAI,IAAMyB,EAAIjC,EAAIM,MAAM8B,EAAKC,GACnCR,EAAMrB,EAAI,IAAMyB,EAAIjC,EAAIM,MAAM+B,EAAKC,GACnCT,EAAMrB,EAAI,IAAMyB,EAAIjC,EAAIM,MAAMgC,EAAKH,EACpC,CACF,EAEDP,eAAeC,GACb,IAAK,IAAIrB,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,MAAM2B,EAAKN,EAAMrB,EAAI,GACnB4B,EAAKP,EAAMrB,EAAI,GACX6B,EAAKR,EAAMrB,EAAI,GACnB8B,EAAKT,EAAMrB,EAAI,GACXyB,EAAIE,EAAKC,EAAKC,EAAKC,EACnBC,EAAKvC,EAAIM,MAAM2B,GACfO,EAAKxC,EAAIM,MAAMN,EAAIM,MAAMiC,EAAKJ,EAAKE,IAAOJ,EAC1CQ,EAAKzC,EAAIM,MAAMN,EAAIM,MAAMiC,EAAKH,EAAKE,IAAOL,EAChDJ,EAAMrB,EAAI,IAAMgC,EAAKxC,EAAIM,MAAM6B,EAAKC,GACpCP,EAAMrB,EAAI,IAAMiC,EAAKzC,EAAIM,MAAM8B,EAAKC,GACpCR,EAAMrB,EAAI,IAAMgC,EAAKxC,EAAIM,MAAM+B,EAAKC,GACpCT,EAAMrB,EAAI,IAAMiC,EAAKzC,EAAIM,MAAMgC,EAAKH,EACrC,CACF,GCtFGO,EAAiB,GACjBC,EAAQ,IAKRC,EAAeC,KAAKC,IAAI,EAAG,IAC3BC,EAA0B,EAAfH,EACXI,EAAaH,KAAKC,IAAIH,EANb,GAQFM,EAAO,CAKlBC,WAAWC,EAAcC,GAAc,GACrC,MAAMvC,EAAgB,GAGtBsC,EAAOE,EACLC,EACEF,EACI,CAACD,EAAMT,GACPa,UAAU5C,OACVwC,EACA,EAAC,IAAIK,MAAOC,UAAWf,GAC3B,GAEF7B,GAIF,MAAM6C,EAAO,IAAIC,EAAK9C,GA6BtB,OA1BAwC,EAAOK,EAAKE,EAAGlB,GAKfO,EAAKY,OAAS,WAEZ,IAAIC,EAAIJ,EAAKK,EAxCJ,GAyCLC,EAAIhB,EACJiB,EAAI,EACR,KAAOH,EAAIlB,GAETkB,GAAKA,EAAIG,GAAKtB,EACdqB,GAAKrB,EACLsB,EAAIP,EAAKK,EAAE,GAEb,KAAOD,GAAKf,GAEVe,GAAK,EACLE,GAAK,EACLC,KAAO,EAET,OAAQH,EAAIG,GAAKD,CACnB,EAGOb,CACR,EAEDU,OAAQ,WACN,OAAOhB,KAAKgB,QACb,GAcH,MAAMF,EACJnD,EAAI,EACJW,EAAI,EACJyC,EAAc,GACdM,EAAc,GAEdC,YAAYtD,GACV,IAAIuD,EACFC,EACAC,EAASzD,EAAIF,OACXH,EAAI,EACNW,EAAI,EAQN,IALKmD,IACHzD,EAAM,CAACyD,MAIF9D,EAAImC,GACTlC,KAAKmD,EAAEpD,GAAKA,IAEd,IAAKA,EAAI,EAAGA,EAAImC,EAAOnC,IACrB4D,EAAI3D,KAAKmD,EAAEpD,GACXW,EAAIoD,EAAQpD,EAAIiD,EAAIvD,EAAIL,EAAI8D,IAC5BD,EAAI5D,KAAKmD,EAAEzC,GACXV,KAAKmD,EAAEpD,GAAK6D,EACZ5D,KAAKmD,EAAEzC,GAAKiD,EAKd3D,KAAKsD,EAAEpB,EACR,CAGDoB,EAAES,GACA,MAAMC,EAAIhE,KAAKmD,EACf,IAAIpD,EAAI+D,EAAQ9D,KAAKD,EAAI,GACrB4D,EAAIK,EAAEjE,GACNW,EAAIoD,EAAQ9D,KAAKU,EAAIiD,GACrBC,EAAII,EAAEtD,GACVsD,EAAEjE,GAAK6D,EACPI,EAAEtD,GAAKiD,EACP,IAAIM,EAAID,EAAEF,EAAQH,EAAIC,IACtB,OAASG,GACPhE,EAAI+D,EAAQ/D,EAAI,GAChB4D,EAAIK,EAAEjE,GACNW,EAAIoD,EAAQpD,EAAIiD,GAChBC,EAAII,EAAEtD,GACNsD,EAAEjE,GAAK6D,EACPI,EAAEtD,GAAKiD,EACPM,EAAIA,EAAI/B,EAAQ8B,EAAEF,EAAQH,EAAIC,IAIhC,OAFA5D,KAAKD,EAAIA,EACTC,KAAKU,EAAIA,EACFuD,CACR,EAYH,SAASpB,EAAQqB,EAAcC,GAC7B,MAAMC,EAAyB,GACzBC,SAAaH,EACnB,GAAIC,GAAiB,WAARE,EACX,IAAK,MAAMC,KAAQJ,EACjB,GAAII,EAAKC,QAAQ,KAAO,EAEtB,IACEH,EAAOI,KACL3B,EAASqB,EAAgCI,GAAOH,EAAQ,GAI3D,CAFC,MAAOM,GACPC,QAAQC,MAAMF,EACf,CAIP,OAAOL,EAAOlE,OAASkE,EAASF,GAAe,WAARG,EAAmB,KAAO,GACnE,CASA,SAASzB,EAAOF,EAAetC,GAC7B,MAAMwE,EAAUlC,EAAO,GACvB,IAAImC,EAAQ,EACZ,IAAK,IAAI9E,EAAI,EAAGA,EAAI6E,EAAQ1E,OAAQH,IAClCK,EAAI0D,EAAQ/D,IAAM+D,GACfe,GAA2B,GAAlBzE,EAAI0D,EAAQ/D,KAAY6E,EAAQE,WAAW/E,IAGzD,IAAIgF,EAAQ,GAEZ,OADA3E,EAAI4E,SAASC,GAAOF,GAASG,OAAOC,aAAaF,KAC1CF,CACT,CAMA,SAASjB,EAAQT,GACf,OAAQ,IAADA,CACT,CASAT,EAAOR,KAAKgB,SAAUnB,SAKTmD,EACXC,UAAUC,GACR,IAAK,IAAIvF,EAAI,EAAGA,EAAIuF,EAAGpF,OAAQH,IAC7BuF,EAAGvF,GAAKqC,KAAKmD,MAAsB,IAAhB/C,EAAKY,SAE3B,EAIH,MAAMoC,EACJzF,EAAI,EACJW,EAAI,EACJyC,EAAc,GAGdsC,KAAKrF,GACH,IAAIL,EAAGW,EAAGiD,EACV,IAAK5D,EAAI,EAAGA,EAAI,MAAOA,EAAGC,KAAKmD,EAAEpD,GAAKA,EAEtC,IADAW,EAAI,EACCX,EAAI,EAAGA,EAAI,MAAOA,EACrBW,EAAKA,EAAIV,KAAKmD,EAAEpD,GAAKK,EAAIL,EAAIK,EAAIF,QAAW,IAC5CyD,EAAI3D,KAAKmD,EAAEpD,GACXC,KAAKmD,EAAEpD,GAAKC,KAAKmD,EAAEzC,GACnBV,KAAKmD,EAAEzC,GAAKiD,EAEd3D,KAAKD,EAAI,EACTC,KAAKU,EAAI,CACV,CAEDgF,OACE1F,KAAKD,EAAKC,KAAKD,EAAI,EAAK,IACxBC,KAAKU,EAAKV,KAAKU,EAAIV,KAAKmD,EAAEnD,KAAKD,GAAM,IACrC,MAAM4D,EAAI3D,KAAKmD,EAAEnD,KAAKD,GAGtB,OAFAC,KAAKmD,EAAEnD,KAAKD,GAAKC,KAAKmD,EAAEnD,KAAKU,GAC7BV,KAAKmD,EAAEnD,KAAKU,GAAKiD,EACV3D,KAAKmD,EAAGQ,EAAI3D,KAAKmD,EAAEnD,KAAKD,GAAM,IACtC,EAkBH,IAAI4F,EAEAC,EADAC,EAAqB,GAazB,SAASC,IATT,IAAsBtC,KAUP,IAAIT,MAAOC,UATxB6C,EAASD,MAAmB,IAAJpC,EACxBqC,EAASD,MAAgBpC,GAAK,EAAK,IACnCqC,EAASD,MAAgBpC,GAAK,GAAM,IACpCqC,EAASD,MAAgBpC,GAAK,GAAM,IAChCoC,GAlBY,MAkBWA,GAlBX,IAwBlB,CAGA,IAAKC,EAAU,CAGb,IAAIlC,EACJ,IAHAkC,EAAW,GACXD,EAAW,EAEJA,EA/BS,KAiCdjC,EAAIvB,KAAKmD,MAAM,MAAQnD,KAAKgB,UAC5ByC,EAASD,KAAcjC,IAAM,EAC7BkC,EAASD,KAAkB,IAAJjC,EAEzBiC,EAAW,EACXE,GAGD,CAED,SAASC,IACP,IAAKJ,EAAW,CAId,IAHAG,IACAH,EAnDK,IAAIH,EAoDTG,EAAUF,KAAKI,GACVD,EAAW,EAAGA,EAAWC,EAAS3F,SAAU0F,EAC/CC,EAASD,GAAY,EACvBA,EAAW,CAEZ,CAED,OAAOD,EAAUD,MACnB,OAEaM,EACXX,UAAUC,GACR,IAAIvF,EACJ,IAAKA,EAAI,EAAGA,EAAIuF,EAAGpF,SAAUH,EAAGuF,EAAGvF,GAAKgG,GACzC,EClZU,MAAAE,EAAa,CAACzC,EAAG0C,IAAM1C,EAAI0C,EAC3BC,EAAY,CAAC3C,EAAG0C,IAAM1C,EAAI0C,EAC1BE,EAAa,CAAC5C,EAAG0C,IAAM1C,EAAI0C,EAC3BG,EAAgB,CAAC7C,EAAG0C,IAAM1C,GAAK0C,QAK/BI,EACXC,UAJY,GAKZA,WAAa,GALD,IAKe,EAC3BA,UAAY,GANA,GAOZA,UAAYnE,KAAKC,IAAI,EANT,IAOZkE,UAAYC,GACZD,UAAY,EAEZA,YAAc,IAAID,EAAW,GAC7BC,WAAa,IAAID,EAAW,GAG5BtC,EAAI,EACJL,EAAI,EAGJD,YACE+C,EACAC,EACAjD,GAEIgD,IACE,iBAAoBA,EAClBC,EACF1G,KAAK2G,WAAWF,EAAGC,EAAGjD,GAGtBzD,KAAK4G,QAAQH,GAGfzG,KAAK6G,WAAWJ,EAAIC,GAAgB,KAGzC,CAKDI,GACE/G,EACAyD,EACAuD,EACArG,EACA+C,EACAJ,GAEA,MAAM2D,EAAS,MAAJxD,EACT1B,EAAK0B,GAAK,GACZ,OAASH,GAAK,GAAG,CACf,IAAIxC,EAAc,MAAVb,KAAKD,GACb,MAAMyB,EAAIxB,KAAKD,MAAQ,GACjBkH,EAAInF,EAAKjB,EAAIW,EAAIwF,EACvBnG,EAAImG,EAAKnG,IAAU,MAAJoG,IAAe,IAAMF,EAAErG,IAAU,WAAJ+C,GAC5CA,GAAK5C,IAAM,KAAOoG,IAAM,IAAMnF,EAAKN,GAAKiC,IAAM,IAC9CsD,EAAErG,KAAW,WAAJG,CACV,CACD,OAAO4C,CACR,CAGDyD,OAAOjD,GACL,IAAK,IAAIlE,EAAIC,KAAK2D,EAAI,EAAG5D,GAAK,IAAKA,EAAGkE,EAAElE,GAAKC,KAAKD,GAClDkE,EAAEN,EAAI3D,KAAK2D,EACXM,EAAED,EAAIhE,KAAKgE,CACZ,CAGD4C,QAAQpD,GACNxD,KAAK2D,EAAI,EACT3D,KAAKgE,EAAIR,EAAI,GAAK,EAAI,EAClBA,EAAI,EAAGxD,KAAK,GAAKwD,EACZA,GAAK,EAAGxD,KAAK,GAAKwD,EAAI8C,EAAWa,GACrCnH,KAAK2D,EAAI,CACf,CAGDkD,WAAW7C,EAAsB0C,GAC/B,IAAIU,EACJ,GAAU,KAANV,EAAUU,EAAI,OACb,GAAU,IAANV,EAASU,EAAI,OACjB,GAAU,MAANV,EAAWU,EAAI,OAEnB,GAAU,IAANV,EAASU,EAAI,OACjB,GAAU,KAANV,EAAUU,EAAI,MAClB,IAAU,IAANV,EAGP,YADA1G,KAAKqH,UAAUrD,EAAa0C,GAFZU,EAAI,CAIrB,CACDpH,KAAK2D,EAAI,EACT3D,KAAKgE,EAAI,EACT,IAAIjE,EAAIiE,EAAE9D,OACRoH,GAAK,EACLC,EAAK,EACP,OAASxH,GAAK,GAAG,CACf,MAAMyD,EAAU,IAAN4D,EAAWpD,EAAEjE,GAAuByH,EAAMxD,EAAajE,GAC7DyD,EAAI,EAC0B,MAA3BQ,EAAayD,OAAO1H,KAAYuH,GAAK,IAG5CA,GAAK,EACM,IAAPC,EAAUvH,KAAKA,KAAK2D,KAAOH,EACtB+D,EAAKH,EAAId,EAAWoB,IAC3B1H,KAAKA,KAAK2D,EAAI,KAAOH,GAAM,GAAM8C,EAAWoB,GAAKH,GAAO,IAAOA,EAC/DvH,KAAKA,KAAK2D,KAAOH,GAAM8C,EAAWoB,GAAKH,GAClCvH,KAAKA,KAAK2D,EAAI,IAAMH,GAAK+D,EAChCA,GAAMH,EACFG,GAAMjB,EAAWoB,KAAIH,GAAMjB,EAAWoB,IAC3C,CACS,IAANN,GAAyC,IAAV,IAAlBpD,EAAE,MACjBhE,KAAKgE,GAAK,EACNuD,EAAK,IAAGvH,KAAKA,KAAK2D,EAAI,KAAQ,GAAM2C,EAAWoB,GAAKH,GAAO,GAAMA,IAEvEvH,KAAK2H,QACDL,GAAIhB,EAAWsB,KAAKC,MAAM7H,KAAMA,KACrC,CAGD2H,QACE,MAAMlE,EAAIzD,KAAKgE,EAAIsC,EAAWwB,GAC9B,KAAO9H,KAAK2D,EAAI,GAAK3D,KAAKA,KAAK2D,EAAI,KAAOF,KAAKzD,KAAK2D,CACrD,CAGDoE,SAASrB,EAAI,IACX,GAAI1G,KAAKgE,EAAI,EAAG,MAAO,IAAMhE,KAAKgI,SAASD,SAASrB,GACpD,IAAIU,EACJ,GAAU,KAANV,EAAUU,EAAI,OACb,GAAU,IAANV,EAASU,EAAI,OACjB,GAAU,IAANV,EAASU,EAAI,OACjB,GAAU,KAANV,EAAUU,EAAI,OAClB,GAAU,KAANV,EAAUU,EAAI,MAClB,IAAU,IAANV,EACJ,OAAO1G,KAAKiI,QAAQvB,GADPU,EAAI,CACK,CAC3B,MAAMc,GAAM,GAAKd,GAAK,EACtB,IAAI7D,EACF0D,GAAI,EACJhD,EAAI,GACJlE,EAAIC,KAAK2D,EACPwE,EAAI7B,EAAWoB,GAAO3H,EAAIuG,EAAWoB,GAAMN,EAC/C,GAAIrH,KAAM,EAKR,IAJIoI,EAAI7B,EAAWoB,KAAOnE,EAAIvD,KAAKD,IAAMoI,GAAK,IAC5ClB,GAAI,EACJhD,EAAImE,EAAS7E,IAERxD,GAAK,GACNoI,EAAIf,GACN7D,GAAKvD,KAAKD,IAAO,GAAKoI,GAAK,IAAQf,EAAIe,EACvC5E,GAAKvD,OAAOD,KAAOoI,GAAK7B,EAAWoB,GAAKN,KAExC7D,EAAKvD,KAAKD,KAAOoI,GAAKf,GAAMc,EACxBC,GAAK,IACPA,GAAK7B,EAAWoB,KACd3H,IAGFwD,EAAI,IAAG0D,GAAI,GACXA,IAAGhD,GAAKmE,EAAS7E,IAGzB,OAAO0D,EAAIhD,EAAI,GAChB,CAGD+D,SACE,MAAM/D,EAAI,IAAIqC,EAEd,OADAA,EAAWsB,KAAKC,MAAM7H,KAAMiE,GACrBA,CACR,CAGDoE,MACE,OAAOrI,KAAKgE,EAAI,EAAIhE,KAAKgI,SAAWhI,IACrC,CAGDsI,UAAU7B,GACR,IAAIxC,EAAIjE,KAAKgE,EAAIyC,EAAEzC,EACnB,GAAU,IAANC,EAAS,OAAOA,EACpB,IAAIlE,EAAIC,KAAK2D,EAEb,GADAM,EAAIlE,EAAI0G,EAAE9C,EACA,IAANM,EAAS,OAAOA,EACpB,OAASlE,GAAK,MAAgC,IAAxBkE,EAAIjE,KAAKD,GAAK0G,EAAE1G,IAAW,OAAOkE,EACxD,OAAO,CACR,CAGDsE,YACE,OAAIvI,KAAK2D,GAAK,EAAU,EAEtB2C,EAAWoB,IAAM1H,KAAK2D,EAAI,GAC1B6E,EAAMxI,KAAKA,KAAK2D,EAAI,GAAM3D,KAAKgE,EAAIsC,EAAWwB,GAEjD,CAGDW,UAAUpF,EAAWY,GACnB,IAAIlE,EACJ,IAAKA,EAAIC,KAAK2D,EAAI,EAAG5D,GAAK,IAAKA,EAAGkE,EAAElE,EAAIsD,GAAKrD,KAAKD,GAClD,IAAKA,EAAIsD,EAAI,EAAGtD,GAAK,IAAKA,EAAGkE,EAAElE,GAAK,EACpCkE,EAAEN,EAAI3D,KAAK2D,EAAIN,EACfY,EAAED,EAAIhE,KAAKgE,CACZ,CAGD0E,UAAUrF,EAAWY,GACnB,IAAK,IAAIlE,EAAIsD,EAAGtD,EAAIC,KAAK2D,IAAK5D,EAAGkE,EAAElE,EAAIsD,GAAKrD,KAAKD,GACjDkE,EAAEN,EAAIvB,KAAKuG,IAAI3I,KAAK2D,EAAIN,EAAG,GAC3BY,EAAED,EAAIhE,KAAKgE,CACZ,CAGD4E,SAASvF,EAAWY,GAClB,MAAM4E,EAAKxF,EAAIiD,EAAWoB,GACpBoB,EAAMxC,EAAWoB,GAAKmB,EACtBE,GAAM,GAAKD,GAAO,EAClBE,EAAK5G,KAAKmD,MAAMlC,EAAIiD,EAAWoB,IACrC,IACE3H,EADE0D,EAAKzD,KAAKgE,GAAK6E,EAAMvC,EAAWwB,GAEpC,IAAK/H,EAAIC,KAAK2D,EAAI,EAAG5D,GAAK,IAAKA,EAC7BkE,EAAElE,EAAIiJ,EAAK,GAAMhJ,KAAKD,IAAM+I,EAAOrF,EACnCA,GAAKzD,KAAKD,GAAKgJ,IAAOF,EAExB,IAAK9I,EAAIiJ,EAAK,EAAGjJ,GAAK,IAAKA,EAAGkE,EAAElE,GAAK,EACrCkE,EAAE+E,GAAMvF,EACRQ,EAAEN,EAAI3D,KAAK2D,EAAIqF,EAAK,EACpB/E,EAAED,EAAIhE,KAAKgE,EACXC,EAAE0D,OACH,CAGDsB,SAAS5F,EAAWY,GAClBA,EAAED,EAAIhE,KAAKgE,EACX,MAAMgF,EAAK5G,KAAKmD,MAAMlC,EAAIiD,EAAWoB,IACrC,GAAIsB,GAAMhJ,KAAK2D,EAEb,YADAM,EAAEN,EAAI,GAGR,MAAMkF,EAAKxF,EAAIiD,EAAWoB,GACpBoB,EAAMxC,EAAWoB,GAAKmB,EACtBE,GAAM,GAAKF,GAAM,EACvB5E,EAAE,GAAKjE,KAAKgJ,IAAOH,EACnB,IAAK,IAAI9I,EAAIiJ,EAAK,EAAGjJ,EAAIC,KAAK2D,IAAK5D,EACjCkE,EAAElE,EAAIiJ,EAAK,KAAOhJ,KAAKD,GAAKgJ,IAAOD,EACnC7E,EAAElE,EAAIiJ,GAAMhJ,KAAKD,IAAM8I,EAErBA,EAAK,IAAG5E,EAAEjE,KAAK2D,EAAIqF,EAAK,KAAOhJ,KAAKgE,EAAI+E,IAAOD,GACnD7E,EAAEN,EAAI3D,KAAK2D,EAAIqF,EACf/E,EAAE0D,OACH,CAGDE,MAAMpB,EAAexC,GACnB,MAAMgD,EAAI7E,KAAK8G,IAAIzC,EAAE9C,EAAG3D,KAAK2D,GAC7B,IAAI5D,EAAI,EACN0D,EAAI,EACN,KAAO1D,EAAIkH,GACTxD,GAAKzD,KAAKD,GAAK0G,EAAE1G,GACjBkE,EAAElE,KAAO0D,EAAI6C,EAAWwB,GACxBrE,IAAM6C,EAAWoB,GAEnB,GAAIjB,EAAE9C,EAAI3D,KAAK2D,EAAG,CAEhB,IADAF,GAAKgD,EAAEzC,EACAjE,EAAIC,KAAK2D,GACdF,GAAKzD,KAAKD,GACVkE,EAAElE,KAAO0D,EAAI6C,EAAWwB,GACxBrE,IAAM6C,EAAWoB,GAEnBjE,GAAKzD,KAAKgE,CACX,KAAM,CAEL,IADAP,GAAKzD,KAAKgE,EACHjE,EAAI0G,EAAE9C,GACXF,GAAKgD,EAAE1G,GACPkE,EAAElE,KAAO0D,EAAI6C,EAAWwB,GACxBrE,IAAM6C,EAAWoB,GAEnBjE,GAAKgD,EAAEzC,CACR,CACDC,EAAED,EAAIP,EAAI,GAAK,EAAI,EACfA,GAAK,EAAGQ,EAAElE,KAAOuG,EAAWa,GAAK1D,EAC5BA,EAAI,IAAGQ,EAAElE,KAAO0D,GACzBQ,EAAEN,EAAI5D,EACNkE,EAAE0D,OACH,CAIDwB,WAAW1C,EAAexC,GACxB,MAAMT,EAAIxD,KAAKqI,MACbnC,EAAIO,EAAE4B,MACR,IAAItI,EAAIyD,EAAEG,EAEV,IADAM,EAAEN,EAAI5D,EAAImG,EAAEvC,IACH5D,GAAK,GAAGkE,EAAElE,GAAK,EACxB,IAAKA,EAAI,EAAGA,EAAImG,EAAEvC,IAAK5D,EAAGkE,EAAElE,EAAIyD,EAAEG,GAAKH,EAAEsD,GAAG,EAAGZ,EAAEnG,GAAIkE,EAAGlE,EAAG,EAAGyD,EAAEG,GAChEM,EAAED,EAAI,EACNC,EAAE0D,QACE3H,KAAKgE,IAAMyC,EAAEzC,GAAGsC,EAAWsB,KAAKC,MAAM5D,EAAGA,EAC9C,CAGDmF,SAASnF,GACP,MAAMT,EAAIxD,KAAKqI,MACf,IAAItI,EAAKkE,EAAEN,EAAI,EAAIH,EAAEG,EACrB,OAAS5D,GAAK,GAAGkE,EAAElE,GAAK,EACxB,IAAKA,EAAI,EAAGA,EAAIyD,EAAEG,EAAI,IAAK5D,EAAG,CAC5B,MAAM0D,EAAID,EAAEsD,GAAG/G,EAAGyD,EAAEzD,GAAIkE,EAAG,EAAIlE,EAAG,EAAG,IAElCkE,EAAElE,EAAIyD,EAAEG,IAAMH,EAAEsD,GAAG/G,EAAI,EAAG,EAAIyD,EAAEzD,GAAIkE,EAAG,EAAIlE,EAAI,EAAG0D,EAAGD,EAAEG,EAAI5D,EAAI,KAChEuG,EAAWa,KAEXlD,EAAElE,EAAIyD,EAAEG,IAAM2C,EAAWa,GACzBlD,EAAElE,EAAIyD,EAAEG,EAAI,GAAK,EAEpB,CACGM,EAAEN,EAAI,IAAGM,EAAEA,EAAEN,EAAI,IAAMH,EAAEsD,GAAG/G,EAAGyD,EAAEzD,GAAIkE,EAAG,EAAIlE,EAAG,EAAG,IACtDkE,EAAED,EAAI,EACNC,EAAE0D,OACH,CAID0B,SAASpC,EAAeqC,EAAgBrF,GACtC,MAAMsF,EAAKtC,EAAEoB,MACb,GAAIkB,EAAG5F,GAAK,EAAG,OACf,MAAM6F,EAAKxJ,KAAKqI,MAChB,GAAImB,EAAG7F,EAAI4F,EAAG5F,EAGZ,OAFI2F,GAAGA,EAAE1C,QAAQ,QACb3C,GAAGjE,KAAKkH,OAAOjD,IAGhBA,IAAGA,EAAI,IAAIqC,GAChB,MAAMJ,EAAI,IAAII,EACZmD,EAAKzJ,KAAKgE,EACV0F,EAAKzC,EAAEjD,EACH2F,EAAMrD,EAAWoB,GAAKc,EAAMe,EAAGA,EAAG5F,EAAI,IACxCgG,EAAM,GACRJ,EAAGX,SAASe,EAAKzD,GACjBsD,EAAGZ,SAASe,EAAK1F,KAEjBsF,EAAGrC,OAAOhB,GACVsD,EAAGtC,OAAOjD,IAEZ,MAAM2F,EAAK1D,EAAEvC,EACPkG,EAAK3D,EAAE0D,EAAK,GAClB,GAAW,IAAPC,EAAU,OACd,MAAMC,EACJD,GAAM,GAAKvD,EAAWyD,KAAOH,EAAK,EAAI1D,EAAE0D,EAAK,IAAMtD,EAAW0D,GAAK,GAC/DC,EAAK3D,EAAW4D,GAAKJ,EACzBK,GAAM,GAAK7D,EAAWyD,IAAMD,EAC5BrF,EAAI,GAAK6B,EAAW0D,GACpBrG,EAAI2F,GAAK,IAAIhD,EACf,IAAIvG,EAAIkE,EAAEN,EACRjD,EAAIX,EAAI6J,EAQV,IAPA1D,EAAEuC,UAAU/H,EAAGiD,GACXM,EAAEqE,UAAU3E,IAAM,IACpBM,EAAEA,EAAEN,KAAO,EACXM,EAAE4D,MAAMlE,EAAGM,IAEbqC,EAAW8D,IAAI3B,UAAUmB,EAAIjG,GAC7BA,EAAEkE,MAAM3B,EAAGA,GACJA,EAAEvC,EAAIiG,GAAI1D,EAAEA,EAAEvC,KAAO,EAC5B,OAASjD,GAAK,GAAG,CAEf,IAAI2J,EACFpG,IAAIlE,KAAO8J,EACPvD,EAAWwB,GACX1F,KAAKmD,MAAMtB,EAAElE,GAAKkK,GAAMhG,EAAElE,EAAI,GAAK0E,GAAK0F,GAC9C,IAAKlG,EAAElE,IAAMmG,EAAEY,GAAG,EAAGuD,EAAIpG,EAAGvD,EAAG,EAAGkJ,IAAOS,EAIvC,IAFAnE,EAAEuC,UAAU/H,EAAGiD,GACfM,EAAE4D,MAAMlE,EAAGM,GACJA,EAAElE,KAAOsK,GAAIpG,EAAE4D,MAAMlE,EAAGM,EAElC,CACGqF,IACFrF,EAAEyE,UAAUkB,EAAIN,GACZG,IAAOC,GAAIpD,EAAWsB,KAAKC,MAAMyB,EAAGA,IAE1CrF,EAAEN,EAAIiG,EACN3F,EAAE0D,QACEgC,EAAM,GAAG1F,EAAEgF,SAASU,EAAK1F,GACzBwF,EAAK,GAAGnD,EAAWsB,KAAKC,MAAM5D,EAAGA,EACtC,CAGDqG,IAAI7D,GACF,MAAMxC,EAAI,IAAIqC,EAGd,OAFAtG,KAAKqI,MAAMgB,SAAS5C,OAAG8D,EAAWtG,GAC9BjE,KAAKgE,EAAI,GAAKC,EAAEqE,UAAUhC,EAAWsB,MAAQ,GAAGnB,EAAEoB,MAAM5D,EAAGA,GACxDA,CACR,CAYDuG,WACE,GAAIxK,KAAK2D,EAAI,EAAG,OAAO,EACvB,MAAMH,EAAIxD,KAAK,GACf,GAAgB,IAAP,EAAJwD,GAAc,OAAO,EAC1B,IAAI0C,EAAQ,EAAJ1C,EAQR,OAPA0C,EAAKA,GAAK,GAAS,GAAJ1C,GAAW0C,GAAM,GAChCA,EAAKA,GAAK,GAAS,IAAJ1C,GAAY0C,GAAM,IACjCA,EAAKA,GAAK,IAAW,MAAJ1C,GAAc0C,EAAK,QAAY,MAGhDA,EAAKA,GAAK,EAAM1C,EAAI0C,EAAKI,EAAWa,IAAQb,EAAWa,GAEhDjB,EAAI,EAAII,EAAWa,GAAKjB,GAAKA,CACrC,CAGDuE,SACE,OAA+C,KAAvCzK,KAAK2D,EAAI,EAAc,EAAV3D,KAAK,GAASA,KAAKgE,EACzC,CAGD0G,IAAIjG,EAAWkG,GACb,GAAIlG,EAAI,YAAcA,EAAI,EAAG,OAAO6B,EAAW8D,IAC/C,MAAM9G,EAAIqH,EAAEC,QAAQ5K,MACpB,IAAIiE,EAAI,IAAIqC,EACVuE,EAAK,IAAIvE,EACTvG,EAAIyI,EAAM/D,GAAK,EAEjB,IADAnB,EAAE4D,OAAOjD,KACAlE,GAAK,GAEZ,GADA4K,EAAEG,MAAM7G,EAAG4G,IACNpG,EAAK,GAAK1E,GAAM,EAAG4K,EAAEI,MAAMF,EAAIvH,EAAGW,OAClC,CACH,MAAMN,EAAIM,EACVA,EAAI4G,EACJA,EAAKlH,CACN,CAEH,OAAOgH,EAAEK,OAAO/G,EACjB,CAGDgH,UAAUxG,EAAWwC,GACnB,IAAI0D,EAGJ,OAF2BA,EAAvBlG,EAAI,KAAOwC,EAAEwD,SAAc,IAAIS,EAAQjE,GAClC,IAAIkE,EAAWlE,GACjBjH,KAAK0K,IAAIjG,EAAGkG,EACpB,CAEDS,QACE,MAAMnH,EAAI,IAAIqC,EAEd,OADAtG,KAAKkH,OAAOjD,GACLA,CACR,CAGDoH,WACE,GAAIrL,KAAKgE,EAAI,EAAG,CACd,GAAe,IAAXhE,KAAK2D,EAAS,OAAO3D,KAAK,GAAKsG,EAAWa,GACzC,GAAe,IAAXnH,KAAK2D,EAAS,OAAQ,CAChC,KAAM,IAAe,IAAX3D,KAAK2D,EAAS,OAAO3D,KAAK,GAChC,GAAe,IAAXA,KAAK2D,EAAS,OAAO,CAAC,CAE/B,OACI3D,KAAK,IAAO,GAAM,GAAKsG,EAAWoB,IAAO,IAAOpB,EAAWoB,GAAM1H,KAAK,EAE3E,CAGDsL,YACE,OAAkB,IAAXtL,KAAK2D,EAAU3D,KAAKgE,EAAKhE,KAAK,IAAM,IAAO,EACnD,CAGDuL,aACE,OAAkB,IAAXvL,KAAK2D,EAAU3D,KAAKgE,EAAKhE,KAAK,IAAM,IAAO,EACnD,CAGDwL,UAAUvH,GACR,OAAO7B,KAAKmD,MAAOnD,KAAKqJ,IAAMnF,EAAWoB,GAAMtF,KAAKsJ,IAAIzH,GACzD,CAGD0H,SACE,OAAI3L,KAAKgE,EAAI,GAAW,EACfhE,KAAK2D,GAAK,GAAiB,IAAX3D,KAAK2D,GAAW3D,KAAK,IAAM,EAAW,EACnD,CACb,CAGDiI,QAAQvB,GAEN,GADKA,IAAGA,EAAI,IACU,IAAlB1G,KAAK2L,UAAkBjF,EAAI,GAAKA,EAAI,GAAI,MAAO,IACnD,MAAMkF,EAAK5L,KAAKwL,UAAU9E,GACpBD,EAAIrE,KAAKC,IAAIqE,EAAGkF,GAChBrI,EAAI,IAAI+C,EAAWG,GACvBP,EAAI,IAAII,EACRqE,EAAI,IAAIrE,EACV,IAAIrC,EAAI,GAER,IADAjE,KAAKqJ,SAAS9F,EAAG2C,EAAGyE,GACbzE,EAAEyF,SAAW,GAClB1H,GAAKwC,EAAIkE,EAAEU,YAAYtD,SAASrB,GAAGmF,OAAO,GAAK5H,EAC/CiC,EAAEmD,SAAS9F,EAAG2C,EAAGyE,GAEnB,OAAOA,EAAEU,WAAWtD,SAASrB,GAAKzC,CACnC,CAGDoD,UAAUrD,EAAW0C,GACnB1G,KAAK4G,QAAQ,GACRF,IAAGA,EAAI,IACZ,MAAMkF,EAAK5L,KAAKwL,UAAU9E,GACpBnD,EAAInB,KAAKC,IAAIqE,EAAGkF,GACtB,IAAItE,GAAK,EACP5G,EAAI,EACJqG,EAAI,EACN,IAAK,IAAIhH,EAAI,EAAGA,EAAIiE,EAAE9D,SAAUH,EAAG,CACjC,MAAMyD,EAAIgE,EAAMxD,EAAGjE,GACfyD,EAAI,EACc,MAAhBQ,EAAEyD,OAAO1H,IAAgC,IAAlBC,KAAK2L,WAAgBrE,GAAK,IAGvDP,EAAIL,EAAIK,EAAIvD,IACN9C,GAAKkL,IACT5L,KAAK8L,UAAUvI,GACfvD,KAAK+L,WAAWhF,EAAG,GACnBrG,EAAI,EACJqG,EAAI,GAEP,CACGrG,EAAI,IACNV,KAAK8L,UAAU1J,KAAKC,IAAIqE,EAAGhG,IAC3BV,KAAK+L,WAAWhF,EAAG,IAEjBO,GAAIhB,EAAWsB,KAAKC,MAAM7H,KAAMA,KACrC,CAGD2G,WAAWF,EAAWC,EAA0BjD,GAC9C,GAAI,iBAAoBiD,EAEtB,GAAID,EAAI,EAAGzG,KAAK4G,QAAQ,QAQtB,IALA5G,KAAK2G,WAAWF,EAAGhD,GACdzD,KAAKgM,QAAQvF,EAAI,IAEpBzG,KAAKiM,UAAU3F,EAAW8D,IAAI8B,UAAUzF,EAAI,GAAIN,EAAOnG,MACrDA,KAAKyK,UAAUzK,KAAK+L,WAAW,EAAG,IAC9B/L,KAAKmM,gBAAgBzF,IAC3B1G,KAAK+L,WAAW,EAAG,GACf/L,KAAKuI,YAAc9B,GACrBzG,KAAK6H,MAAMvB,EAAW8D,IAAI8B,UAAUzF,EAAI,GAAIzG,UAG7C,CAEL,MAAMwD,EAAc,GAClBG,EAAQ,EAAJ8C,EACNjD,EAAEtD,OAAoB,GAAVuG,GAAK,GACjBC,EAAErB,UAAU7B,GACRG,EAAI,EAAGH,EAAE,KAAO,GAAKG,GAAK,EACzBH,EAAE,GAAK,EACZxD,KAAK6G,WAAWrD,EAAG,IACpB,CACF,CAGD4I,cACE,MAAMnI,EAAI,GACV,IAAIlE,EAAIC,KAAK2D,EACbM,EAAE,GAAKjE,KAAKgE,EACZ,IACET,EADE4E,EAAI7B,EAAWoB,GAAO3H,EAAIuG,EAAWoB,GAAM,EAE7CN,EAAI,EACN,GAAIrH,KAAM,EAMR,IAJEoI,EAAI7B,EAAWoB,KACdnE,EAAIvD,KAAKD,IAAMoI,KAAQnI,KAAKgE,EAAIsC,EAAWwB,KAAOK,IAEnDlE,EAAEmD,KAAO7D,EAAKvD,KAAKgE,GAAMsC,EAAWoB,GAAKS,GACpCpI,GAAK,GACNoI,EAAI,GACN5E,GAAKvD,KAAKD,IAAO,GAAKoI,GAAK,IAAQ,EAAIA,EACvC5E,GAAKvD,OAAOD,KAAOoI,GAAK7B,EAAWoB,GAAK,KAExCnE,EAAKvD,KAAKD,KAAOoI,GAAK,GAAM,IACxBA,GAAK,IACPA,GAAK7B,EAAWoB,KACd3H,IAGa,IAAV,IAAJwD,KAAiBA,IAAM,KAClB,IAAN6D,IAAqB,IAATpH,KAAKgE,KAAmB,IAAJT,MAAa6D,GAC7CA,EAAI,GAAK7D,IAAMvD,KAAKgE,KAAGC,EAAEmD,KAAO7D,GAGxC,OAAOU,CACR,CAEDoI,OAAO5F,GACL,OAA6B,IAAtBzG,KAAKsI,UAAU7B,EACvB,CAEDyC,IAAIzC,GACF,OAAOzG,KAAKsI,UAAU7B,GAAK,EAAIzG,KAAOyG,CACvC,CAEDkC,IAAIlC,GACF,OAAOzG,KAAKsI,UAAU7B,GAAK,EAAIzG,KAAOyG,CACvC,CAGDwF,UAAUxF,EAAe6F,EAAQrI,GAC/B,MAAMgD,EAAI7E,KAAK8G,IAAIzC,EAAE9C,EAAG3D,KAAK2D,GAC7B,IAAI4I,EACJ,IAAK,IAAIxM,EAAI,EAAGA,EAAIkH,IAAKlH,EAAGkE,EAAElE,GAAKuM,EAAGtM,KAAKD,GAAI0G,EAAE1G,IACjD,GAAI0G,EAAE9C,EAAI3D,KAAK2D,EAAG,CAChB4I,EAAI9F,EAAEzC,EAAIsC,EAAWwB,GACrB,IAAK,IAAI/H,EAAIkH,EAAGlH,EAAIC,KAAK2D,IAAK5D,EAAGkE,EAAElE,GAAKuM,EAAGtM,KAAKD,GAAIwM,GACpDtI,EAAEN,EAAI3D,KAAK2D,CACZ,KAAM,CACL4I,EAAIvM,KAAKgE,EAAIsC,EAAWwB,GACxB,IAAK,IAAI/H,EAAIkH,EAAGlH,EAAI0G,EAAE9C,IAAK5D,EAAGkE,EAAElE,GAAKuM,EAAGC,EAAG9F,EAAE1G,IAC7CkE,EAAEN,EAAI8C,EAAE9C,CACT,CACDM,EAAED,EAAIsI,EAAGtM,KAAKgE,EAAGyC,EAAEzC,GACnBC,EAAE0D,OACH,CAGD6E,IAAI/F,GACF,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKiM,UAAUxF,EAAGR,EAAQhC,GACnBA,CACR,CAGDwI,GAAGhG,GACD,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKiM,UAAUxF,EAAGN,EAAOlC,GAClBA,CACR,CAGDyI,IAAIjG,GACF,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKiM,UAAUxF,EAAGL,EAAQnC,GACnBA,CACR,CAGD0I,OAAOlG,GACL,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKiM,UAAUxF,EAAGJ,EAAWpC,GACtBA,CACR,CAGD2I,MACE,MAAM3I,EAAI,IAAIqC,EACd,IAAK,IAAIvG,EAAI,EAAGA,EAAIC,KAAK2D,IAAK5D,EAAGkE,EAAElE,GAAKuG,EAAWwB,IAAM9H,KAAKD,GAG9D,OAFAkE,EAAEN,EAAI3D,KAAK2D,EACXM,EAAED,GAAKhE,KAAKgE,EACLC,CACR,CAGDiI,UAAU7I,GACR,MAAMY,EAAI,IAAIqC,EAGd,OAFIjD,EAAI,EAAGrD,KAAKiJ,UAAU5F,EAAGY,GACxBjE,KAAK4I,SAASvF,EAAGY,GACfA,CACR,CAGD4I,WAAWxJ,GACT,MAAMY,EAAI,IAAIqC,EAGd,OAFIjD,EAAI,EAAGrD,KAAK4I,UAAUvF,EAAGY,GACxBjE,KAAKiJ,SAAS5F,EAAGY,GACfA,CACR,CAGD6I,kBACE,IAAK,IAAI/M,EAAI,EAAGA,EAAIC,KAAK2D,IAAK5D,EAC5B,GAAgB,IAAZC,KAAKD,GAAU,OAAOA,EAAIuG,EAAWoB,GAAKqF,EAAK/M,KAAKD,IAC1D,OAAIC,KAAKgE,EAAI,EAAUhE,KAAK2D,EAAI2C,EAAWoB,IACnC,CACT,CAGDsF,WACE,MAAMxJ,EAAIxD,KAAKgE,EAAIsC,EAAWwB,GAC9B,IAAI7D,EAAI,EACR,IAAK,IAAIlE,EAAI,EAAGA,EAAIC,KAAK2D,IAAK5D,EAAGkE,GAAKgJ,EAAKjN,KAAKD,GAAKyD,GACrD,OAAOS,CACR,CAGD+H,QAAQ3I,GACN,MAAM3C,EAAI0B,KAAKmD,MAAMlC,EAAIiD,EAAWoB,IACpC,OAAIhH,GAAKV,KAAK2D,EAAqB,IAAX3D,KAAKgE,EACmB,IAAxChE,KAAKU,GAAM,GAAK2C,EAAIiD,EAAWoB,GACxC,CAGDwF,UAAU7J,EAAWiJ,GACnB,MAAMrI,EAAIqC,EAAW8D,IAAI8B,UAAU7I,GAEnC,OADArD,KAAKiM,UAAUhI,EAAGqI,EAAIrI,GACfA,CACR,CAGDkJ,OAAO9J,GACL,OAAOrD,KAAKkN,UAAU7J,EAAG8C,EAC1B,CAGDiH,SAAS/J,GACP,OAAOrD,KAAKkN,UAAU7J,EAAGgD,EAC1B,CAGDgH,QAAQhK,GACN,OAAOrD,KAAKkN,UAAU7J,EAAG+C,EAC1B,CAGDkH,MAAM7G,EAAexC,GACnB,MAAMgD,EAAI7E,KAAK8G,IAAIzC,EAAE9C,EAAG3D,KAAK2D,GAC7B,IAAI5D,EAAI,EACN0D,EAAI,EACN,KAAO1D,EAAIkH,GACTxD,GAAKzD,KAAKD,GAAK0G,EAAE1G,GACjBkE,EAAElE,KAAO0D,EAAI6C,EAAWwB,GACxBrE,IAAM6C,EAAWoB,GAEnB,GAAIjB,EAAE9C,EAAI3D,KAAK2D,EAAG,CAEhB,IADAF,GAAKgD,EAAEzC,EACAjE,EAAIC,KAAK2D,GACdF,GAAKzD,KAAKD,GACVkE,EAAElE,KAAO0D,EAAI6C,EAAWwB,GACxBrE,IAAM6C,EAAWoB,GAEnBjE,GAAKzD,KAAKgE,CACX,KAAM,CAEL,IADAP,GAAKzD,KAAKgE,EACHjE,EAAI0G,EAAE9C,GACXF,GAAKgD,EAAE1G,GACPkE,EAAElE,KAAO0D,EAAI6C,EAAWwB,GACxBrE,IAAM6C,EAAWoB,GAEnBjE,GAAKgD,EAAEzC,CACR,CACDC,EAAED,EAAIP,EAAI,GAAK,EAAI,EACfA,EAAI,EAAGQ,EAAElE,KAAO0D,EACXA,GAAK,IAAGQ,EAAElE,KAAOuG,EAAWa,GAAK1D,GAC1CQ,EAAEN,EAAI5D,EACNkE,EAAE0D,OACH,CAGD4F,IAAI9G,GACF,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKsN,MAAM7G,EAAGxC,GACPA,CACR,CAGDuJ,SAAS/G,GACP,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAK6H,MAAMpB,EAAGxC,GACPA,CACR,CAGDwJ,SAAShH,GACP,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKmJ,WAAW1C,EAAGxC,GACZA,CACR,CAIDyJ,SACE,MAAMzJ,EAAI,IAAIqC,EAEd,OADAtG,KAAKoJ,SAASnF,GACPA,CACR,CAGD0J,OAAOlH,GACL,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKqJ,SAAS5C,EAAGxC,OAAGsG,GACbtG,CACR,CAGD2J,UAAUnH,GACR,MAAMxC,EAAI,IAAIqC,EAEd,OADAtG,KAAKqJ,SAAS5C,OAAG8D,EAAWtG,GACrBA,CACR,CAGD4J,mBAAmBpH,GACjB,MAAM6C,EAAI,IAAIhD,EACZrC,EAAI,IAAIqC,EAEV,OADAtG,KAAKqJ,SAAS5C,EAAG6C,EAAGrF,GACb,CAACqF,EAAGrF,EACZ,CAGS6H,UAAUzI,GAClBrD,KAAKA,KAAK2D,GAAK3D,KAAK8G,GAAG,EAAGzD,EAAI,EAAGrD,KAAM,EAAG,EAAGA,KAAK2D,KAChD3D,KAAK2D,EACP3D,KAAK2H,OACN,CAGDoE,WAAW1I,EAAW0D,GACpB,GAAU,IAAN1D,EAAJ,CACA,KAAOrD,KAAK2D,GAAKoD,GAAG/G,KAAKA,KAAK2D,KAAO,EAErC,IADA3D,KAAK+G,IAAM1D,EACJrD,KAAK+G,IAAMT,EAAWa,IAC3BnH,KAAK+G,IAAMT,EAAWa,KAChBJ,GAAK/G,KAAK2D,IAAG3D,KAAKA,KAAK2D,KAAO,KAClC3D,KAAK+G,EANU,CAQpB,CAGD1E,IAAIoC,GACF,OAAOzE,KAAK0K,IAAIjG,EAAG,IAAIqJ,EACxB,CAIDC,gBAAgBtH,EAAepD,EAAWY,GACxC,IAIIvD,EAJAX,EAAIqC,KAAK8G,IAAIlJ,KAAK2D,EAAI8C,EAAE9C,EAAGN,GAG/B,IAFAY,EAAED,EAAI,EACNC,EAAEN,EAAI5D,EACCA,EAAI,GAAGkE,IAAIlE,GAAK,EAEvB,IAAKW,EAAIuD,EAAEN,EAAI3D,KAAK2D,EAAG5D,EAAIW,IAAKX,EAC9BkE,EAAElE,EAAIC,KAAK2D,GAAK3D,KAAK8G,GAAG,EAAGL,EAAE1G,GAAIkE,EAAGlE,EAAG,EAAGC,KAAK2D,GACjD,IAAKjD,EAAI0B,KAAK8G,IAAIzC,EAAE9C,EAAGN,GAAItD,EAAIW,IAAKX,EAAGC,KAAK8G,GAAG,EAAGL,EAAE1G,GAAIkE,EAAGlE,EAAG,EAAGsD,EAAItD,GACrEkE,EAAE0D,OACH,CAIDqG,gBAAgBvH,EAAepD,EAAWY,KACtCZ,EACF,IAAItD,EAAKkE,EAAEN,EAAI3D,KAAK2D,EAAI8C,EAAE9C,EAAIN,EAE9B,IADAY,EAAED,EAAI,IACGjE,GAAK,GAAGkE,EAAElE,GAAK,EACxB,IAAKA,EAAIqC,KAAKuG,IAAItF,EAAIrD,KAAK2D,EAAG,GAAI5D,EAAI0G,EAAE9C,IAAK5D,EAC3CkE,EAAEjE,KAAK2D,EAAI5D,EAAIsD,GAAKrD,KAAK8G,GAAGzD,EAAItD,EAAG0G,EAAE1G,GAAIkE,EAAG,EAAG,EAAGjE,KAAK2D,EAAI5D,EAAIsD,GACjEY,EAAE0D,QACF1D,EAAEyE,UAAU,EAAGzE,EAChB,CAGDgK,OAAOxJ,EAAewC,GACpB,IACEG,EAEAuD,EAHE5K,EAAI0E,EAAE8D,YAERtE,EAAI,IAAIqC,EAAW,GAErB,GAAIvG,GAAK,EAAG,OAAOkE,EACFmD,EAARrH,EAAI,GAAQ,EACZA,EAAI,GAAQ,EACZA,EAAI,IAAS,EACbA,EAAI,IAAS,EACb,EACE4K,EAAP5K,EAAI,EAAO,IAAImL,EAAQjE,GAClBA,EAAEwD,SAAc,IAAIyD,EAAQjH,GAC5B,IAAIkE,EAAWlE,GAGxB,MAAM3D,EAAkB,GACtB6K,EAAK/G,EAAI,EACTc,GAAM,GAAKd,GAAK,EAClB,IAAI/D,EAAI,EAER,GADAC,EAAE,GAAKqH,EAAEC,QAAQ5K,MACboH,EAAI,EAAG,CACT,MAAMgH,EAAK,IAAI9H,EAEf,IADAqE,EAAEG,MAAMxH,EAAE,GAAI8K,GACP/K,GAAK6E,GACV5E,EAAED,GAAK,IAAIiD,EACXqE,EAAEI,MAAMqD,EAAI9K,EAAED,EAAI,GAAIC,EAAED,IACxBA,GAAK,CAER,CAED,IACE0D,EAGApD,EAJEjD,EAAI+D,EAAEd,EAAI,EAEZ0K,GAAM,EACNxD,EAAK,IAAIvE,EAGX,IADAvG,EAAIyI,EAAM/D,EAAE/D,IAAM,EACXA,GAAK,GAAG,CAQb,IAPIX,GAAKoO,EAAIpH,EAAKtC,EAAE/D,IAAOX,EAAIoO,EAAOjG,GAEpCnB,GAAKtC,EAAE/D,IAAO,GAAMX,EAAI,GAAM,IAAQoO,EAAKpO,EACvCW,EAAI,IAAGqG,GAAKtC,EAAE/D,EAAI,IAAO4F,EAAWoB,GAAK3H,EAAIoO,IAGnD9K,EAAI+D,EACe,IAAP,EAAJL,IACNA,IAAM,IACJ1D,EAMJ,IAJKtD,GAAKsD,GAAK,IACbtD,GAAKuG,EAAWoB,KACdhH,GAEA2N,EAEF/K,EAAEyD,GAAGG,OAAOjD,GACZoK,GAAM,MACD,CACL,KAAOhL,EAAI,GACTsH,EAAEG,MAAM7G,EAAG4G,GACXF,EAAEG,MAAMD,EAAI5G,GACZZ,GAAK,EAEHA,EAAI,EAAGsH,EAAEG,MAAM7G,EAAG4G,IAEpBlH,EAAIM,EACJA,EAAI4G,EACJA,EAAKlH,GAEPgH,EAAEI,MAAMF,EAAIvH,EAAEyD,GAAI9C,EACnB,CAED,KAAOvD,GAAK,GAA2B,IAArB+D,EAAE/D,GAAM,GAAKX,IAC7B4K,EAAEG,MAAM7G,EAAG4G,GACXlH,EAAIM,EACJA,EAAI4G,EACJA,EAAKlH,IACC5D,EAAI,IACRA,EAAIuG,EAAWoB,GAAK,IAClBhH,EAGP,CACD,OAAOiK,EAAEK,OAAO/G,EACjB,CAGDqK,IAAI7H,GACF,IAAIjD,EAAIxD,KAAKgE,EAAI,EAAIhE,KAAKgI,SAAWhI,KAAKoL,QACtClF,EAAIO,EAAEzC,EAAI,EAAIyC,EAAEuB,SAAWvB,EAAE2E,QACjC,GAAI5H,EAAE8E,UAAUpC,GAAK,EAAG,CACtB,MAAMvC,EAAIH,EACVA,EAAI0C,EACJA,EAAIvC,CACL,CACD,IAAI5D,EAAIyD,EAAEsJ,kBACRxJ,EAAI4C,EAAE4G,kBACR,GAAIxJ,EAAI,EAAG,OAAOE,EAMlB,IALIzD,EAAIuD,IAAGA,EAAIvD,GACXuD,EAAI,IACNE,EAAEyF,SAAS3F,EAAGE,GACd0C,EAAE+C,SAAS3F,EAAG4C,IAET1C,EAAEmI,SAAW,IACb5L,EAAIyD,EAAEsJ,mBAAqB,GAAGtJ,EAAEyF,SAASlJ,EAAGyD,IAC5CzD,EAAImG,EAAE4G,mBAAqB,GAAG5G,EAAE+C,SAASlJ,EAAGmG,GAC7C1C,EAAE8E,UAAUpC,IAAM,GACpB1C,EAAEqE,MAAM3B,EAAG1C,GACXA,EAAEyF,SAAS,EAAGzF,KAEd0C,EAAE2B,MAAMrE,EAAG0C,GACXA,EAAE+C,SAAS,EAAG/C,IAIlB,OADI5C,EAAI,GAAG4C,EAAE0C,SAAStF,EAAG4C,GAClBA,CACR,CAGDqI,OAAOlL,GACL,GAAIA,GAAK,EAAG,OAAO,EACnB,MAAME,EAAI+C,EAAWa,GAAK9D,EAC1B,IAAIY,EAAIjE,KAAKgE,EAAI,EAAIX,EAAI,EAAI,EAC7B,GAAIrD,KAAK2D,EAAI,EACX,GAAU,IAANJ,EAASU,EAAIjE,KAAK,GAAKqD,OACtB,IAAK,IAAItD,EAAIC,KAAK2D,EAAI,EAAG5D,GAAK,IAAKA,EAAGkE,GAAKV,EAAIU,EAAIjE,KAAKD,IAAMsD,EACrE,OAAOY,CACR,CAGDuK,WAAWvH,GACT,MAAMwH,EAAKxH,EAAEwD,SACb,GAAKzK,KAAKyK,UAAYgE,GAAsB,IAAfxH,EAAE0E,SAAgB,OAAOrF,EAAWsB,KACjE,MAAMhE,EAAIqD,EAAEmE,QACVnG,EAAIjF,KAAKoL,QACL3E,EAAI,IAAIH,EAAW,GACvBI,EAAI,IAAIJ,EAAW,GACnB7C,EAAI,IAAI6C,EAAW,GACnB/C,EAAI,IAAI+C,EAAW,GACrB,KAAsB,IAAf1C,EAAE+H,UAAgB,CACvB,KAAO/H,EAAE6G,UACP7G,EAAEqF,SAAS,EAAGrF,GACV6K,GACGhI,EAAEgE,UAAa/D,EAAE+D,WACpBhE,EAAE6G,MAAMtN,KAAMyG,GACdC,EAAEmB,MAAMZ,EAAGP,IAEbD,EAAEwC,SAAS,EAAGxC,IACJC,EAAE+D,UAAU/D,EAAEmB,MAAMZ,EAAGP,GACnCA,EAAEuC,SAAS,EAAGvC,GAEhB,KAAOzB,EAAEwF,UACPxF,EAAEgE,SAAS,EAAGhE,GACVwJ,GACGhL,EAAEgH,UAAalH,EAAEkH,WACpBhH,EAAE6J,MAAMtN,KAAMyD,GACdF,EAAEsE,MAAMZ,EAAG1D,IAEbE,EAAEwF,SAAS,EAAGxF,IACJF,EAAEkH,UAAUlH,EAAEsE,MAAMZ,EAAG1D,GACnCA,EAAE0F,SAAS,EAAG1F,GAEZK,EAAE0E,UAAUrD,IAAM,GACpBrB,EAAEiE,MAAM5C,EAAGrB,GACP6K,GAAIhI,EAAEoB,MAAMpE,EAAGgD,GACnBC,EAAEmB,MAAMtE,EAAGmD,KAEXzB,EAAE4C,MAAMjE,EAAGqB,GACPwJ,GAAIhL,EAAEoE,MAAMpB,EAAGhD,GACnBF,EAAEsE,MAAMnB,EAAGnD,GAEd,CACD,OAAoC,IAAhC0B,EAAEqD,UAAUhC,EAAW8D,KAAmB9D,EAAWsB,KACrDrE,EAAE+E,UAAUrB,IAAM,EAAU1D,EAAEiK,SAASvG,GACvC1D,EAAEoI,SAAW,GAAGpI,EAAE+J,MAAMrG,EAAG1D,GAE3BA,EAAEoI,SAAW,EAAUpI,EAAEgK,IAAItG,GACrB1D,GAFAA,CAGb,CAEDgD,iBAAmB,CACjB,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEzDA,cACG,GAAK,IAAMD,EAAWoI,UAAUpI,EAAWoI,UAAUxO,OAAS,GAGjEiM,gBAAgBxI,GACd,MAAMH,EAAIxD,KAAKqI,MACf,IAAItI,EACJ,GACU,IAARyD,EAAEG,GACFH,EAAE,IAAM8C,EAAWoI,UAAUpI,EAAWoI,UAAUxO,OAAS,GAC3D,CACA,IAAKH,EAAI,EAAGA,EAAIuG,EAAWoI,UAAUxO,SAAUH,EAC7C,GAAIyD,EAAE,KAAO8C,EAAWoI,UAAU3O,GAAI,OAAO,EAC/C,OAAO,CACR,CACD,GAAIyD,EAAEiH,SAAU,OAAO,EAEvB,IADA1K,EAAI,EACGA,EAAIuG,EAAWoI,UAAUxO,QAAQ,CACtC,IAAI+G,EAAIX,EAAWoI,UAAU3O,GAC3BW,EAAIX,EAAI,EACV,KAAOW,EAAI4F,EAAWoI,UAAUxO,QAAU+G,EAAIX,EAAWqI,OACvD1H,GAAKX,EAAWoI,UAAUhO,KAE5B,IADAuG,EAAIzD,EAAE+K,OAAOtH,GACNlH,EAAIW,MAAOuG,EAAIX,EAAWoI,UAAU3O,MAAS,EAAG,OAAO,CAC/D,CACD,OAAOyD,EAAEoL,YAAYjL,EACtB,CAGDiL,YAAYjL,GACV,MAAMkL,EAAK7O,KAAKwN,SAASlH,EAAW8D,KAC9BhD,EAAIyH,EAAG/B,kBACb,GAAI1F,GAAK,EAAG,OAAO,EACnB,MAAMnD,EAAI4K,EAAGhC,WAAWzF,IACxBzD,EAAKA,EAAI,GAAM,GACP2C,EAAWoI,UAAUxO,SAAQyD,EAAI2C,EAAWoI,UAAUxO,QAC9D,MAAMuG,EAAI,IAAIH,EACd,IAAK,IAAIvG,EAAI,EAAGA,EAAI4D,IAAK5D,EAAG,CAE1B0G,EAAEG,QACAN,EAAWoI,UACTtM,KAAKmD,MAAM/C,EAAKY,SAAWkD,EAAWoI,UAAUxO,UAGpD,IAAIgG,EAAIO,EAAEwH,OAAOhK,EAAGjE,MACpB,GAAoC,IAAhCkG,EAAEoC,UAAUhC,EAAW8D,MAAkC,IAApBlE,EAAEoC,UAAUuG,GAAW,CAC9D,IAAInO,EAAI,EACR,KAAOA,IAAM0G,GAAyB,IAApBlB,EAAEoC,UAAUuG,IAE5B,GADA3I,EAAIA,EAAE+E,UAAU,EAAGjL,MACiB,IAAhCkG,EAAEoC,UAAUhC,EAAW8D,KAAY,OAAO,EAEhD,GAAwB,IAApBlE,EAAEoC,UAAUuG,GAAW,OAAO,CACnC,CACF,CACD,OAAO,CACR,EAIH,MACMC,EAAkB,GACxB,IAAIC,EAAIC,EAER,IADAD,EAAK,IAAIjK,WAAW,GACfkK,EAAK,EAAGA,GAAM,IAAKA,EAAIF,EAAMC,KAAQC,EAE1C,IADAD,EAAK,IAAIjK,WAAW,GACfkK,EAAK,GAAIA,EAAK,KAAMA,EAAIF,EAAMC,KAAQC,EAE3C,IADAD,EAAK,IAAIjK,WAAW,GACfkK,EAAK,GAAIA,EAAK,KAAMA,EAAIF,EAAMC,KAAQC,EAErC,SAAU5G,EAAS/E,GACvB,MAXY,uCAWCoE,OAAOpE,EACtB,CAEA,SAASmE,EAAMxD,EAAWjE,GACxB,MAAM0D,EAAIqL,EAAM9K,EAAEc,WAAW/E,IAC7B,OAAY,MAAL0D,GAAa,EAAIA,CAC1B,CAGA,SAAS+E,EAAMhF,GACb,IACEG,EADEM,EAAI,EAsBR,OApBuB,IAAlBN,EAAIH,IAAM,MACbA,EAAIG,EACJM,GAAK,IAEc,IAAhBN,EAAIH,GAAK,KACZA,EAAIG,EACJM,GAAK,GAEc,IAAhBN,EAAIH,GAAK,KACZA,EAAIG,EACJM,GAAK,GAEc,IAAhBN,EAAIH,GAAK,KACZA,EAAIG,EACJM,GAAK,GAEc,IAAhBN,EAAIH,GAAK,KAEZS,GAAK,GAEAA,CACT,CAWA,MAAMiH,EACyBjE,EAA7BvD,YAA6BuD,GAAAjH,KAACiH,EAADA,CAAiB,CAE9C2D,QAAQpH,GACN,OAAIA,EAAEQ,EAAI,GAAKR,EAAE8E,UAAUtI,KAAKiH,IAAM,EAAUzD,EAAE8G,IAAItK,KAAKiH,GAC/CzD,CACb,CAEDwH,OAAOxH,GACL,OAAOA,CACR,CAEDyL,OAAOzL,GACLA,EAAE6F,SAASrJ,KAAKiH,OAAGsD,EAAW/G,EAC/B,CAEDuH,MAAMvH,EAAe0C,EAAejC,GAClCT,EAAE2F,WAAWjD,EAAGjC,GAChBjE,KAAKiP,OAAOhL,EACb,CAED6G,MAAMtH,EAAeS,GACnBT,EAAE4F,SAASnF,GACXjE,KAAKiP,OAAOhL,EACb,EAIH,MAAMkH,EACalE,EACAiI,GACAC,IACAC,IACAC,GACAC,IAEjB5L,YAAYuD,GACVjH,KAAKiH,EAAIA,EACTjH,KAAKkP,GAAKjI,EAAEuD,WACZxK,KAAKmP,IAAgB,MAAVnP,KAAKkP,GAChBlP,KAAKoP,IAAMpP,KAAKkP,IAAM,GACtBlP,KAAKqP,IAAM,GAAM/I,EAAWoB,GAAK,IAAO,EACxC1H,KAAKsP,IAAM,EAAIrI,EAAEtD,CAClB,CAGDiH,QAAQpH,GACN,MAAMS,EAAI,IAAIqC,EAId,OAHA9C,EAAE6E,MAAMI,UAAUzI,KAAKiH,EAAEtD,EAAGM,GAC5BA,EAAEoF,SAASrJ,KAAKiH,OAAGsD,EAAWtG,GAC1BT,EAAEQ,EAAI,GAAKC,EAAEqE,UAAUhC,EAAWsB,MAAQ,GAAG5H,KAAKiH,EAAEY,MAAM5D,EAAGA,GAC1DA,CACR,CAGD+G,OAAOxH,GACL,MAAMS,EAAI,IAAIqC,EAGd,OAFA9C,EAAE0D,OAAOjD,GACTjE,KAAKiP,OAAOhL,GACLA,CACR,CAGDgL,OAAOzL,GACL,KAAOA,EAAEG,GAAK3D,KAAKsP,KAEjB9L,EAAEA,EAAEG,KAAO,EACb,IAAK,IAAI5D,EAAI,EAAGA,EAAIC,KAAKiH,EAAEtD,IAAK5D,EAAG,CAEjC,IAAIW,EAAW,MAAP8C,EAAEzD,GACV,MAAMwP,EACH7O,EAAIV,KAAKmP,MACLzO,EAAIV,KAAKoP,KAAO5L,EAAEzD,IAAM,IAAMC,KAAKmP,IAAOnP,KAAKqP,KAAO,IAC3D/I,EAAWwB,GAKb,IAHApH,EAAIX,EAAIC,KAAKiH,EAAEtD,EACfH,EAAE9C,IAAMV,KAAKiH,EAAEH,GAAG,EAAGyI,EAAI/L,EAAGzD,EAAG,EAAGC,KAAKiH,EAAEtD,GAElCH,EAAE9C,IAAM4F,EAAWa,IACxB3D,EAAE9C,IAAM4F,EAAWa,GACnB3D,IAAI9C,IAEP,CACD8C,EAAEmE,QACFnE,EAAEkF,UAAU1I,KAAKiH,EAAEtD,EAAGH,GAClBA,EAAE8E,UAAUtI,KAAKiH,IAAM,GAAGzD,EAAEqE,MAAM7H,KAAKiH,EAAGzD,EAC/C,CAGDsH,MAAMtH,EAAeS,GACnBT,EAAE4F,SAASnF,GACXjE,KAAKiP,OAAOhL,EACb,CAGD8G,MAAMvH,EAAe0C,EAAejC,GAClCT,EAAE2F,WAAWjD,EAAGjC,GAChBjE,KAAKiP,OAAOhL,EACb,EAIH,SAAS8I,EAAKvJ,GACZ,GAAU,IAANA,EAAS,OAAQ,EACrB,IAAIS,EAAI,EAkBR,OAjBqB,IAAZ,MAAJT,KACHA,IAAM,GACNS,GAAK,IAEY,IAAV,IAAJT,KACHA,IAAM,EACNS,GAAK,GAEW,IAAT,GAAJT,KACHA,IAAM,EACNS,GAAK,GAES,IAAP,EAAJT,KACHA,IAAM,EACNS,GAAK,GAES,IAAP,EAAJT,MAAgBS,EACdA,CACT,CAGA,SAASgJ,EAAKzJ,GACZ,IAAIS,EAAI,EACR,KAAa,IAANT,GACLA,GAAKA,EAAI,IACPS,EAEJ,OAAOA,CACT,CAGA,MAAM6J,EACJlD,QAAU4E,EACVxE,OAASwE,EAETP,OAAS,OAETlE,MAAMvH,EAAe0C,EAAejC,GAClCT,EAAE2F,WAAWjD,EAAGjC,EACjB,CAED6G,MAAMtH,EAAeS,GACnBT,EAAE4F,SAASnF,EACZ,EAGH,SAASuL,EAAKhM,GACZ,OAAOA,CACT,CAIA,MAAM0K,EACarD,GACA4E,GACAC,GACAzI,EAEjBvD,YAAYuD,GAEVjH,KAAK6K,GAAK,IAAIvE,EACdtG,KAAKyP,GAAK,IAAInJ,EACdA,EAAW8D,IAAI3B,UAAU,EAAIxB,EAAEtD,EAAG3D,KAAK6K,IACvC7K,KAAK0P,GAAK1P,KAAK6K,GAAG8C,OAAO1G,GACzBjH,KAAKiH,EAAIA,CACV,CAED2D,QAAQpH,GACN,GAAIA,EAAEQ,EAAI,GAAKR,EAAEG,EAAI,EAAI3D,KAAKiH,EAAEtD,EAAG,OAAOH,EAAE8G,IAAItK,KAAKiH,GAChD,GAAIzD,EAAE8E,UAAUtI,KAAKiH,GAAK,EAAG,OAAOzD,EACpC,CACH,MAAMS,EAAI,IAAIqC,EAGd,OAFA9C,EAAE0D,OAAOjD,GACTjE,KAAKiP,OAAOhL,GACLA,CACR,CACF,CAED+G,OAAOxH,GACL,OAAOA,CACR,CAGDyL,OAAOzL,GAQL,IAPAA,EAAEkF,UAAU1I,KAAKiH,EAAEtD,EAAI,EAAG3D,KAAK6K,IAC3BrH,EAAEG,EAAI3D,KAAKiH,EAAEtD,EAAI,IACnBH,EAAEG,EAAI3D,KAAKiH,EAAEtD,EAAI,EACjBH,EAAEmE,SAEJ3H,KAAK0P,GAAG1B,gBAAgBhO,KAAK6K,GAAI7K,KAAKiH,EAAEtD,EAAI,EAAG3D,KAAKyP,IACpDzP,KAAKiH,EAAE8G,gBAAgB/N,KAAKyP,GAAIzP,KAAKiH,EAAEtD,EAAI,EAAG3D,KAAK6K,IAC5CrH,EAAE8E,UAAUtI,KAAK6K,IAAM,GAAGrH,EAAEuI,WAAW,EAAG/L,KAAKiH,EAAEtD,EAAI,GAE5D,IADAH,EAAEqE,MAAM7H,KAAK6K,GAAIrH,GACVA,EAAE8E,UAAUtI,KAAKiH,IAAM,GAAGzD,EAAEqE,MAAM7H,KAAKiH,EAAGzD,EAClD,CAGDsH,MAAMtH,EAAeS,GACnBT,EAAE4F,SAASnF,GACXjE,KAAKiP,OAAOhL,EACb,CAGD8G,MAAMvH,EAAe0C,EAAejC,GAClCT,EAAE2F,WAAWjD,EAAGjC,GAChBjE,KAAKiP,OAAOhL,EACb,ECt1BH,SAAS0L,EAAWC,GAClBA,EAAMA,EAAIC,QAAQ,QAAS,MAC3B,IAAIC,EAAU,GAEd,IAAK,IAAIzM,EAAI,EAAGA,EAAIuM,EAAI1P,OAAQmD,IAAK,CACnC,MAAMI,EAAImM,EAAI9K,WAAWzB,GAErBI,EAAI,IACNqM,GAAW5K,OAAOC,aAAa1B,GACtBA,EAAI,KAAOA,EAAI,MACxBqM,GAAW5K,OAAOC,aAAc1B,GAAK,EAAK,KAC1CqM,GAAW5K,OAAOC,aAAkB,GAAJ1B,EAAU,OAE1CqM,GAAW5K,OAAOC,aAAc1B,GAAK,GAAM,KAC3CqM,GAAW5K,OAAOC,aAAe1B,GAAK,EAAK,GAAM,KACjDqM,GAAW5K,OAAOC,aAAkB,GAAJ1B,EAAU,KAE7C,CAED,OAAOqM,CACT,CCrjBa,MAAAC,EACXC,QAAQC,IAAIC,OCJR,SAAiBC,GACrB,OAAOC,EAAM,QAACC,WAAW,UAAUC,OAAOH,EAAK,QAAQI,OAAO,MAChE,EFQM,SAAiBJ,GAIrB,SAASK,EAAShN,EAAW0C,GAC3B,MAAMuK,GAAW,MAAJjN,IAAmB,MAAJ0C,GAE5B,OADa1C,GAAK,KAAO0C,GAAK,KAAOuK,GAAO,KAC7B,GAAa,MAANA,CACvB,CAED,SAAStN,EAAEuN,EAAWrN,GACpB,OAAQqN,IAAMrN,EAAMqN,GAAM,GAAKrN,CAChC,CACD,SAASsN,EAAED,EAAWrN,GACpB,OAAOqN,IAAMrN,CACd,CACD,SAASuN,EAAGpN,EAAW0C,EAAWyE,GAChC,OAAQnH,EAAI0C,GAAO1C,EAAImH,CACxB,CACD,SAASkG,EAAIrN,EAAW0C,EAAWyE,GACjC,OAAQnH,EAAI0C,EAAM1C,EAAImH,EAAMzE,EAAIyE,CACjC,CACD,SAASmG,EAAUtN,GACjB,OAAOL,EAAEK,EAAG,GAAKL,EAAEK,EAAG,IAAML,EAAEK,EAAG,GAClC,CACD,SAASuN,EAAUvN,GACjB,OAAOL,EAAEK,EAAG,GAAKL,EAAEK,EAAG,IAAML,EAAEK,EAAG,GAClC,CACD,SAASwN,EAAUxN,GACjB,OAAOL,EAAEK,EAAG,GAAKL,EAAEK,EAAG,IAAMmN,EAAEnN,EAAG,EAClC,CAoGD,OAZA,SAAkByN,GAChB,MAAMC,EAAyC,mBAC/C,IAAItB,EAAM,GACV,IAAK,IAAI7P,EAAI,EAAGA,EAAsB,EAAlBkR,EAAS/Q,OAAYH,IACvC6P,GACEsB,EAAQzJ,OAAQwJ,EAASlR,GAAK,IAAuB,GAAf,EAAKA,EAAI,GAAU,EAAM,IAC/DmR,EAAQzJ,OAAQwJ,EAASlR,GAAK,IAAuB,GAAf,EAAKA,EAAI,GAAY,IAE/D,OAAO6P,CACR,CAGMuB,CA/FP,SAAqBlK,EAAcpG,GACjC,MAAMuQ,EAAI,CACR,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAW,UAAY,UAAY,WAAY,WAAY,WAC3D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAW,UAAY,UAAY,UAAY,WAAY,WAC3D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,UAAY,UAAY,UAAY,UAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,YAEhCC,EAAO,CACX,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,YAERC,EAAI,IAAI3R,MAAM,IACpB,IAAI8G,EAAGC,EAAGjD,EAAGF,EAAGkB,EAAG8H,EAAGjJ,EAAG9B,EACrB+P,EAAIC,EAERvK,EAAEpG,GAAK,IAAM,KAAS,GAAMA,EAAI,GAChCoG,EAA2B,IAAtBpG,EAAI,IAAO,GAAM,IAAWA,EAEjC,IAAK,IAAId,EAAI,EAAGA,EAAIkH,EAAE/G,OAAQH,GAAK,GAAI,CACrC0G,EAAI4K,EAAK,GACT3K,EAAI2K,EAAK,GACT5N,EAAI4N,EAAK,GACT9N,EAAI8N,EAAK,GACT5M,EAAI4M,EAAK,GACT9E,EAAI8E,EAAK,GACT/N,EAAI+N,EAAK,GACT7P,EAAI6P,EAAK,GAET,IAAK,IAAI3Q,EAAI,EAAGA,EAAI,GAAIA,IACV4Q,EAAE5Q,GAAVA,EAAI,GAAWuG,EAAEvG,EAAIX,GAEhByQ,EACLA,EACEA,EA3CHrN,EADUK,EA4CY8N,EAAE5Q,EAAI,GA3CvB,IAAMyC,EAAEK,EAAG,IAAMmN,EAAEnN,EAAG,IA2CM8N,EAAE5Q,EAAI,IACpCsQ,EAAUM,EAAE5Q,EAAI,MAElB4Q,EAAE5Q,EAAI,KAGV6Q,EAAKf,EACHA,EAASA,EAASA,EAAShP,EAAGuP,EAAUtM,IAAKmM,EAAGnM,EAAG8H,EAAGjJ,IAAK8N,EAAE1Q,IAC7D4Q,EAAE5Q,IAEJ8Q,EAAKhB,EAASM,EAAUrK,GAAIoK,EAAIpK,EAAGC,EAAGjD,IAEtCjC,EAAI8B,EACJA,EAAIiJ,EACJA,EAAI9H,EACJA,EAAI+L,EAASjN,EAAGgO,GAChBhO,EAAIE,EACJA,EAAIiD,EACJA,EAAID,EACJA,EAAI+J,EAASe,EAAIC,GAGnBH,EAAK,GAAKb,EAAS/J,EAAG4K,EAAK,IAC3BA,EAAK,GAAKb,EAAS9J,EAAG2K,EAAK,IAC3BA,EAAK,GAAKb,EAAS/M,EAAG4N,EAAK,IAC3BA,EAAK,GAAKb,EAASjN,EAAG8N,EAAK,IAC3BA,EAAK,GAAKb,EAAS/L,EAAG4M,EAAK,IAC3BA,EAAK,GAAKb,EAASjE,EAAG8E,EAAK,IAC3BA,EAAK,GAAKb,EAASlN,EAAG+N,EAAK,IAC3BA,EAAK,GAAKb,EAAShP,EAAG6P,EAAK,GAC5B,CA1EH,IAAmB7N,EA2EjB,OAAO6N,CACR,CAuBeI,CArBhB,SAAkB7B,GAChB,MAAM8B,EAAiB,GAEvB,IAAK,IAAI3R,EAAI,EAAGA,EA/GJ,EA+GQ6P,EAAI1P,OAAgBH,GA/G5B,EAgHV2R,EAAI3R,GAAK,KAFE,IAEK6P,EAAI9K,WAAW/E,EAhHrB,KAgH4C,GAAMA,EAAI,GAElE,OAAO2R,CACR,CAc2BC,CAD5BxB,EAAMR,EAAWQ,IAhIH,EAiI6BA,EAAIjQ,QACjD,ECtIa0R,EAAQ5B,QAAQC,IAAIC,OCH3B,SAAeC,GACnB,OAAOC,EAAM,QAACC,WAAW,QAAQC,OAAOH,EAAK,QAAQI,OAAO,MAC9D,EF+IM,SAAeJ,GACnB,SAAS0B,EAAYxO,EAAWW,GAE9B,OADYX,GAAKW,EAAMX,IAAO,GAAKW,CAEpC,CAeD,SAAS8N,EAAQC,GACf,IACI9M,EADA2K,EAAM,GAGV,IAAK,IAAI7P,EAAI,EAAGA,GAAK,EAAGA,IACtBkF,EAAK8M,IAAa,EAAJhS,EAAU,GACxB6P,GAAO3K,EAAE8C,SAAS,IAEpB,OAAO6H,CACR,CAED,IAAIoC,EACAjS,EAAGW,EACP,MAAM4Q,EAAI,IAAI3R,MAAM,IACpB,IAKIsS,EAAGC,EAAGC,EAAGC,EAAGC,EACZ7R,EANA8R,EAAK,WACLC,EAAK,WACLC,EAAK,WACLC,EAAK,UACLC,EAAK,WAMT,MAAMC,GAFNxC,EAAMR,EAAWQ,IAEGjQ,OAEd0S,EAAa,GACnB,IAAK7S,EAAI,EAAGA,EAAI4S,EAAU,EAAG5S,GAAK,EAChCW,EACGyP,EAAIrL,WAAW/E,IAAM,GACrBoQ,EAAIrL,WAAW/E,EAAI,IAAM,GACzBoQ,EAAIrL,WAAW/E,EAAI,IAAM,EAC1BoQ,EAAIrL,WAAW/E,EAAI,GACrB6S,EAAWpO,KAAK9D,GAGlB,OAAQiS,EAAU,GAChB,KAAK,EACH5S,EAAI,WACJ,MACF,KAAK,EACHA,EAAKoQ,EAAIrL,WAAW6N,EAAU,IAAM,GAAM,QAC1C,MAEF,KAAK,EACH5S,EACGoQ,EAAIrL,WAAW6N,EAAU,IAAM,GAC/BxC,EAAIrL,WAAW6N,EAAU,IAAM,GAChC,MACF,MAEF,KAAK,EACH5S,EACGoQ,EAAIrL,WAAW6N,EAAU,IAAM,GAC/BxC,EAAIrL,WAAW6N,EAAU,IAAM,GAC/BxC,EAAIrL,WAAW6N,EAAU,IAAM,EAChC,IAMN,IAFAC,EAAWpO,KAAKzE,GAET6S,EAAW1S,OAAS,IAAO,IAAI0S,EAAWpO,KAAK,GAKtD,IAHAoO,EAAWpO,KAAKmO,IAAY,IAC5BC,EAAWpO,KAAMmO,GAAW,EAAK,YAE5BX,EAAa,EAAGA,EAAaY,EAAW1S,OAAQ8R,GAAc,GAAI,CACrE,IAAKjS,EAAI,EAAGA,EAAI,GAAIA,IAAKuR,EAAEvR,GAAK6S,EAAWZ,EAAajS,GACxD,IAAKA,EAAI,GAAIA,GAAK,GAAIA,IACpBuR,EAAEvR,GAAK8R,EAAYP,EAAEvR,EAAI,GAAKuR,EAAEvR,EAAI,GAAKuR,EAAEvR,EAAI,IAAMuR,EAAEvR,EAAI,IAAK,GAQlE,IANAkS,EAAIK,EACJJ,EAAIK,EACJJ,EAAIK,EACJJ,EAAIK,EACJJ,EAAIK,EAEC3S,EAAI,EAAGA,GAAK,GAAIA,IACnBS,EACGqR,EAAYI,EAAG,IAAOC,EAAIC,GAAOD,EAAIE,GAAMC,EAAIf,EAAEvR,GAAK,WACvD,WACFsS,EAAID,EACJA,EAAID,EACJA,EAAIN,EAAYK,EAAG,IACnBA,EAAID,EACJA,EAAIzR,EAGN,IAAKT,EAAI,GAAIA,GAAK,GAAIA,IACpBS,EACGqR,EAAYI,EAAG,IAAMC,EAAIC,EAAIC,GAAKC,EAAIf,EAAEvR,GAAK,WAAc,WAC9DsS,EAAID,EACJA,EAAID,EACJA,EAAIN,EAAYK,EAAG,IACnBA,EAAID,EACJA,EAAIzR,EAGN,IAAKT,EAAI,GAAIA,GAAK,GAAIA,IACpBS,EACGqR,EAAYI,EAAG,IACZC,EAAIC,EAAMD,EAAIE,EAAMD,EAAIC,GAC1BC,EACAf,EAAEvR,GACF,WACF,WACFsS,EAAID,EACJA,EAAID,EACJA,EAAIN,EAAYK,EAAG,IACnBA,EAAID,EACJA,EAAIzR,EAGN,IAAKT,EAAI,GAAIA,GAAK,GAAIA,IACpBS,EACGqR,EAAYI,EAAG,IAAMC,EAAIC,EAAIC,GAAKC,EAAIf,EAAEvR,GAAK,WAAc,WAC9DsS,EAAID,EACJA,EAAID,EACJA,EAAIN,EAAYK,EAAG,IACnBA,EAAID,EACJA,EAAIzR,EAGN8R,EAAMA,EAAKL,EAAK,WAChBM,EAAMA,EAAKL,EAAK,WAChBM,EAAMA,EAAKL,EAAK,WAChBM,EAAMA,EAAKL,EAAK,WAChBM,EAAMA,EAAKL,EAAK,UACjB,CAKD,OAFEP,EAAQQ,GAAMR,EAAQS,GAAMT,EAAQU,GAAMV,EAAQW,GAAMX,EAAQY,IAEvDG,aACb,ECtSaC,EAAO9C,QAAQC,IAAIC,OCD1B,SAAcC,GAClB,OAAOC,EAAM,QAACC,WAAW,OAAOC,OAAOH,EAAK,QAAQI,OAAO,MAC7D,EF6SM,SAAcJ,GAClB,SAAS4C,EAAWC,EAAgBC,GAClC,OAAQD,GAAUC,EAAeD,IAAY,GAAKC,CACnD,CAED,SAASC,EAAYC,EAAYC,GAC/B,MAAMC,EAAW,WAALF,EACNG,EAAW,WAALF,EACNG,EAAW,WAALJ,EACNK,EAAW,WAALJ,EACNK,GAAgB,WAALN,IAAyB,WAALC,GACrC,OAAIG,EAAMC,EACS,WAAVC,EAAuBJ,EAAMC,EAElCC,EAAMC,EACM,WAAVC,EACe,WAAVA,EAAuBJ,EAAMC,EAEnB,WAAVG,EAAuBJ,EAAMC,EAG/BG,EAAUJ,EAAMC,CAE1B,CAeD,SAASI,EACPjN,EACAC,EACAjD,EACAF,EACAC,EACAQ,EACAyK,GAGA,OADAhI,EAAIyM,EAAYzM,EAAGyM,EAAYA,EAtBjC,SAAW1P,EAAW0C,EAAWyE,GAC/B,OAAQnH,EAAI0C,GAAO1C,EAAImH,CACxB,CAoB4CgJ,CAAEjN,EAAGjD,EAAGF,GAAIC,GAAIiL,IACpDyE,EAAYH,EAAWtM,EAAGzC,GAAI0C,EACtC,CAED,SAASkN,EACPnN,EACAC,EACAjD,EACAF,EACAC,EACAQ,EACAyK,GAGA,OADAhI,EAAIyM,EAAYzM,EAAGyM,EAAYA,EAhCjC,SAAW1P,EAAW0C,EAAWyE,GAC/B,OAAQnH,EAAImH,EAAMzE,GAAKyE,CACxB,CA8B4CkJ,CAAEnN,EAAGjD,EAAGF,GAAIC,GAAIiL,IACpDyE,EAAYH,EAAWtM,EAAGzC,GAAI0C,EACtC,CAED,SAASoN,EACPrN,EACAC,EACAjD,EACAF,EACAC,EACAQ,EACAyK,GAGA,OADAhI,EAAIyM,EAAYzM,EAAGyM,EAAYA,EA1CjC,SAAW1P,EAAW0C,EAAWyE,GAC/B,OAAOnH,EAAI0C,EAAIyE,CAChB,CAwC4CoJ,CAAErN,EAAGjD,EAAGF,GAAIC,GAAIiL,IACpDyE,EAAYH,EAAWtM,EAAGzC,GAAI0C,EACtC,CAED,SAASsN,EACPvN,EACAC,EACAjD,EACAF,EACAC,EACAQ,EACAyK,GAGA,OADAhI,EAAIyM,EAAYzM,EAAGyM,EAAYA,EApDjC,SAAW1P,EAAW0C,EAAWyE,GAC/B,OAAOzE,GAAK1C,GAAKmH,EAClB,CAkD4CsJ,CAAEvN,EAAGjD,EAAGF,GAAIC,GAAIiL,IACpDyE,EAAYH,EAAWtM,EAAGzC,GAAI0C,EACtC,CA2BD,SAASwN,EAAUlB,GACjB,IAEEmB,EACAC,EAHEC,EAAiB,GACnBC,EAAsB,GAGxB,IAAKF,EAAS,EAAGA,GAAU,EAAGA,IAC5BD,EAASnB,IAAqB,EAAToB,EAAe,IACpCE,EAAsB,IAAMH,EAAMpM,SAAS,IAC3CsM,GAEEC,EAAoBzI,OAAOyI,EAAoBpU,OAAS,EAAG,GAE/D,OAAOmU,CACR,CAED,IAAIjN,EAAGmN,EAAIC,EAAIC,EAAIC,EAAIjO,EAAGC,EAAGjD,EAAGF,EAChC,MAmBMC,EA5DN,SAA4BoM,GAC1B,IAAI+E,EACJ,MAAMC,EAAiBhF,EAAI1P,OACrB2U,EAAuBD,EAAiB,EAGxCE,EAA8C,KADjDD,EAAwBA,EAAuB,IAAO,GACV,GACzCE,EAAwBpV,MAAcmV,EAAiB,GAC7D,IAAIE,EAAgB,EAChBC,EAAa,EACjB,KAAOA,EAAaL,GAClBD,GAAcM,EAAcA,EAAa,GAAM,EAC/CD,EAAiBC,EAAa,EAAK,EACnCF,EAAWJ,GACTI,EAAWJ,GAAe/E,EAAI9K,WAAWmQ,IAAeD,EAC1DC,IAOF,OALAN,GAAcM,EAAcA,EAAa,GAAM,EAC/CD,EAAiBC,EAAa,EAAK,EACnCF,EAAWJ,GAAcI,EAAWJ,GAAe,KAAQK,EAC3DD,EAAWD,EAAiB,GAAKF,GAAkB,EACnDG,EAAWD,EAAiB,GAAKF,IAAmB,GAC7CG,CACR,CAqCSG,CAFV/E,EAAMR,EAAWQ,IASjB,IALA1J,EAAI,WACJC,EAAI,WACJjD,EAAI,WACJF,EAAI,UAEC6D,EAAI,EAAGA,EAAI5D,EAAEtD,OAAQkH,GAAK,GAC7BmN,EAAK9N,EACL+N,EAAK9N,EACL+N,EAAKhR,EACLiR,EAAKnR,EACLkD,EAAIiN,EAAGjN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GA/Bf,EA+BwB,YAClC7D,EAAImQ,EAAGnQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GA/BnB,GA+B4B,YAClC3D,EAAIiQ,EAAGjQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GA/BnB,GA+B4B,WAClCV,EAAIgN,EAAGhN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GA/BnB,GA+B4B,YAClCX,EAAIiN,EAAGjN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GAnCf,EAmCwB,YAClC7D,EAAImQ,EAAGnQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GAnCnB,GAmC4B,YAClC3D,EAAIiQ,EAAGjQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GAnCnB,GAmC4B,YAClCV,EAAIgN,EAAGhN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GAnCnB,GAmC4B,YAClCX,EAAIiN,EAAGjN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GAvCf,EAuCwB,YAClC7D,EAAImQ,EAAGnQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GAvCnB,GAuC4B,YAClC3D,EAAIiQ,EAAGjQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IAvCnB,GAuC6B,YACnCV,EAAIgN,EAAGhN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,IAvCnB,GAuC6B,YACnCX,EAAIiN,EAAGjN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,IA3Cf,EA2CyB,YACnC7D,EAAImQ,EAAGnQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,IA3CnB,GA2C6B,YACnC3D,EAAIiQ,EAAGjQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IA3CnB,GA2C6B,YACnCV,EAAIgN,EAAGhN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,IA3CnB,GA2C6B,YACnCX,EAAImN,EAAGnN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GA3Cf,EA2CwB,YAClC7D,EAAIqQ,EAAGrQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GA3CnB,EA2C4B,YAClC3D,EAAImQ,EAAGnQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IA3CnB,GA2C6B,WACnCV,EAAIkN,EAAGlN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GA3CnB,GA2C4B,YAClCX,EAAImN,EAAGnN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GA/Cf,EA+CwB,YAClC7D,EAAIqQ,EAAGrQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,IA/CnB,EA+C6B,UACnC3D,EAAImQ,EAAGnQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IA/CnB,GA+C6B,YACnCV,EAAIkN,EAAGlN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GA/CnB,GA+C4B,YAClCX,EAAImN,EAAGnN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GAnDf,EAmDwB,WAClC7D,EAAIqQ,EAAGrQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,IAnDnB,EAmD6B,YACnC3D,EAAImQ,EAAGnQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GAnDnB,GAmD4B,YAClCV,EAAIkN,EAAGlN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GAnDnB,GAmD4B,YAClCX,EAAImN,EAAGnN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,IAvDf,EAuDyB,YACnC7D,EAAIqQ,EAAGrQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GAvDnB,EAuD4B,YAClC3D,EAAImQ,EAAGnQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GAvDnB,GAuD4B,YAClCV,EAAIkN,EAAGlN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,IAvDnB,GAuD6B,YACnCX,EAAIqN,EAAGrN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GAvDf,EAuDwB,YAClC7D,EAAIuQ,EAAGvQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GAvDnB,GAuD4B,YAClC3D,EAAIqQ,EAAGrQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IAvDnB,GAuD6B,YACnCV,EAAIoN,EAAGpN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,IAvDnB,GAuD6B,YACnCX,EAAIqN,EAAGrN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GA3Df,EA2DwB,YAClC7D,EAAIuQ,EAAGvQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GA3DnB,GA2D4B,YAClC3D,EAAIqQ,EAAGrQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GA3DnB,GA2D4B,YAClCV,EAAIoN,EAAGpN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,IA3DnB,GA2D6B,YACnCX,EAAIqN,EAAGrN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,IA/Df,EA+DyB,WACnC7D,EAAIuQ,EAAGvQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GA/DnB,GA+D4B,YAClC3D,EAAIqQ,EAAGrQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GA/DnB,GA+D4B,YAClCV,EAAIoN,EAAGpN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GA/DnB,GA+D4B,UAClCX,EAAIqN,EAAGrN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GAnEf,EAmEwB,YAClC7D,EAAIuQ,EAAGvQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,IAnEnB,GAmE6B,YACnC3D,EAAIqQ,EAAGrQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IAnEnB,GAmE6B,WACnCV,EAAIoN,EAAGpN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GAnEnB,GAmE4B,YAClCX,EAAIuN,EAAGvN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GAnEf,EAmEwB,YAClC7D,EAAIyQ,EAAGzQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GAnEnB,GAmE4B,YAClC3D,EAAIuQ,EAAGvQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IAnEnB,GAmE6B,YACnCV,EAAIsN,EAAGtN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GAnEnB,GAmE4B,YAClCX,EAAIuN,EAAGvN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,IAvEf,EAuEyB,YACnC7D,EAAIyQ,EAAGzQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,GAvEnB,GAuE4B,YAClC3D,EAAIuQ,EAAGvQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,IAvEnB,GAuE6B,YACnCV,EAAIsN,EAAGtN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GAvEnB,GAuE4B,YAClCX,EAAIuN,EAAGvN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GA3Ef,EA2EwB,YAClC7D,EAAIyQ,EAAGzQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,IA3EnB,GA2E6B,YACnC3D,EAAIuQ,EAAGvQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GA3EnB,GA2E4B,YAClCV,EAAIsN,EAAGtN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,IA3EnB,GA2E6B,YACnCX,EAAIuN,EAAGvN,EAAGC,EAAGjD,EAAGF,EAAGC,EAAE4D,EAAI,GA/Ef,EA+EwB,YAClC7D,EAAIyQ,EAAGzQ,EAAGkD,EAAGC,EAAGjD,EAAGD,EAAE4D,EAAI,IA/EnB,GA+E6B,YACnC3D,EAAIuQ,EAAGvQ,EAAGF,EAAGkD,EAAGC,EAAGlD,EAAE4D,EAAI,GA/EnB,GA+E4B,WAClCV,EAAIsN,EAAGtN,EAAGjD,EAAGF,EAAGkD,EAAGjD,EAAE4D,EAAI,GA/EnB,GA+E4B,YAClCX,EAAIyM,EAAYzM,EAAG8N,GACnB7N,EAAIwM,EAAYxM,EAAG8N,GACnB/Q,EAAIyP,EAAYzP,EAAGgR,GACnBlR,EAAI2P,EAAY3P,EAAGmR,GAKrB,OAFaR,EAAUzN,GAAKyN,EAAUxN,GAAKwN,EAAUzQ,GAAKyQ,EAAU3Q,IAExDsP,aACd,EG5hBgB,SAAAsC,EAAYvF,EAAa3L,GACvC,OAAO,IAAIqC,EAAWsJ,EAAK3L,EAC7B,CAkBgB,SAAAmR,EAAUpR,EAAWX,GACnC,GAAIA,EAAIW,EAAE9D,OAAS,GAIjB,KAAM,+BAAiCmD,EAAI,OAASW,EAAE9D,OAAS,IAEjE,MAAMoF,EAAK,GACX,IAAIvF,EAAIiE,EAAE9D,OAAS,EACnB,KAAOH,GAAK,GAAKsD,EAAI,GAAG,CACtB,MAAMI,EAAIO,EAAEc,WAAW/E,KACnB0D,EAAI,IAEN6B,IAAKjC,GAAKI,EACDA,EAAI,KAAOA,EAAI,MACxB6B,IAAKjC,GAAU,GAAJI,EAAU,IACrB6B,IAAKjC,GAAMI,GAAK,EAAK,MAErB6B,IAAKjC,GAAU,GAAJI,EAAU,IACrB6B,IAAKjC,GAAOI,GAAK,EAAK,GAAM,IAC5B6B,IAAKjC,GAAMI,GAAK,GAAM,IAEzB,CACD6B,IAAKjC,GAAK,EACV,MAAMgS,EAAM,IAAIrP,EACVxC,EAAI,GACV,KAAOH,EAAI,GAAG,CAGZ,IADAG,EAAE,GAAK,EACS,IAATA,EAAE,IAAU6R,EAAIhQ,UAAU7B,GACjC8B,IAAKjC,GAAKG,EAAE,EACb,CAGD,OAFA8B,IAAKjC,GAAK,EACViC,IAAKjC,GAAK,EACH,IAAIiD,EAAWhB,EACxB,OAKagQ,EACXjS,EAAI,IAAIiD,EACR7B,EAAI,EACIlB,EAAI,IAAI+C,EACR6B,EAAI,IAAI7B,EACRgD,EAAI,IAAIhD,EACRiP,KAAO,IAAIjP,EACXkP,KAAO,IAAIlP,EACXmP,MAAQ,IAAInP,EAUpBoP,UAAUC,EAAWtD,GACnB,IAAIsD,IAAKtD,EAGF,KAAM,yBAFXrS,KAAKqD,EAAI8R,EAAYQ,EAAG,IACxB3V,KAAKyE,EAAImR,SAASvD,EAAG,GAExB,CAGDwD,SAASrS,GACP,OAAOA,EAAEyH,UAAUjL,KAAKyE,EAAGzE,KAAKqD,EACjC,CAGDyS,QAAQC,GACN,MAAM9O,EAAImO,EAAUW,EAAO/V,KAAKqD,EAAEkF,YAAc,GAAM,GAIhD/G,EAFIxB,KAAK6V,SAAS5O,GAEZc,SAAS,IACrB,OAAuB,IAAP,EAAXvG,EAAEtB,QAA0BsB,EACrB,IAAMA,CACnB,CAGDwU,WAAWL,EAAWtD,EAAWD,GAC/B,KAAIuD,GAAKtD,GAAKsD,EAAEzV,OAAS,GAAKmS,EAAEnS,OAAS,GAIlC,KAAM,0BAHXF,KAAKqD,EAAI8R,EAAYQ,EAAG,IACxB3V,KAAKyE,EAAImR,SAASvD,EAAG,IACrBrS,KAAKuD,EAAI4R,EAAY/C,EAAG,GAE3B,CAGD6D,aACEN,EACAtD,EACAD,EACA8D,EACAC,EACAC,EACAC,EACAlE,GAEA,KAAIwD,GAAKtD,GAAKsD,EAAEzV,OAAS,GAAKmS,EAAEnS,OAAS,GASlC,MAAM,IAAIoW,MAAM,2BARrBtW,KAAKqD,EAAI8R,EAAYQ,EAAG,IACxB3V,KAAKyE,EAAImR,SAASvD,EAAG,IACrBrS,KAAKuD,EAAI4R,EAAY/C,EAAG,IACxBpS,KAAKmI,EAAIgN,EAAYe,EAAG,IACxBlW,KAAKsJ,EAAI6L,EAAYgB,EAAG,IACxBnW,KAAKuV,KAAOJ,EAAYiB,EAAI,IAC5BpW,KAAKwV,KAAOL,EAAYkB,EAAI,IAC5BrW,KAAKyV,MAAQN,EAAYhD,EAAG,GAE/B,CAGDoE,SAASrE,EAAWG,GAClB,MAAMgD,EAAM,IAAIjQ,EACVoR,EAAKtE,GAAK,EAChBlS,KAAKyE,EAAImR,SAASvD,EAAG,IACrB,MAAMoE,EAAK,IAAInQ,EAAW+L,EAAG,IAC7B,OAAS,CACP,KACErS,KAAKmI,EAAI,IAAI7B,EAAW4L,EAAIsE,EAAI,EAAGnB,GAG/B,IADFrV,KAAKmI,EAAEqF,SAASlH,EAAW8D,KAAKkE,IAAImI,GAAInO,UAAUhC,EAAW8D,OAE7DpK,KAAKmI,EAAEgE,gBAAgB,MAI3B,KACEnM,KAAKsJ,EAAI,IAAIhD,EAAWkQ,EAAI,EAAGnB,GAG3B,IADFrV,KAAKsJ,EAAEkE,SAASlH,EAAW8D,KAAKkE,IAAImI,GAAInO,UAAUhC,EAAW8D,OAE7DpK,KAAKsJ,EAAE6C,gBAAgB,MAI3B,GAAInM,KAAKmI,EAAEG,UAAUtI,KAAKsJ,IAAM,EAAG,CACjC,MAAM3F,EAAI3D,KAAKmI,EACfnI,KAAKmI,EAAInI,KAAKsJ,EACdtJ,KAAKsJ,EAAI3F,CACV,CACD,MAAM+S,EAAK1W,KAAKmI,EAAEqF,SAASlH,EAAW8D,KAChCuM,EAAK3W,KAAKsJ,EAAEkE,SAASlH,EAAW8D,KAChCwM,EAAMF,EAAGjJ,SAASkJ,GACxB,GAA8C,IAA1CC,EAAItI,IAAImI,GAAInO,UAAUhC,EAAW8D,KAAY,CAC/CpK,KAAKqD,EAAIrD,KAAKmI,EAAEsF,SAASzN,KAAKsJ,GAC9BtJ,KAAKuD,EAAIkT,EAAGjI,WAAWoI,GACvB5W,KAAKuV,KAAOvV,KAAKuD,EAAE+G,IAAIoM,GACvB1W,KAAKwV,KAAOxV,KAAKuD,EAAE+G,IAAIqM,GACvB3W,KAAKyV,MAAQzV,KAAKsJ,EAAEkF,WAAWxO,KAAKmI,GACpC,KACD,CACF,CACF,CAGS0O,UAAUrT,GAClB,IAAKxD,KAAKmI,IAAMnI,KAAKsJ,EAAG,OAAO9F,EAAEyK,OAAOjO,KAAKuD,EAAGvD,KAAKqD,GAErD,IAAIyT,EAAKtT,EAAE8G,IAAItK,KAAKmI,GAAG8F,OAAOjO,KAAKuV,KAAMvV,KAAKmI,GAC9C,MAAM4O,EAAKvT,EAAE8G,IAAItK,KAAKsJ,GAAG2E,OAAOjO,KAAKwV,KAAMxV,KAAKsJ,GAChD,KAAOwN,EAAGxO,UAAUyO,GAAM,GAAGD,EAAKA,EAAGvJ,IAAIvN,KAAKmI,GAC9C,OAAO2O,EACJtJ,SAASuJ,GACTtJ,SAASzN,KAAKyV,OACdnL,IAAItK,KAAKmI,GACTsF,SAASzN,KAAKsJ,GACdiE,IAAIwJ,EACR,CAIDC,QAAQC,GACN,MAAMxT,EAAI0R,EAAY8B,EAAO,IACvBhQ,EAAIjH,KAAK6W,UAAUpT,GACzB,OAAMwD,aAAaX,EACZ4Q,EAAYjQ,EAAIjH,KAAKqD,EAAEkF,YAAc,GAAM,GADX,IAExC,CAED4O,WAAaC,EACbC,mBAAqBC,EACrBC,qBAAuBC,GACvBC,6BAA+BC,GAC/BC,aAAeC,GAEfC,SACE,OAAOC,KAAKC,UAAU,CACpBtC,MAAOzV,KAAKyV,MAAM1N,SAAS,IAC3BxE,EAAGvD,KAAKuD,EAAEwE,SAAS,IACnBwN,KAAMvV,KAAKuV,KAAKxN,SAAS,IACzByN,KAAMxV,KAAKwV,KAAKzN,SAAS,IACzBtD,EAAGzE,KAAKyE,EAAEsD,SAAS,IACnB1E,EAAGrD,KAAKqD,EAAE0E,SAAS,IACnBI,EAAGnI,KAAKmI,EAAEJ,SAAS,IACnBuB,EAAGtJ,KAAKsJ,EAAEvB,SAAS,KAEtB,CAEDxB,aAAanG,GACX,MAAM4X,EAAuB,iBAAR5X,EAAmB0X,KAAKG,MAAM7X,GAAOA,EAI1D,IAAK4X,EACH,OAAO,KAGT,MAAME,EAAM,IAAI5C,EAYhB,OAXA4C,EAAIjC,aACF+B,EAAK3U,EACL2U,EAAKvT,EACLuT,EAAKzU,EACLyU,EAAK7P,EACL6P,EAAK1O,EACL0O,EAAKzC,KACLyC,EAAKxC,KACLwC,EAAKvC,OAGAyC,CACR,EAKa,SAAAhB,EAAY3T,EAAeF,GACzC,MAAMqD,EAAInD,EAAE6I,cACZ,IAAIrM,EAAI,EACR,KAAOA,EAAI2G,EAAExG,QAAmB,IAATwG,EAAE3G,MAAYA,EACrC,GAAI2G,EAAExG,OAASH,GAAMsD,EAAI,GAAc,IAATqD,EAAE3G,GAAU,OAAO,KAEjD,MADEA,EACc,IAAT2G,EAAE3G,SAAgBA,GAAK2G,EAAExG,OAAQ,OAAO,KAC/C,IAAIiY,EAAM,GACV,OAASpY,EAAI2G,EAAExG,QAAQ,CACrB,MAAMuD,EAAW,IAAPiD,EAAE3G,GACR0D,EAAI,IAEN0U,GAAOjT,OAAOC,aAAa1B,GAClBA,EAAI,KAAOA,EAAI,KACxB0U,GAAOjT,OAAOC,cAAmB,GAAJ1B,IAAW,EAAiB,GAAXiD,EAAE3G,EAAI,MAClDA,IAEFoY,GAAOjT,OAAOC,cACN,GAAJ1B,IAAW,IAAmB,GAAXiD,EAAE3G,EAAI,KAAY,EAAiB,GAAX2G,EAAE3G,EAAI,IAErDA,GAAK,EAER,CACD,OAAOoY,CACT,CA6BA,MAAMC,EAAyB,CAC7BxG,KAAM,iCACN7B,OAAQ,0CAMJsI,EAA8B,CAClCzG,OACA7B,UAQF,SAASuI,EACPtU,EACAuU,EACAC,GAEA,MAAMC,EAAWF,EAAU,EAErBG,GAAWC,EADAN,EAAqBG,IACZxU,GAEpB4U,EAAQ,OACRC,EAAQ,KAAOT,EAAgBI,GAAWE,EAChD,IAAII,EAAO,GACX,MAAMC,EAAON,EAAWG,EAAM1Y,OAAS2Y,EAAM3Y,OAC7C,IAAK,IAAIH,EAAI,EAAGA,EAAIgZ,EAAMhZ,GAAK,EAC7B+Y,GAAQ,KAGV,OAD0BF,EAAQE,EAAOD,CAE3C,CAEA,SAASzB,EAEPpT,EACAwU,GAEA,MAKMQ,EAAkB7D,EALZmD,EACVtU,EACAhE,KAAKqD,EAAEkF,YACPiQ,GAEuC,IAGzC,OAFexY,KAAK6W,UAAUmC,GACPjR,SAAS,GAElC,CAEA,SAASuP,EAA0CtT,GACjD,MAKMgV,EAAkB7D,EALZmD,EACVtU,EACAhE,KAAKqD,EAAEkF,YACP,QAEuC,IAGzC,OAFevI,KAAK6W,UAAUmC,GACPjR,SAAS,GAElC,CAEA,SAASyP,GAA4CxT,GACnD,MAKMgV,EAAkB7D,EALZmD,EACVtU,EACAhE,KAAKqD,EAAEkF,YACP,UAEuC,IAGzC,OAFevI,KAAK6W,UAAUmC,GACPjR,SAAS,GAElC,CAiBA,SAASkR,GACPC,EACAC,EACAC,GAEA,MAAMC,EAhBR,SACEH,EACAC,EACAC,GAEA,MAAMlB,EAAM,IAAI5C,EAGhB,OAFA4C,EAAIxC,UAAUyD,EAAIC,GACKlB,EAAIrC,SAASqD,EAEtC,CAOyBI,CAA+BJ,EAAOC,EAAIC,GAEjE,OADoBC,EAAetR,SAAS,IAAI8H,QAAQ,SAAU,GAEpE,CAEA,SAAS0J,GACPC,GAEA,IAAK,MAAMC,KAAWrB,EAAiB,CACrC,MAAMsB,EAAOtB,EAAgBqB,GACvBE,EAAMD,EAAKxZ,OACjB,GAAIsZ,EAAYI,UAAU,EAAGD,KAASD,EACpC,MAAO,CAACD,EAAoBD,EAAYI,UAAUD,GAErD,CACD,MAAO,EACT,CAmBA,SAASjC,GAEPmC,EACAC,GAEA,MACM1V,EAvBR,SACEyV,EACAX,EACAC,EACAC,GAEA,MACMW,EACJR,GAFkBN,GAAiCC,EAAOC,EAAIC,IAGhE,GAA6B,IAAzBW,EAAc7Z,OAAc,OAAO,EACvC,MAAMuZ,EAAUM,EAAc,GAI9B,OAHoBA,EAAc,MAEbC,EADV3B,EAAqBoB,IACRI,EAE1B,CAQiBI,CACbJ,EAFY1E,EAAY2E,EAAM,IAI9B9Z,KAAKqD,EAAE0E,SAAS,IAChB/H,KAAKyE,EAAEsD,SAAS,KAElB,OAAO3D,CACT,CAEA,SAASwT,GAEPiC,EACAC,GAGA,MAAMZ,EAAQ/D,EADd2E,EAAOA,EAAKjK,QAAQ,UAAW,IACC,IAG1BkK,EACJR,GAHqBvZ,KAAK6V,SAASqD,GACFnR,SAAS,IAAI8H,QAAQ,SAAU,KAIlE,GAA6B,IAAzBkK,EAAc7Z,OAAc,OAAO,EACvC,MAAMuZ,EAAUM,EAAc,GAI9B,OAHoBA,EAAc,MAEbC,EADV3B,EAAqBoB,IACRI,EAE1B,CCndA,MAAMK,GACJ,mEACIC,GAAQ,uCAEd5a,EAAIO,6FDWE,SAAmB4G,GACvB,OAAIA,EAAI,GAAa,IAAMA,EAAEqB,SAAS,IAC1BrB,EAAEqB,SAAS,GACzB,mBCAExB,gBAAgB5C,GACd,IACEF,EACAJ,EAFEoD,EAAI,EAGJxC,EAAI,GAEND,EAAI,EACN,MAAMoW,EAAKzW,EAAEzD,OACb,IAAKmD,EAAI,EAAGA,EAAI+W,EAAI/W,IAClBI,EAAIE,EAAEmB,WAAWzB,GACP,IAANW,GACFC,GAAKiW,GAAYzS,OAAQhE,GAAK,EAAK,IACnCgD,GAAS,EAAJhD,IAAU,GACA,IAANO,GACTC,GAAKiW,GAAYzS,OAAOhB,EAAMhD,GAAK,EAAK,IACxCgD,GAAS,GAAJhD,IAAW,GACD,IAANO,IACTC,GAAKiW,GAAYzS,OAAOhB,EAAMhD,GAAK,EAAK,GAExCQ,GAAKiW,GAAYzS,OAAW,GAAJhE,IAG1BO,GAAK,EACK,IAANA,IAASA,EAAI,GAWnB,OATIA,EAAI,IACNC,GAAKiW,GAAYzS,OAAOhB,GAExBxC,GAAK,KAGG,IAAND,IACFC,GAAK,KAEAA,CACR,CAEDsC,gBAAgB5C,GACd,IAAIF,EAAGJ,EACHY,EAAI,GACND,EAAI,EACJyC,EAAI,EACN,MAAM2T,EAAKzW,EAAEzD,OACb,IAAKmD,EAAI,EAAGA,EAAI+W,EAAI/W,IAClBI,EAAIyW,GAAY3V,QAAQZ,EAAE8D,OAAOpE,IAC7BI,GAAK,IACHO,IAAGC,GAAKiB,OAAOC,aAAasB,EAAMhD,GAAM,EAAIO,EAAM,MACtDA,EAAKA,EAAI,EAAK,EACdyC,EAAKhD,GAAKO,EAAK,KAGnB,OAAOC,CACR,CAEDsC,eAAe/E,GACb,IAAIzB,EACA0D,EACA0U,EAAM,GAIV,IAHI3W,EAAEtB,OAAS,GAAM,IACnBsB,EAAI,IAAMA,GAEPzB,EAAI,EAAGA,EAAI,GAAKyB,EAAEtB,OAAQH,GAAK,EAClC0D,EAAImS,SAASpU,EAAEoY,UAAU7Z,EAAGA,EAAI,GAAI,IACpCoY,GAAO+B,GAAYzS,OAAOhE,GAAK,GAAKyW,GAAYzS,OAAW,GAAJhE,GASzD,IAPI1D,EAAI,IAAMyB,EAAEtB,QACduD,EAAImS,SAASpU,EAAEoY,UAAU7Z,EAAGA,EAAI,GAAI,IACpCoY,GAAO+B,GAAYzS,OAAOhE,GAAK,IACtB1D,EAAI,IAAMyB,EAAEtB,SACrBuD,EAAImS,SAASpU,EAAEoY,UAAU7Z,EAAGA,EAAI,GAAI,IACpCoY,GAAO+B,GAAYzS,OAAOhE,GAAK,GAAKyW,GAAYzS,QAAY,EAAJhE,IAAU,KAE/C,EAAb0U,EAAIjY,QAAc,GAAGiY,GAAO,IACpC,OAAOA,CACR,CAED5R,eAAevC,GACb,IACIjE,EADAoY,EAAM,GAEN/Q,EAAI,EACJiT,EAAO,EACX,IAAKta,EAAI,EAAGA,EAAIiE,EAAE9D,QACI,MAAhB8D,EAAEyD,OAAO1H,KADaA,EAAG,CAE7B,MAAMkF,EAAIiV,GAAY3V,QAAQP,EAAEyD,OAAO1H,IACnCkF,EAAI,IACE,IAANmC,GACF+Q,GAAO/P,EAASnD,GAAK,GACrBoV,EAAW,EAAJpV,EACPmC,EAAI,GACW,IAANA,GACT+Q,GAAO/P,EAAUiS,GAAQ,EAAMpV,GAAK,GACpCoV,EAAW,GAAJpV,EACPmC,EAAI,GACW,IAANA,GACT+Q,GAAO/P,EAASiS,GAChBlC,GAAO/P,EAASnD,GAAK,GACrBoV,EAAW,EAAJpV,EACPmC,EAAI,IAEJ+Q,GAAO/P,EAAUiS,GAAQ,EAAMpV,GAAK,GACpCkT,GAAO/P,EAAa,GAAJnD,GAChBmC,EAAI,GAEP,CAED,OADU,IAANA,IAAS+Q,GAAO/P,EAASiS,GAAQ,IAC9BlC,CACR,CAGD5R,oBAAoBqJ,GAClB,MAAM0K,EAAQ,GACd,IAAK,IAAIva,EAAI,EAAGA,EAAI6P,EAAI1P,OAAQH,IAC9Bua,EAAM9V,KAAKoL,EAAI9K,WAAW/E,IAE5B,OAAOua,CACR,CAGD/T,oBAAoB+T,GAClB,IAAI1K,EAAM,GACV,IAAK,IAAI7P,EAAI,EAAGA,EAAIua,EAAMpa,OAAQH,IAChC6P,GAAO1K,OAAOC,aAAamV,EAAMva,IAEnC,OAAO6P,CACR,CAGDrJ,mBAAmBqJ,GACjB,OAAO2K,SAASC,mBAAmB5K,GACpC,CAGDrJ,mBAAmBkU,GACjB,OAAOC,mBAAmBC,OAAOF,GAClC,CAGDlU,kBAAkBqJ,GAChB,MAAM6K,EAAaF,SAASC,mBAAmB5K,IAC/C,OAAO5P,KAAK4a,aAAaH,EAC1B,CAGDlU,kBAAkB+T,GAChB,MAAMG,EAAaza,KAAK6a,aAAaP,GACrC,OAAOI,mBAAmBC,OAAOF,GAClC,CAGDlU,gBAAgBE,EAAcC,GAC5B,MAAMgG,EAAM,IAAI/M,MAAM,IACtB,IAAK,IAAII,EAAI,EAAGA,EAAI,GAAIA,IACtB2M,EAAI3M,GAAK0G,EAAE1G,GAAK2G,EAAE3G,GAEpB,OAAO2M,CACR,CAGDnG,iBACE,MAAMtC,EAAI,IAAI+B,EACR8U,EAAK,IAAInb,MAAM,IAErB,OADAsE,EAAEoB,UAAUyV,GACLA,CACR,CAIDvU,aAAa+T,GACX,MAAMS,EAAWT,EAAM7Z,MAAM,GACvBua,GAAW,GAAMV,EAAMpa,OAAS,IAAO,GAC7C,IAAK,IAAIH,EAAIua,EAAMpa,OAAQH,EAAIua,EAAMpa,OAAS8a,EAASjb,IACrDgb,EAASvW,KAAK,GAEhB,OAAOuW,CACR,CAGDxU,aAAa+T,GACX,IAAIS,EAAWT,EAAM7Z,MAAM,GAC3B,KAAyC,IAAlCsa,EAASA,EAAS7a,OAAS,IAChC6a,EAAWA,EAASta,MAAM,EAAGsa,EAAS7a,OAAS,GAEjD,OAAO6a,CACR,CAGDxU,qBAAqB0U,EAAmB7a,GACtC,MAAM8a,EAAQ9a,EAAIK,MAAM,GACxBlB,EAAIY,UAAU+a,GACd,IAAIC,EAASnb,KAAKob,WAAWH,GAC7BE,EAASnb,KAAKqb,MAAMF,GACpB,IAAIG,EAAkBtb,KAAKub,UAC3B,IAAK,IAAIxb,EAAI,EAAGA,EAAIob,EAAOjb,OAAS,GAAIH,IAAK,CAC3C,IAAIyb,EAAYL,EAAO1a,MAAU,GAAJV,EAAY,GAAJA,EAAS,IAC9C,MAAM0b,EAAYH,EAAgB7a,MAAU,GAAJV,EAAY,GAAJA,EAAS,IACzDyb,EAAYxb,KAAK0b,SAASD,EAAWD,GACrCjc,EAAIoB,QAAQ6a,EAAWN,GACvBI,EAAkBA,EAAgB7Z,OAAO+Z,EAC1C,CACD,MAAMG,EAAa3b,KAAK6a,aAAaS,GACrC,OAAOtb,KAAK4b,SAASD,EACtB,CAGDpV,qBAAqBsV,EAAuBzb,GAC1C,MAAM8a,EAAQ9a,EAAIK,MAAM,GACxBlB,EAAIY,UAAU+a,GACd,MAAMY,EAAY9b,KAAK+b,SAASF,GAC1BP,EAAkBtb,KAAK4a,aAAakB,GAC1C,IAAIE,EAA6B,GACjC,IAAK,IAAIjc,EAAI,EAAGA,EAAIub,EAAgBpb,OAAS,GAAIH,IAAK,CACpD,IAAIyb,EAAYF,EAAgB7a,MAAU,GAAJV,EAAY,GAAJA,EAAS,IACvD,MAAM0b,EAAYH,EAAgB7a,MAAgB,IAATV,EAAI,GAAmB,IAATA,EAAI,GAAU,IACrER,EAAI2B,QAAQsa,EAAWN,GACvBM,EAAYxb,KAAK0b,SAASD,EAAWD,GACrCQ,EAAkBA,EAAgBva,OAAO+Z,EAC1C,CAED,OADAQ,EAAkBhc,KAAKic,MAAMD,GACtBhc,KAAKkc,WAAWF,EACxB,CAGDzV,cAAcqJ,GACZ,IAAIuM,EAAS,GACb,IAAK,IAAIpc,EAAI,EAAGA,EAAI6P,EAAI1P,OAAQH,IAC1BA,EAAI,IAAO,GAAW,IAANA,IAASoc,GAAU,MACvCA,GAAUvM,EAAI7P,GAEhB,OAAOoc,CACR,CAGD5V,wBACE,MAAMnG,EAAM,IAAIT,MAAM,IAGtB,OAFU,IAAIqG,GACZX,UAAUjF,GACLA,CACR,CAGDmG,sBAAsB6V,EAAoBC,GACxC7Z,EAAKC,WAAWsN,EAAOqM,IACvB,MAAMlE,EAAM,IAAI5C,EAEhB,OADA4C,EAAI3B,SAAS8F,EAAW,MACjBnE,CACR,CAGD3R,uBAAuB+V,GACrB,OAAOtc,KAAKuc,QAAQD,EAAOjZ,EAAE0E,SAAS,IACvC,CAGDxB,mBAAmBiW,GACjB,OAAO1J,EAAI0J,EACZ,CAEDjW,2BAA2BqJ,GACzB,MAAM+F,EAAI3V,KAAKyc,QAAQ7M,EAAI8M,MAAM,KAAK,IAEhCxE,EAAM,IAAI5C,EAEhB,OADA4C,EAAIxC,UAAUC,EAFJ,MAGHuC,CACR,CAED3R,eACE0U,EACA0B,EACAC,GAEA,CACE,IAAIC,EAAc,GAClB,MAAMC,EAAS9c,KAAK+c,iBACpB,IACE,MAAMC,EAAYhd,KAAKid,oBAAoBN,GAC3CE,GACE7c,KAAKuc,QAAQS,EAAUlH,QAAQ9V,KAAK6a,aAAaiC,KAAY,GAGhE,CAFC,MAAOI,GACP,MAAO,CAAEC,OAAQ,qBAClB,CACD,GAAIP,EAAY,CACd,MAAMzF,EAAanX,KAAKod,KAAKnC,EAAW2B,GACxC3B,GAAad,GACbc,GAAajb,KAAKwc,gBAAgBI,GAClC3B,GAAad,GACbc,GAAa9D,CACd,CAED,OADA0F,GAAe7c,KAAKqd,cAAcpC,EAAW6B,GACtC,CAAEK,OAAQ,UAAWG,OAAQT,EACrC,CACF,CAEDtW,eACEoV,EACAvb,GAEA,MAAMyc,EAAclB,EAAWe,MAAM,KAC/BI,EAAS1c,EAAI4W,QAAQhX,KAAKyc,QAAQI,EAAY,KACpD,GAAc,MAAVC,EACF,MAAO,CAAEK,OAAQ,WAEnB,MAAMI,EAAcvd,KAAK4a,aAAakC,GAChC7B,EAAYjb,KAAKwd,cAAcX,EAAY,GAAIU,GAAab,MAChEvC,IAEF,OAAIc,EAAU/a,OAAS,EACdF,KAAKyd,SAASxC,GAEd,CACLkC,OAAQ,UACRlC,UAAWA,EAAU,GACrByC,UAAW,WAEhB,CAEDnX,YAAY0U,EAAmB2B,GAC7B,OAAO5c,KAAKuc,QAAQK,EAAWzF,WAAW8D,EAAW,UACtD,CAED1U,cAAc0U,GACZ,MAAM7W,EAASpE,KAAKyd,SAASxC,GAC7B,MAAyB,YAAlB7W,EAAO+Y,QAA6C,aAArB/Y,EAAOsZ,SAC9C,CAEOnX,gBACN0U,GAEA,GAAyB,IAArBA,EAAU/a,OAAc,CAC1B,MAAM8c,EAAYhd,KAAKid,oBAAoBhC,EAAU,IAC/CyC,EAAY1d,KAAKyc,QAAQxB,EAAU,IACzC,OAAI+B,EAAUrF,aAAasD,EAAU,GAAIyC,GAChC,CACLP,OAAQ,UACRlC,UAAWA,EAAU,GACrByC,UAAW,WACXlB,gBAAiBxc,KAAKwc,gBAAgBQ,IAGjC,CACLG,OAAQ,UACRlC,UAAWA,EAAU,GACrByC,UAAW,SACXlB,gBAAiBxc,KAAKwc,gBAAgBQ,GAG3C,CACC,MAAO,CACLG,OAAQ,UAGb,0BD3Wa,SAAQnZ,EAAWX,GACjC,IAAI8U,EAAM,GACNpY,EAAI,EACR,KAAOA,EAAIsD,EAAIW,EAAE9D,QACfiY,GAAOnU,EAAE4V,UAAU7Z,EAAGA,EAAIsD,GAAK,KAC/BtD,GAAKsD,EAEP,OAAO8U,EAAMnU,EAAE4V,UAAU7Z,EAAGiE,EAAE9D,OAChC"}